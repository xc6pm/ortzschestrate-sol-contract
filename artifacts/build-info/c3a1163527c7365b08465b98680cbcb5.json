{"id":"c3a1163527c7365b08465b98680cbcb5","_format":"hh-sol-build-info-1","solcVersion":"0.8.28","solcLongVersion":"0.8.28+commit.7893614a","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\nimport {Panic} from \"../Panic.sol\";\nimport {SafeCast} from \"./SafeCast.sol\";\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n     *\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n     * one branch when needed, making this function more expensive.\n     */\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\n        unchecked {\n            // branchless ternary works because:\n            // b ^ (a ^ b) == a\n            // b ^ 0 == b\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a > b, a, b);\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a < b, a, b);\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n\n        // The following calculation ensures accurate ceiling division without overflow.\n        // Since a is non-zero, (a - 1) / b will not overflow.\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\n        // when a = type(uint256).max and b = 1.\n        unchecked {\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\n        }\n    }\n\n    /**\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     *\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2²⁵⁶ and mod 2²⁵⁶ - 1, then use\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2²⁵⁶ + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2²⁵⁶. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2²⁵⁶ / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2²⁵⁶. Now that denominator is an odd number, it has an inverse modulo 2²⁵⁶ such\n            // that denominator * inv ≡ 1 mod 2²⁵⁶. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv ≡ 1 mod 2⁴.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹⁶\n            inverse *= 2 - denominator * inverse; // inverse mod 2³²\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁶⁴\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹²⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2²⁵⁶\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2²⁵⁶. Since the preconditions guarantee that the outcome is\n            // less than 2²⁵⁶, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\n    }\n\n    /**\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\n     *\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\n     *\n     * If the input value is not inversible, 0 is returned.\n     *\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\n     */\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\n        unchecked {\n            if (n == 0) return 0;\n\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\n            // ax + ny = 1\n            // ax = 1 + (-y)n\n            // ax ≡ 1 (mod n) # x is the inverse of a modulo n\n\n            // If the remainder is 0 the gcd is n right away.\n            uint256 remainder = a % n;\n            uint256 gcd = n;\n\n            // Therefore the initial coefficients are:\n            // ax + ny = gcd(a, n) = n\n            // 0a + 1n = n\n            int256 x = 0;\n            int256 y = 1;\n\n            while (remainder != 0) {\n                uint256 quotient = gcd / remainder;\n\n                (gcd, remainder) = (\n                    // The old remainder is the next gcd to try.\n                    remainder,\n                    // Compute the next remainder.\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\n                    // where gcd is at most n (capped to type(uint256).max)\n                    gcd - remainder * quotient\n                );\n\n                (x, y) = (\n                    // Increment the coefficient of a.\n                    y,\n                    // Decrement the coefficient of n.\n                    // Can overflow, but the result is casted to uint256 so that the\n                    // next value of y is \"wrapped around\" to a value between 0 and n - 1.\n                    x - y * int256(quotient)\n                );\n            }\n\n            if (gcd != 1) return 0; // No inverse exists.\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\n        }\n    }\n\n    /**\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\n     *\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\n     * prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\n     *\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\n     */\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\n        unchecked {\n            return Math.modExp(a, p - 2, p);\n        }\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\n     *\n     * Requirements:\n     * - modulus can't be zero\n     * - underlying staticcall to precompile must succeed\n     *\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\n     * interpreted as 0.\n     */\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\n        (bool success, uint256 result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\n     * to operate modulo 0 or if the underlying precompile reverted.\n     *\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\n     * of a revert, but the result may be incorrectly interpreted as 0.\n     */\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\n        if (m == 0) return (false, 0);\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            // | Offset    | Content    | Content (Hex)                                                      |\n            // |-----------|------------|--------------------------------------------------------------------|\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\n            mstore(ptr, 0x20)\n            mstore(add(ptr, 0x20), 0x20)\n            mstore(add(ptr, 0x40), 0x20)\n            mstore(add(ptr, 0x60), b)\n            mstore(add(ptr, 0x80), e)\n            mstore(add(ptr, 0xa0), m)\n\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\n            // so we can use the memory scratch space located at offset 0.\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\n            result := mload(0x00)\n        }\n    }\n\n    /**\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\n     */\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\n        (bool success, bytes memory result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\n     */\n    function tryModExp(\n        bytes memory b,\n        bytes memory e,\n        bytes memory m\n    ) internal view returns (bool success, bytes memory result) {\n        if (_zeroBytes(m)) return (false, new bytes(0));\n\n        uint256 mLen = m.length;\n\n        // Encode call args in result and move the free memory pointer\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\n\n        assembly (\"memory-safe\") {\n            let dataPtr := add(result, 0x20)\n            // Write result on top of args to avoid allocating extra memory.\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\n            // Overwrite the length.\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\n            mstore(result, mLen)\n            // Set the memory pointer after the returned data.\n            mstore(0x40, add(dataPtr, mLen))\n        }\n    }\n\n    /**\n     * @dev Returns whether the provided byte array is zero.\n     */\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\n        for (uint256 i = 0; i < byteArray.length; ++i) {\n            if (byteArray[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\n     * using integer operations.\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        unchecked {\n            // Take care of easy edge cases when a == 0 or a == 1\n            if (a <= 1) {\n                return a;\n            }\n\n            // In this function, we use Newton's method to get a root of `f(x) := x² - a`. It involves building a\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\n            // the current value as `ε_n = | x_n - sqrt(a) |`.\n            //\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\n            // of the target. (i.e. `2**(e-1) ≤ sqrt(a) < 2**e`). We know that `e ≤ 128` because `(2¹²⁸)² = 2²⁵⁶` is\n            // bigger than any uint256.\n            //\n            // By noticing that\n            // `2**(e-1) ≤ sqrt(a) < 2**e → (2**(e-1))² ≤ a < (2**e)² → 2**(2*e-2) ≤ a < 2**(2*e)`\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\n            // to the msb function.\n            uint256 aa = a;\n            uint256 xn = 1;\n\n            if (aa >= (1 << 128)) {\n                aa >>= 128;\n                xn <<= 64;\n            }\n            if (aa >= (1 << 64)) {\n                aa >>= 64;\n                xn <<= 32;\n            }\n            if (aa >= (1 << 32)) {\n                aa >>= 32;\n                xn <<= 16;\n            }\n            if (aa >= (1 << 16)) {\n                aa >>= 16;\n                xn <<= 8;\n            }\n            if (aa >= (1 << 8)) {\n                aa >>= 8;\n                xn <<= 4;\n            }\n            if (aa >= (1 << 4)) {\n                aa >>= 4;\n                xn <<= 2;\n            }\n            if (aa >= (1 << 2)) {\n                xn <<= 1;\n            }\n\n            // We now have x_n such that `x_n = 2**(e-1) ≤ sqrt(a) < 2**e = 2 * x_n`. This implies ε_n ≤ 2**(e-1).\n            //\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to ε_n ≤ 2**(e-2).\n            // This is going to be our x_0 (and ε_0)\n            xn = (3 * xn) >> 1; // ε_0 := | x_0 - sqrt(a) | ≤ 2**(e-2)\n\n            // From here, Newton's method give us:\n            // x_{n+1} = (x_n + a / x_n) / 2\n            //\n            // One should note that:\n            // x_{n+1}² - a = ((x_n + a / x_n) / 2)² - a\n            //              = ((x_n² + a) / (2 * x_n))² - a\n            //              = (x_n⁴ + 2 * a * x_n² + a²) / (4 * x_n²) - a\n            //              = (x_n⁴ + 2 * a * x_n² + a² - 4 * a * x_n²) / (4 * x_n²)\n            //              = (x_n⁴ - 2 * a * x_n² + a²) / (4 * x_n²)\n            //              = (x_n² - a)² / (2 * x_n)²\n            //              = ((x_n² - a) / (2 * x_n))²\n            //              ≥ 0\n            // Which proves that for all n ≥ 1, sqrt(a) ≤ x_n\n            //\n            // This gives us the proof of quadratic convergence of the sequence:\n            // ε_{n+1} = | x_{n+1} - sqrt(a) |\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\n            //         = | (x_n² + a - 2*x_n*sqrt(a)) / (2 * x_n) |\n            //         = | (x_n - sqrt(a))² / (2 * x_n) |\n            //         = | ε_n² / (2 * x_n) |\n            //         = ε_n² / | (2 * x_n) |\n            //\n            // For the first iteration, we have a special case where x_0 is known:\n            // ε_1 = ε_0² / | (2 * x_0) |\n            //     ≤ (2**(e-2))² / (2 * (2**(e-1) + 2**(e-2)))\n            //     ≤ 2**(2*e-4) / (3 * 2**(e-1))\n            //     ≤ 2**(e-3) / 3\n            //     ≤ 2**(e-3-log2(3))\n            //     ≤ 2**(e-4.5)\n            //\n            // For the following iterations, we use the fact that, 2**(e-1) ≤ sqrt(a) ≤ x_n:\n            // ε_{n+1} = ε_n² / | (2 * x_n) |\n            //         ≤ (2**(e-k))² / (2 * 2**(e-1))\n            //         ≤ 2**(2*e-2*k) / 2**e\n            //         ≤ 2**(e-2*k)\n            xn = (xn + a / xn) >> 1; // ε_1 := | x_1 - sqrt(a) | ≤ 2**(e-4.5)  -- special case, see above\n            xn = (xn + a / xn) >> 1; // ε_2 := | x_2 - sqrt(a) | ≤ 2**(e-9)    -- general case with k = 4.5\n            xn = (xn + a / xn) >> 1; // ε_3 := | x_3 - sqrt(a) | ≤ 2**(e-18)   -- general case with k = 9\n            xn = (xn + a / xn) >> 1; // ε_4 := | x_4 - sqrt(a) | ≤ 2**(e-36)   -- general case with k = 18\n            xn = (xn + a / xn) >> 1; // ε_5 := | x_5 - sqrt(a) | ≤ 2**(e-72)   -- general case with k = 36\n            xn = (xn + a / xn) >> 1; // ε_6 := | x_6 - sqrt(a) | ≤ 2**(e-144)  -- general case with k = 72\n\n            // Because e ≤ 128 (as discussed during the first estimation phase), we know have reached a precision\n            // ε_6 ≤ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\n            // sqrt(a) or sqrt(a) + 1.\n            return xn - SafeCast.toUint(xn > a / xn);\n        }\n    }\n\n    /**\n     * @dev Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        uint256 exp;\n        unchecked {\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\n            value >>= exp;\n            result += exp;\n\n            result += SafeCast.toUint(value > 1);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        uint256 isGt;\n        unchecked {\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\n            value >>= isGt * 128;\n            result += isGt * 16;\n\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\n            value >>= isGt * 64;\n            result += isGt * 8;\n\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\n            value >>= isGt * 32;\n            result += isGt * 4;\n\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\n            value >>= isGt * 16;\n            result += isGt * 2;\n\n            result += SafeCast.toUint(value > (1 << 8) - 1);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value > type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value > type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value > type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value > type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value > type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value > type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value > type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value > type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value > type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value > type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value > type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value > type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value > type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value > type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value > type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value > type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value > type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value > type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value > type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value > type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value > type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value > type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value > type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value > type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value > type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value > type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value > type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value > type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value > type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value > type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value > type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value < 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value > uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n\n    /**\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\n     */\n    function toUint(bool b) internal pure returns (uint256 u) {\n        assembly (\"memory-safe\") {\n            u := iszero(iszero(b))\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\nimport {SafeCast} from \"./SafeCast.sol\";\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n     *\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n     * one branch when needed, making this function more expensive.\n     */\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\n        unchecked {\n            // branchless ternary works because:\n            // b ^ (a ^ b) == a\n            // b ^ 0 == b\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return ternary(a > b, a, b);\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return ternary(a < b, a, b);\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // Formula from the \"Bit Twiddling Hacks\" by Sean Eron Anderson.\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\n            // taking advantage of the most significant (or \"sign\" bit) in two's complement representation.\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\n            int256 mask = n >> 255;\n\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\n            return uint256((n + mask) ^ mask);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Panic.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Helper library for emitting standardized panic codes.\n *\n * ```solidity\n * contract Example {\n *      using Panic for uint256;\n *\n *      // Use any of the declared internal constants\n *      function foo() { Panic.GENERIC.panic(); }\n *\n *      // Alternatively\n *      function foo() { Panic.panic(Panic.GENERIC); }\n * }\n * ```\n *\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\n *\n * _Available since v5.1._\n */\n// slither-disable-next-line unused-state\nlibrary Panic {\n    /// @dev generic / unspecified error\n    uint256 internal constant GENERIC = 0x00;\n    /// @dev used by the assert() builtin\n    uint256 internal constant ASSERT = 0x01;\n    /// @dev arithmetic underflow or overflow\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\n    /// @dev division or modulo by zero\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\n    /// @dev enum conversion error\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\n    /// @dev invalid encoding in storage\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\n    /// @dev empty array pop\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\n    /// @dev array out of bounds access\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\n    /// @dev resource error (too large allocation or too large array)\n    uint256 internal constant RESOURCE_ERROR = 0x41;\n    /// @dev calling invalid internal function\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\n\n    /// @dev Reverts with a panic code. Recommended to use with\n    /// the internal constants with predefined codes.\n    function panic(uint256 code) internal pure {\n        assembly (\"memory-safe\") {\n            mstore(0x00, 0x4e487b71)\n            mstore(0x20, code)\n            revert(0x1c, 0x24)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SafeCast} from \"./math/SafeCast.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    using SafeCast for *;\n\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev The string being parsed contains characters that are not in scope of the given base.\n     */\n    error StringsInvalidChar();\n\n    /**\n     * @dev The string being parsed is not a properly formatted address.\n     */\n    error StringsInvalidAddressFormat();\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            assembly (\"memory-safe\") {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                assembly (\"memory-safe\") {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\n     * representation, according to EIP-55.\n     */\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\n        bytes memory buffer = bytes(toHexString(addr));\n\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\n        uint256 hashValue;\n        assembly (\"memory-safe\") {\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\n        }\n\n        for (uint256 i = 41; i > 1; --i) {\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\n                // case shift by xoring with 0x20\n                buffer[i] ^= 0x20;\n            }\n            hashValue >>= 4;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n\n    /**\n     * @dev Parse a decimal string and returns the value as a `uint256`.\n     *\n     * Requirements:\n     * - The string must be formatted as `[0-9]*`\n     * - The result must fit into an `uint256` type\n     */\n    function parseUint(string memory input) internal pure returns (uint256) {\n        return parseUint(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseUint} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `[0-9]*`\n     * - The result must fit into an `uint256` type\n     */\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\n        if (!success) revert StringsInvalidChar();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\n     * character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseUint(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, uint256 value) {\n        if (end > bytes(input).length || begin > end) return (false, 0);\n        return _tryParseUintUncheckedBounds(input, begin, end);\n    }\n\n    /**\n     * @dev Implementation of {tryParseUint} that does not check bounds. Caller should make sure that\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\n     */\n    function _tryParseUintUncheckedBounds(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) private pure returns (bool success, uint256 value) {\n        bytes memory buffer = bytes(input);\n\n        uint256 result = 0;\n        for (uint256 i = begin; i < end; ++i) {\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\n            if (chr > 9) return (false, 0);\n            result *= 10;\n            result += chr;\n        }\n        return (true, result);\n    }\n\n    /**\n     * @dev Parse a decimal string and returns the value as a `int256`.\n     *\n     * Requirements:\n     * - The string must be formatted as `[-+]?[0-9]*`\n     * - The result must fit in an `int256` type.\n     */\n    function parseInt(string memory input) internal pure returns (int256) {\n        return parseInt(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `[-+]?[0-9]*`\n     * - The result must fit in an `int256` type.\n     */\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\n        (bool success, int256 value) = tryParseInt(input, begin, end);\n        if (!success) revert StringsInvalidChar();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\n     * the result does not fit in a `int256`.\n     *\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\n     */\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\n    }\n\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\n\n    /**\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\n     * character or if the result does not fit in a `int256`.\n     *\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\n     */\n    function tryParseInt(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, int256 value) {\n        if (end > bytes(input).length || begin > end) return (false, 0);\n        return _tryParseIntUncheckedBounds(input, begin, end);\n    }\n\n    /**\n     * @dev Implementation of {tryParseInt} that does not check bounds. Caller should make sure that\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\n     */\n    function _tryParseIntUncheckedBounds(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) private pure returns (bool success, int256 value) {\n        bytes memory buffer = bytes(input);\n\n        // Check presence of a negative sign.\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\n        bool positiveSign = sign == bytes1(\"+\");\n        bool negativeSign = sign == bytes1(\"-\");\n        uint256 offset = (positiveSign || negativeSign).toUint();\n\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\n\n        if (absSuccess && absValue < ABS_MIN_INT256) {\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\n            return (true, type(int256).min);\n        } else return (false, 0);\n    }\n\n    /**\n     * @dev Parse a hexadecimal string (with or without \"0x\" prefix), and returns the value as a `uint256`.\n     *\n     * Requirements:\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\n     * - The result must fit in an `uint256` type.\n     */\n    function parseHexUint(string memory input) internal pure returns (uint256) {\n        return parseHexUint(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseHexUint} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\n     * - The result must fit in an `uint256` type.\n     */\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\n        if (!success) revert StringsInvalidChar();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\n     * invalid character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseHexUint(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, uint256 value) {\n        if (end > bytes(input).length || begin > end) return (false, 0);\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\n    }\n\n    /**\n     * @dev Implementation of {tryParseHexUint} that does not check bounds. Caller should make sure that\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\n     */\n    function _tryParseHexUintUncheckedBounds(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) private pure returns (bool success, uint256 value) {\n        bytes memory buffer = bytes(input);\n\n        // skip 0x prefix if present\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\"0x\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\n        uint256 offset = hasPrefix.toUint() * 2;\n\n        uint256 result = 0;\n        for (uint256 i = begin + offset; i < end; ++i) {\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\n            if (chr > 15) return (false, 0);\n            result *= 16;\n            unchecked {\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\n                // This guaratees that adding a value < 16 will not cause an overflow, hence the unchecked.\n                result += chr;\n            }\n        }\n        return (true, result);\n    }\n\n    /**\n     * @dev Parse a hexadecimal string (with or without \"0x\" prefix), and returns the value as an `address`.\n     *\n     * Requirements:\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\n     */\n    function parseAddress(string memory input) internal pure returns (address) {\n        return parseAddress(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseAddress} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\n     */\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\n        (bool success, address value) = tryParseAddress(input, begin, end);\n        if (!success) revert StringsInvalidAddressFormat();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\n     * formatted address. See {parseAddress} requirements.\n     */\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\n        return tryParseAddress(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\n     * formatted address. See {parseAddress} requirements.\n     */\n    function tryParseAddress(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, address value) {\n        if (end > bytes(input).length || begin > end) return (false, address(0));\n\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\"0x\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\n\n        // check that input is the correct length\n        if (end - begin == expectedLength) {\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\n            return (s, address(uint160(v)));\n        } else {\n            return (false, address(0));\n        }\n    }\n\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\n        uint8 value = uint8(chr);\n\n        // Try to parse `chr`:\n        // - Case 1: [0-9]\n        // - Case 2: [a-f]\n        // - Case 3: [A-F]\n        // - otherwise not supported\n        unchecked {\n            if (value > 47 && value < 58) value -= 48;\n            else if (value > 96 && value < 103) value -= 87;\n            else if (value > 64 && value < 71) value -= 55;\n            else return type(uint8).max;\n        }\n\n        return value;\n    }\n\n    /**\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\n     *\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\n     * assembly block as such would prevent some optimizations.\n     */\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\n        assembly (\"memory-safe\") {\n            value := mload(add(buffer, add(0x20, offset)))\n        }\n    }\n}\n"},"contracts/ORTBet.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.12;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\ncontract ORTBet is Ownable {\n    mapping(address => uint256) public userBalances;\n    mapping(address => uint256) public lockedStakes;\n    mapping(bytes32 => Game) public games;\n    mapping(address => address[]) public backupAddresses;\n    uint256 public constant feePercentage = 3;\n    uint256 public constant maxBackupAddresses = 3;\n    uint256 public feesCollected;\n\n    event StakesDeposited(\n        address indexed player,\n        address indexed depositAddress,\n        uint256 amount\n    );\n    event StakesWithdrawn(\n        address indexed player,\n        address indexed withdrawalAddress,\n        uint256 amount\n    );\n    event StakesLocked(address indexed player, uint256 amount);\n    event StakesUnlocked(address indexed player, uint256 amount);\n    event GameStarted(\n        bytes32 indexed gameId,\n        address indexed player1,\n        address indexed player2,\n        uint256 stakeAmount\n    );\n    event GameResolved(bytes32 indexed gameId, GameResult result);\n    event BackupAddressAdded(\n        address indexed backupAddress,\n        address indexed owner\n    );\n    event BackupAddressRemoved(\n        address indexed backupAddress,\n        address indexed owner\n    );\n    event FeesWithdrawn(address indexed owner, uint256 amount);\n\n    enum GameResult {\n        Draw,\n        Player1Won,\n        Player2Won\n    }\n\n    struct Game {\n        address player1;\n        address player2;\n        uint256 stakeAmount;\n        bool ongoing;\n    }\n\n    constructor() Ownable(msg.sender) {}\n\n    function depositStakes() external payable {\n        require(msg.value > 0, \"Deposit amount must be greater than 0.\");\n        userBalances[msg.sender] += msg.value;\n        emit StakesDeposited(msg.sender, msg.sender, msg.value);\n    }\n\n    function depositStakes(\n        address _mainAddress\n    ) external payable onlyBackupAddress(_mainAddress) {\n        require(msg.value > 0, \"Deposit amount must be greater than 0.\");\n\n        userBalances[_mainAddress] += msg.value;\n        emit StakesDeposited(_mainAddress, msg.sender, msg.value);\n    }\n\n    function withdrawStakes(uint256 _amount) external {\n        require(_amount > 0, \"Withdrawal amount must be greater than 0.\");\n        require(\n            userBalances[msg.sender] >= _amount,\n            \"Insufficient funds to withdraw.\"\n        );\n\n        userBalances[msg.sender] -= _amount;\n        payable(msg.sender).transfer(_amount);\n        emit StakesWithdrawn(msg.sender, msg.sender, _amount);\n    }\n\n    function withdrawStakes(\n        uint256 _amount,\n        address _mainAddress\n    ) external onlyBackupAddress(_mainAddress) {\n        require(_amount > 0, \"Withdrawal amount must be greater than 0.\");\n        require(\n            userBalances[_mainAddress] >= _amount,\n            \"Insufficient funds to withdraw.\"\n        );\n\n        userBalances[_mainAddress] -= _amount;\n        payable(msg.sender).transfer(_amount);\n        emit StakesWithdrawn(_mainAddress, msg.sender, _amount);\n    }\n\n    function startGame(\n        string calldata _gameId,\n        address _player1,\n        address _player2,\n        uint256 _stakeAmount\n    ) external onlyOwner {\n        bytes32 gameIdHash = keccak256(abi.encodePacked(_gameId));\n        // Checking stakeAmount just to see if the struct was initiated before.\n        require(games[gameIdHash].stakeAmount == 0, \"Game ID already exists.\");\n        require(\n            _player1 != address(0) && _player2 != address(0),\n            \"Invalid player address.\"\n        );\n        require(_stakeAmount > 0, \"_stakeAmount must be greater than 0.\");\n        require(\n            userBalances[_player1] >= _stakeAmount,\n            \"Player1 has insufficient funds.\"\n        );\n        require(\n            userBalances[_player2] >= _stakeAmount,\n            \"Player2 has insufficient funds.\"\n        );\n\n        // Calculate game starting fee\n        uint256 feeFromEachPlayer = calculateFee(_stakeAmount) / 2;\n        uint256 stakeAfterFeeDeduction = _stakeAmount - feeFromEachPlayer;\n        // Lock stakes\n        userBalances[_player1] -= stakeAfterFeeDeduction;\n        userBalances[_player2] -= stakeAfterFeeDeduction;\n        lockedStakes[_player1] += stakeAfterFeeDeduction;\n        lockedStakes[_player2] += stakeAfterFeeDeduction;\n        feesCollected += feeFromEachPlayer * 2;\n\n        games[gameIdHash] = Game({\n            player1: _player1,\n            player2: _player2,\n            stakeAmount: stakeAfterFeeDeduction,\n            ongoing: true\n        });\n\n        emit StakesLocked(_player1, stakeAfterFeeDeduction);\n        emit StakesLocked(_player2, stakeAfterFeeDeduction);\n        emit GameStarted(gameIdHash, _player1, _player2, _stakeAmount);\n    }\n\n    function resolveGame(\n        bytes32 _gameId,\n        GameResult _result\n    ) external onlyOwner {\n        require(\n            games[_gameId].ongoing,\n            \"Game either not created or is already finished.\"\n        );\n        Game storage game = games[_gameId];\n\n        lockedStakes[game.player1] -= game.stakeAmount;\n        lockedStakes[game.player2] -= game.stakeAmount;\n\n        if (_result == GameResult.Player1Won) {\n            // Transfer stakes to player 1\n            userBalances[game.player1] += game.stakeAmount * 2;\n            emit StakesUnlocked(game.player1, game.stakeAmount * 2);\n        } else if (_result == GameResult.Player2Won) {\n            // Transfer stakes to player 2\n            userBalances[game.player2] += game.stakeAmount * 2;\n            emit StakesUnlocked(game.player2, game.stakeAmount * 2);\n        } else if (_result == GameResult.Draw) {\n            // Refund both players\n            userBalances[game.player1] += game.stakeAmount;\n            userBalances[game.player2] += game.stakeAmount;\n            emit StakesUnlocked(game.player1, game.stakeAmount);\n            emit StakesUnlocked(game.player2, game.stakeAmount);\n        }\n\n        game.ongoing = false;\n\n        // Emit the game resolved event\n        emit GameResolved(_gameId, _result);\n    }\n\n    function addBackupAddress(address _backupAddress) external {\n        require(\n            backupAddresses[msg.sender].length < maxBackupAddresses,\n            string(\n                abi.encodePacked(\n                    \"Cannot add more than \",\n                    Strings.toString(maxBackupAddresses),\n                    \" backup addresses.\"\n                )\n            )\n        );\n        require(\n            _backupAddress != address(0),\n            \"Backup address cannot be zero address.\"\n        );\n        require(\n            _backupAddress != msg.sender,\n            \"Cannot set self as backup address.\"\n        );\n        require(\n            !contains(backupAddresses[msg.sender], _backupAddress),\n            \"Backup address already added.\"\n        );\n\n        backupAddresses[msg.sender].push(_backupAddress);\n        emit BackupAddressAdded(_backupAddress, msg.sender);\n    }\n\n    function removeBackupAddress(address _backupAddress) external {\n        require(\n            contains(backupAddresses[msg.sender], _backupAddress),\n            \"Not authorized to remove this recovery address.\"\n        );\n\n        address[] storage backups = backupAddresses[msg.sender];\n        for (uint i = 0; i < backups.length; i++) {\n            if (backups[i] == _backupAddress) {\n                backups[i] = backups[backups.length - 1];\n                backups.pop();\n                emit BackupAddressRemoved(_backupAddress, msg.sender);\n                return;\n            }\n        }\n    }\n\n    function getBackupAddresses(\n        address _mainAddress\n    ) external view returns (address[] memory) {\n        return backupAddresses[_mainAddress];\n    }\n\n    function withdrawFees(uint256 _amount) external onlyOwner {\n        require(feesCollected >= _amount, \"Insufficient fees collected.\");\n\n        feesCollected -= _amount;\n        payable(msg.sender).transfer(_amount);\n        emit FeesWithdrawn(msg.sender, _amount);\n    }\n\n    function calculateFee(uint256 _amount) public pure returns (uint256) {\n        return (_amount * feePercentage) / 100;\n    }\n\n    receive() external payable {\n        revert(\"Direct deposits not allowed.\");\n    }\n\n    fallback() external payable {\n        revert(\"Function does not exist.\");\n    }\n\n    function getBalance(address _userAddress) external view returns (uint256) {\n        return userBalances[_userAddress];\n    }\n\n    function getLockedStake(\n        address _userAddress\n    ) external view returns (uint256) {\n        return lockedStakes[_userAddress];\n    }\n\n    function getGame(bytes32 _gameId) external view returns (Game memory) {\n        return games[_gameId];\n    }\n\n    function contains(\n        address[] storage _list,\n        address _target\n    ) internal view returns (bool) {\n        for (uint i = 0; i < _list.length; i++) {\n            if (_list[i] == _target) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    modifier onlyBackupAddress(address _mainAddress) {\n        require(\n            contains(backupAddresses[_mainAddress], msg.sender),\n            \"Caller is not a registered backup address.\"\n        );\n\n        _;\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[177],"Ownable":[147]},"id":148,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"102:24:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":148,"sourceUnit":178,"src":"128:45:0","symbolAliases":[{"foreign":{"id":2,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":177,"src":"136:7:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5,"name":"Context","nameLocations":["692:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":177,"src":"692:7:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"692:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"175:487:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":147,"linearizedBaseContracts":[147,177],"name":"Ownable","nameLocation":"681:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":8,"mutability":"mutable","name":"_owner","nameLocation":"722:6:0","nodeType":"VariableDeclaration","scope":147,"src":"706:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7,"name":"address","nodeType":"ElementaryTypeName","src":"706:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"documentation":{"id":9,"nodeType":"StructuredDocumentation","src":"735:85:0","text":" @dev The caller account is not authorized to perform an operation."},"errorSelector":"118cdaa7","id":13,"name":"OwnableUnauthorizedAccount","nameLocation":"831:26:0","nodeType":"ErrorDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":11,"mutability":"mutable","name":"account","nameLocation":"866:7:0","nodeType":"VariableDeclaration","scope":13,"src":"858:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"858:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"857:17:0"},"src":"825:50:0"},{"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"881:82:0","text":" @dev The owner is not a valid owner account. (eg. `address(0)`)"},"errorSelector":"1e4fbdf7","id":18,"name":"OwnableInvalidOwner","nameLocation":"974:19:0","nodeType":"ErrorDefinition","parameters":{"id":17,"nodeType":"ParameterList","parameters":[{"constant":false,"id":16,"mutability":"mutable","name":"owner","nameLocation":"1002:5:0","nodeType":"VariableDeclaration","scope":18,"src":"994:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":15,"name":"address","nodeType":"ElementaryTypeName","src":"994:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"993:15:0"},"src":"968:41:0"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":24,"name":"OwnershipTransferred","nameLocation":"1021:20:0","nodeType":"EventDefinition","parameters":{"id":23,"nodeType":"ParameterList","parameters":[{"constant":false,"id":20,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"1058:13:0","nodeType":"VariableDeclaration","scope":24,"src":"1042:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":19,"name":"address","nodeType":"ElementaryTypeName","src":"1042:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":22,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"1089:8:0","nodeType":"VariableDeclaration","scope":24,"src":"1073:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":21,"name":"address","nodeType":"ElementaryTypeName","src":"1073:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1041:57:0"},"src":"1015:84:0"},{"body":{"id":49,"nodeType":"Block","src":"1259:153:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":35,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":30,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1273:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":33,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1297:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":32,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1289:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":31,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:0","typeDescriptions":{}}},"id":34,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1289:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1273:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":44,"nodeType":"IfStatement","src":"1269:95:0","trueBody":{"id":43,"nodeType":"Block","src":"1301:63:0","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":39,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1350:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":38,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1342:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":37,"name":"address","nodeType":"ElementaryTypeName","src":"1342:7:0","typeDescriptions":{}}},"id":40,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1342:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":36,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"1322:19:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1322:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":42,"nodeType":"RevertStatement","src":"1315:38:0"}]}},{"expression":{"arguments":[{"id":46,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1392:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":45,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"1373:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":47,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1373:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48,"nodeType":"ExpressionStatement","src":"1373:32:0"}]},"documentation":{"id":25,"nodeType":"StructuredDocumentation","src":"1105:115:0","text":" @dev Initializes the contract setting the address provided by the deployer as the initial owner."},"id":50,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":27,"mutability":"mutable","name":"initialOwner","nameLocation":"1245:12:0","nodeType":"VariableDeclaration","scope":50,"src":"1237:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":26,"name":"address","nodeType":"ElementaryTypeName","src":"1237:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1236:22:0"},"returnParameters":{"id":29,"nodeType":"ParameterList","parameters":[],"src":"1259:0:0"},"scope":147,"src":"1225:187:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":57,"nodeType":"Block","src":"1521:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":53,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"1531:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":54,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1531:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":55,"nodeType":"ExpressionStatement","src":"1531:13:0"},{"id":56,"nodeType":"PlaceholderStatement","src":"1554:1:0"}]},"documentation":{"id":51,"nodeType":"StructuredDocumentation","src":"1418:77:0","text":" @dev Throws if called by any account other than the owner."},"id":58,"name":"onlyOwner","nameLocation":"1509:9:0","nodeType":"ModifierDefinition","parameters":{"id":52,"nodeType":"ParameterList","parameters":[],"src":"1518:2:0"},"src":"1500:62:0","virtual":false,"visibility":"internal"},{"body":{"id":66,"nodeType":"Block","src":"1693:30:0","statements":[{"expression":{"id":64,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"1710:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":63,"id":65,"nodeType":"Return","src":"1703:13:0"}]},"documentation":{"id":59,"nodeType":"StructuredDocumentation","src":"1568:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":67,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1647:5:0","nodeType":"FunctionDefinition","parameters":{"id":60,"nodeType":"ParameterList","parameters":[],"src":"1652:2:0"},"returnParameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":67,"src":"1684:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1684:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1683:9:0"},"scope":147,"src":"1638:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":83,"nodeType":"Block","src":"1841:117:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":75,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":71,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"1855:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":72,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1855:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":73,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":159,"src":"1866:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":74,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1866:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1855:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":82,"nodeType":"IfStatement","src":"1851:101:0","trueBody":{"id":81,"nodeType":"Block","src":"1880:72:0","statements":[{"errorCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":77,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":159,"src":"1928:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":78,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1928:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":76,"name":"OwnableUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"1901:26:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":79,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":80,"nodeType":"RevertStatement","src":"1894:47:0"}]}}]},"documentation":{"id":68,"nodeType":"StructuredDocumentation","src":"1729:62:0","text":" @dev Throws if the sender is not the owner."},"id":84,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1805:11:0","nodeType":"FunctionDefinition","parameters":{"id":69,"nodeType":"ParameterList","parameters":[],"src":"1816:2:0"},"returnParameters":{"id":70,"nodeType":"ParameterList","parameters":[],"src":"1841:0:0"},"scope":147,"src":"1796:162:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":97,"nodeType":"Block","src":"2347:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":93,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2384:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":92,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2376:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":91,"name":"address","nodeType":"ElementaryTypeName","src":"2376:7:0","typeDescriptions":{}}},"id":94,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2376:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":90,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"2357:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":95,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2357:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":96,"nodeType":"ExpressionStatement","src":"2357:30:0"}]},"documentation":{"id":85,"nodeType":"StructuredDocumentation","src":"1964:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":98,"implemented":true,"kind":"function","modifiers":[{"id":88,"kind":"modifierInvocation","modifierName":{"id":87,"name":"onlyOwner","nameLocations":["2337:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"2337:9:0"},"nodeType":"ModifierInvocation","src":"2337:9:0"}],"name":"renounceOwnership","nameLocation":"2302:17:0","nodeType":"FunctionDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[],"src":"2319:2:0"},"returnParameters":{"id":89,"nodeType":"ParameterList","parameters":[],"src":"2347:0:0"},"scope":147,"src":"2293:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":125,"nodeType":"Block","src":"2613:145:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":106,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"2627:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2647:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":108,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2639:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"2639:7:0","typeDescriptions":{}}},"id":110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2627:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":120,"nodeType":"IfStatement","src":"2623:91:0","trueBody":{"id":119,"nodeType":"Block","src":"2651:63:0","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2700:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":114,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2692:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":113,"name":"address","nodeType":"ElementaryTypeName","src":"2692:7:0","typeDescriptions":{}}},"id":116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2692:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":112,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"2672:19:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2672:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":118,"nodeType":"RevertStatement","src":"2665:38:0"}]}},{"expression":{"arguments":[{"id":122,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"2742:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":121,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"2723:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2723:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":124,"nodeType":"ExpressionStatement","src":"2723:28:0"}]},"documentation":{"id":99,"nodeType":"StructuredDocumentation","src":"2400:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":126,"implemented":true,"kind":"function","modifiers":[{"id":104,"kind":"modifierInvocation","modifierName":{"id":103,"name":"onlyOwner","nameLocations":["2603:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"2603:9:0"},"nodeType":"ModifierInvocation","src":"2603:9:0"}],"name":"transferOwnership","nameLocation":"2552:17:0","nodeType":"FunctionDefinition","parameters":{"id":102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":101,"mutability":"mutable","name":"newOwner","nameLocation":"2578:8:0","nodeType":"VariableDeclaration","scope":126,"src":"2570:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":100,"name":"address","nodeType":"ElementaryTypeName","src":"2570:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2569:18:0"},"returnParameters":{"id":105,"nodeType":"ParameterList","parameters":[],"src":"2613:0:0"},"scope":147,"src":"2543:215:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":145,"nodeType":"Block","src":"2975:124:0","statements":[{"assignments":[133],"declarations":[{"constant":false,"id":133,"mutability":"mutable","name":"oldOwner","nameLocation":"2993:8:0","nodeType":"VariableDeclaration","scope":145,"src":"2985:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":132,"name":"address","nodeType":"ElementaryTypeName","src":"2985:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":135,"initialValue":{"id":134,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"3004:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2985:25:0"},{"expression":{"id":138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":136,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"3020:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":137,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"3029:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3020:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":139,"nodeType":"ExpressionStatement","src":"3020:17:0"},{"eventCall":{"arguments":[{"id":141,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":133,"src":"3073:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":142,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"3083:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":140,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"3052:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3052:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":144,"nodeType":"EmitStatement","src":"3047:45:0"}]},"documentation":{"id":127,"nodeType":"StructuredDocumentation","src":"2764:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":146,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2921:18:0","nodeType":"FunctionDefinition","parameters":{"id":130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":129,"mutability":"mutable","name":"newOwner","nameLocation":"2948:8:0","nodeType":"VariableDeclaration","scope":146,"src":"2940:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":128,"name":"address","nodeType":"ElementaryTypeName","src":"2940:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2939:18:0"},"returnParameters":{"id":131,"nodeType":"ParameterList","parameters":[],"src":"2975:0:0"},"scope":147,"src":"2912:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":148,"src":"663:2438:0","usedErrors":[13,18],"usedEvents":[24]}],"src":"102:3000:0"},"id":0},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[177]},"id":178,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":149,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:1"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":150,"nodeType":"StructuredDocumentation","src":"127:496:1","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":177,"linearizedBaseContracts":[177],"name":"Context","nameLocation":"642:7:1","nodeType":"ContractDefinition","nodes":[{"body":{"id":158,"nodeType":"Block","src":"718:34:1","statements":[{"expression":{"expression":{"id":155,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:1","memberName":"sender","nodeType":"MemberAccess","src":"735:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":154,"id":157,"nodeType":"Return","src":"728:17:1"}]},"id":159,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:1","nodeType":"FunctionDefinition","parameters":{"id":151,"nodeType":"ParameterList","parameters":[],"src":"675:2:1"},"returnParameters":{"id":154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":153,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":159,"src":"709:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":152,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:1"},"scope":177,"src":"656:96:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":167,"nodeType":"Block","src":"825:32:1","statements":[{"expression":{"expression":{"id":164,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:1","memberName":"data","nodeType":"MemberAccess","src":"842:8:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":163,"id":166,"nodeType":"Return","src":"835:15:1"}]},"id":168,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:1","nodeType":"FunctionDefinition","parameters":{"id":160,"nodeType":"ParameterList","parameters":[],"src":"775:2:1"},"returnParameters":{"id":163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":162,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":168,"src":"809:14:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":161,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:1"},"scope":177,"src":"758:99:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":175,"nodeType":"Block","src":"935:25:1","statements":[{"expression":{"hexValue":"30","id":173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":172,"id":174,"nodeType":"Return","src":"945:8:1"}]},"id":176,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:1","nodeType":"FunctionDefinition","parameters":{"id":169,"nodeType":"ParameterList","parameters":[],"src":"892:2:1"},"returnParameters":{"id":172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":171,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":176,"src":"926:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":170,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:1"},"scope":177,"src":"863:97:1","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":178,"src":"624:338:1","usedErrors":[],"usedEvents":[]}],"src":"101:862:1"},"id":1},"@openzeppelin/contracts/utils/Panic.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Panic.sol","exportedSymbols":{"Panic":[229]},"id":230,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":179,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"99:24:2"},{"abstract":false,"baseContracts":[],"canonicalName":"Panic","contractDependencies":[],"contractKind":"library","documentation":{"id":180,"nodeType":"StructuredDocumentation","src":"125:489:2","text":" @dev Helper library for emitting standardized panic codes.\n ```solidity\n contract Example {\n      using Panic for uint256;\n      // Use any of the declared internal constants\n      function foo() { Panic.GENERIC.panic(); }\n      // Alternatively\n      function foo() { Panic.panic(Panic.GENERIC); }\n }\n ```\n Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\n _Available since v5.1._"},"fullyImplemented":true,"id":229,"linearizedBaseContracts":[229],"name":"Panic","nameLocation":"665:5:2","nodeType":"ContractDefinition","nodes":[{"constant":true,"documentation":{"id":181,"nodeType":"StructuredDocumentation","src":"677:36:2","text":"@dev generic / unspecified error"},"id":184,"mutability":"constant","name":"GENERIC","nameLocation":"744:7:2","nodeType":"VariableDeclaration","scope":229,"src":"718:40:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":182,"name":"uint256","nodeType":"ElementaryTypeName","src":"718:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783030","id":183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"754:4:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"internal"},{"constant":true,"documentation":{"id":185,"nodeType":"StructuredDocumentation","src":"764:37:2","text":"@dev used by the assert() builtin"},"id":188,"mutability":"constant","name":"ASSERT","nameLocation":"832:6:2","nodeType":"VariableDeclaration","scope":229,"src":"806:39:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":186,"name":"uint256","nodeType":"ElementaryTypeName","src":"806:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783031","id":187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"841:4:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"0x01"},"visibility":"internal"},{"constant":true,"documentation":{"id":189,"nodeType":"StructuredDocumentation","src":"851:41:2","text":"@dev arithmetic underflow or overflow"},"id":192,"mutability":"constant","name":"UNDER_OVERFLOW","nameLocation":"923:14:2","nodeType":"VariableDeclaration","scope":229,"src":"897:47:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":190,"name":"uint256","nodeType":"ElementaryTypeName","src":"897:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783131","id":191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"940:4:2","typeDescriptions":{"typeIdentifier":"t_rational_17_by_1","typeString":"int_const 17"},"value":"0x11"},"visibility":"internal"},{"constant":true,"documentation":{"id":193,"nodeType":"StructuredDocumentation","src":"950:35:2","text":"@dev division or modulo by zero"},"id":196,"mutability":"constant","name":"DIVISION_BY_ZERO","nameLocation":"1016:16:2","nodeType":"VariableDeclaration","scope":229,"src":"990:49:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":194,"name":"uint256","nodeType":"ElementaryTypeName","src":"990:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783132","id":195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1035:4:2","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"0x12"},"visibility":"internal"},{"constant":true,"documentation":{"id":197,"nodeType":"StructuredDocumentation","src":"1045:30:2","text":"@dev enum conversion error"},"id":200,"mutability":"constant","name":"ENUM_CONVERSION_ERROR","nameLocation":"1106:21:2","nodeType":"VariableDeclaration","scope":229,"src":"1080:54:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":198,"name":"uint256","nodeType":"ElementaryTypeName","src":"1080:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783231","id":199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1130:4:2","typeDescriptions":{"typeIdentifier":"t_rational_33_by_1","typeString":"int_const 33"},"value":"0x21"},"visibility":"internal"},{"constant":true,"documentation":{"id":201,"nodeType":"StructuredDocumentation","src":"1140:36:2","text":"@dev invalid encoding in storage"},"id":204,"mutability":"constant","name":"STORAGE_ENCODING_ERROR","nameLocation":"1207:22:2","nodeType":"VariableDeclaration","scope":229,"src":"1181:55:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":202,"name":"uint256","nodeType":"ElementaryTypeName","src":"1181:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783232","id":203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1232:4:2","typeDescriptions":{"typeIdentifier":"t_rational_34_by_1","typeString":"int_const 34"},"value":"0x22"},"visibility":"internal"},{"constant":true,"documentation":{"id":205,"nodeType":"StructuredDocumentation","src":"1242:24:2","text":"@dev empty array pop"},"id":208,"mutability":"constant","name":"EMPTY_ARRAY_POP","nameLocation":"1297:15:2","nodeType":"VariableDeclaration","scope":229,"src":"1271:48:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":206,"name":"uint256","nodeType":"ElementaryTypeName","src":"1271:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783331","id":207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1315:4:2","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"0x31"},"visibility":"internal"},{"constant":true,"documentation":{"id":209,"nodeType":"StructuredDocumentation","src":"1325:35:2","text":"@dev array out of bounds access"},"id":212,"mutability":"constant","name":"ARRAY_OUT_OF_BOUNDS","nameLocation":"1391:19:2","nodeType":"VariableDeclaration","scope":229,"src":"1365:52:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":210,"name":"uint256","nodeType":"ElementaryTypeName","src":"1365:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783332","id":211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1413:4:2","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"0x32"},"visibility":"internal"},{"constant":true,"documentation":{"id":213,"nodeType":"StructuredDocumentation","src":"1423:65:2","text":"@dev resource error (too large allocation or too large array)"},"id":216,"mutability":"constant","name":"RESOURCE_ERROR","nameLocation":"1519:14:2","nodeType":"VariableDeclaration","scope":229,"src":"1493:47:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":214,"name":"uint256","nodeType":"ElementaryTypeName","src":"1493:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783431","id":215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1536:4:2","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"0x41"},"visibility":"internal"},{"constant":true,"documentation":{"id":217,"nodeType":"StructuredDocumentation","src":"1546:42:2","text":"@dev calling invalid internal function"},"id":220,"mutability":"constant","name":"INVALID_INTERNAL_FUNCTION","nameLocation":"1619:25:2","nodeType":"VariableDeclaration","scope":229,"src":"1593:58:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":218,"name":"uint256","nodeType":"ElementaryTypeName","src":"1593:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783531","id":219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1647:4:2","typeDescriptions":{"typeIdentifier":"t_rational_81_by_1","typeString":"int_const 81"},"value":"0x51"},"visibility":"internal"},{"body":{"id":227,"nodeType":"Block","src":"1819:151:2","statements":[{"AST":{"nativeSrc":"1854:110:2","nodeType":"YulBlock","src":"1854:110:2","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1875:4:2","nodeType":"YulLiteral","src":"1875:4:2","type":"","value":"0x00"},{"kind":"number","nativeSrc":"1881:10:2","nodeType":"YulLiteral","src":"1881:10:2","type":"","value":"0x4e487b71"}],"functionName":{"name":"mstore","nativeSrc":"1868:6:2","nodeType":"YulIdentifier","src":"1868:6:2"},"nativeSrc":"1868:24:2","nodeType":"YulFunctionCall","src":"1868:24:2"},"nativeSrc":"1868:24:2","nodeType":"YulExpressionStatement","src":"1868:24:2"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1912:4:2","nodeType":"YulLiteral","src":"1912:4:2","type":"","value":"0x20"},{"name":"code","nativeSrc":"1918:4:2","nodeType":"YulIdentifier","src":"1918:4:2"}],"functionName":{"name":"mstore","nativeSrc":"1905:6:2","nodeType":"YulIdentifier","src":"1905:6:2"},"nativeSrc":"1905:18:2","nodeType":"YulFunctionCall","src":"1905:18:2"},"nativeSrc":"1905:18:2","nodeType":"YulExpressionStatement","src":"1905:18:2"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1943:4:2","nodeType":"YulLiteral","src":"1943:4:2","type":"","value":"0x1c"},{"kind":"number","nativeSrc":"1949:4:2","nodeType":"YulLiteral","src":"1949:4:2","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1936:6:2","nodeType":"YulIdentifier","src":"1936:6:2"},"nativeSrc":"1936:18:2","nodeType":"YulFunctionCall","src":"1936:18:2"},"nativeSrc":"1936:18:2","nodeType":"YulExpressionStatement","src":"1936:18:2"}]},"evmVersion":"paris","externalReferences":[{"declaration":223,"isOffset":false,"isSlot":false,"src":"1918:4:2","valueSize":1}],"flags":["memory-safe"],"id":226,"nodeType":"InlineAssembly","src":"1829:135:2"}]},"documentation":{"id":221,"nodeType":"StructuredDocumentation","src":"1658:113:2","text":"@dev Reverts with a panic code. Recommended to use with\n the internal constants with predefined codes."},"id":228,"implemented":true,"kind":"function","modifiers":[],"name":"panic","nameLocation":"1785:5:2","nodeType":"FunctionDefinition","parameters":{"id":224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":223,"mutability":"mutable","name":"code","nameLocation":"1799:4:2","nodeType":"VariableDeclaration","scope":228,"src":"1791:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":222,"name":"uint256","nodeType":"ElementaryTypeName","src":"1791:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1790:14:2"},"returnParameters":{"id":225,"nodeType":"ParameterList","parameters":[],"src":"1819:0:2"},"scope":229,"src":"1776:194:2","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":230,"src":"657:1315:2","usedErrors":[],"usedEvents":[]}],"src":"99:1874:2"},"id":2},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[3035],"SafeCast":[4800],"SignedMath":[4944],"Strings":[1429]},"id":1430,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":231,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:3"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":233,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1430,"sourceUnit":3036,"src":"127:37:3","symbolAliases":[{"foreign":{"id":232,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3035,"src":"135:4:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeCast.sol","file":"./math/SafeCast.sol","id":235,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1430,"sourceUnit":4801,"src":"165:45:3","symbolAliases":[{"foreign":{"id":234,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"173:8:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":237,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1430,"sourceUnit":4945,"src":"211:49:3","symbolAliases":[{"foreign":{"id":236,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4944,"src":"219:10:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":238,"nodeType":"StructuredDocumentation","src":"262:34:3","text":" @dev String operations."},"fullyImplemented":true,"id":1429,"linearizedBaseContracts":[1429],"name":"Strings","nameLocation":"305:7:3","nodeType":"ContractDefinition","nodes":[{"global":false,"id":240,"libraryName":{"id":239,"name":"SafeCast","nameLocations":["325:8:3"],"nodeType":"IdentifierPath","referencedDeclaration":4800,"src":"325:8:3"},"nodeType":"UsingForDirective","src":"319:21:3"},{"constant":true,"id":243,"mutability":"constant","name":"HEX_DIGITS","nameLocation":"371:10:3","nodeType":"VariableDeclaration","scope":1429,"src":"346:56:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":241,"name":"bytes16","nodeType":"ElementaryTypeName","src":"346:7:3","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"384:18:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":246,"mutability":"constant","name":"ADDRESS_LENGTH","nameLocation":"431:14:3","nodeType":"VariableDeclaration","scope":1429,"src":"408:42:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":244,"name":"uint8","nodeType":"ElementaryTypeName","src":"408:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"448:2:3","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"documentation":{"id":247,"nodeType":"StructuredDocumentation","src":"457:81:3","text":" @dev The `value` string doesn't fit in the specified `length`."},"errorSelector":"e22e27eb","id":253,"name":"StringsInsufficientHexLength","nameLocation":"549:28:3","nodeType":"ErrorDefinition","parameters":{"id":252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":249,"mutability":"mutable","name":"value","nameLocation":"586:5:3","nodeType":"VariableDeclaration","scope":253,"src":"578:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":248,"name":"uint256","nodeType":"ElementaryTypeName","src":"578:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":251,"mutability":"mutable","name":"length","nameLocation":"601:6:3","nodeType":"VariableDeclaration","scope":253,"src":"593:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":250,"name":"uint256","nodeType":"ElementaryTypeName","src":"593:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"577:31:3"},"src":"543:66:3"},{"documentation":{"id":254,"nodeType":"StructuredDocumentation","src":"615:108:3","text":" @dev The string being parsed contains characters that are not in scope of the given base."},"errorSelector":"94e2737e","id":256,"name":"StringsInvalidChar","nameLocation":"734:18:3","nodeType":"ErrorDefinition","parameters":{"id":255,"nodeType":"ParameterList","parameters":[],"src":"752:2:3"},"src":"728:27:3"},{"documentation":{"id":257,"nodeType":"StructuredDocumentation","src":"761:84:3","text":" @dev The string being parsed is not a properly formatted address."},"errorSelector":"1d15ae44","id":259,"name":"StringsInvalidAddressFormat","nameLocation":"856:27:3","nodeType":"ErrorDefinition","parameters":{"id":258,"nodeType":"ParameterList","parameters":[],"src":"883:2:3"},"src":"850:36:3"},{"body":{"id":306,"nodeType":"Block","src":"1058:561:3","statements":[{"id":305,"nodeType":"UncheckedBlock","src":"1068:545:3","statements":[{"assignments":[268],"declarations":[{"constant":false,"id":268,"mutability":"mutable","name":"length","nameLocation":"1100:6:3","nodeType":"VariableDeclaration","scope":305,"src":"1092:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":267,"name":"uint256","nodeType":"ElementaryTypeName","src":"1092:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":275,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":271,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"1120:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":269,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3035,"src":"1109:4:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3035_$","typeString":"type(library Math)"}},"id":270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1114:5:3","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2807,"src":"1109:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1109:17:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1129:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1109:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1092:38:3"},{"assignments":[277],"declarations":[{"constant":false,"id":277,"mutability":"mutable","name":"buffer","nameLocation":"1158:6:3","nodeType":"VariableDeclaration","scope":305,"src":"1144:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":276,"name":"string","nodeType":"ElementaryTypeName","src":"1144:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":282,"initialValue":{"arguments":[{"id":280,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":268,"src":"1178:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":279,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1167:10:3","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":278,"name":"string","nodeType":"ElementaryTypeName","src":"1171:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1167:18:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"1144:41:3"},{"assignments":[284],"declarations":[{"constant":false,"id":284,"mutability":"mutable","name":"ptr","nameLocation":"1207:3:3","nodeType":"VariableDeclaration","scope":305,"src":"1199:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":283,"name":"uint256","nodeType":"ElementaryTypeName","src":"1199:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":285,"nodeType":"VariableDeclarationStatement","src":"1199:11:3"},{"AST":{"nativeSrc":"1249:67:3","nodeType":"YulBlock","src":"1249:67:3","statements":[{"nativeSrc":"1267:35:3","nodeType":"YulAssignment","src":"1267:35:3","value":{"arguments":[{"name":"buffer","nativeSrc":"1278:6:3","nodeType":"YulIdentifier","src":"1278:6:3"},{"arguments":[{"kind":"number","nativeSrc":"1290:2:3","nodeType":"YulLiteral","src":"1290:2:3","type":"","value":"32"},{"name":"length","nativeSrc":"1294:6:3","nodeType":"YulIdentifier","src":"1294:6:3"}],"functionName":{"name":"add","nativeSrc":"1286:3:3","nodeType":"YulIdentifier","src":"1286:3:3"},"nativeSrc":"1286:15:3","nodeType":"YulFunctionCall","src":"1286:15:3"}],"functionName":{"name":"add","nativeSrc":"1274:3:3","nodeType":"YulIdentifier","src":"1274:3:3"},"nativeSrc":"1274:28:3","nodeType":"YulFunctionCall","src":"1274:28:3"},"variableNames":[{"name":"ptr","nativeSrc":"1267:3:3","nodeType":"YulIdentifier","src":"1267:3:3"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":277,"isOffset":false,"isSlot":false,"src":"1278:6:3","valueSize":1},{"declaration":268,"isOffset":false,"isSlot":false,"src":"1294:6:3","valueSize":1},{"declaration":284,"isOffset":false,"isSlot":false,"src":"1267:3:3","valueSize":1}],"flags":["memory-safe"],"id":286,"nodeType":"InlineAssembly","src":"1224:92:3"},{"body":{"id":301,"nodeType":"Block","src":"1342:234:3","statements":[{"expression":{"id":289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"1360:5:3","subExpression":{"id":288,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":284,"src":"1360:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":290,"nodeType":"ExpressionStatement","src":"1360:5:3"},{"AST":{"nativeSrc":"1408:86:3","nodeType":"YulBlock","src":"1408:86:3","statements":[{"expression":{"arguments":[{"name":"ptr","nativeSrc":"1438:3:3","nodeType":"YulIdentifier","src":"1438:3:3"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1452:5:3","nodeType":"YulIdentifier","src":"1452:5:3"},{"kind":"number","nativeSrc":"1459:2:3","nodeType":"YulLiteral","src":"1459:2:3","type":"","value":"10"}],"functionName":{"name":"mod","nativeSrc":"1448:3:3","nodeType":"YulIdentifier","src":"1448:3:3"},"nativeSrc":"1448:14:3","nodeType":"YulFunctionCall","src":"1448:14:3"},{"name":"HEX_DIGITS","nativeSrc":"1464:10:3","nodeType":"YulIdentifier","src":"1464:10:3"}],"functionName":{"name":"byte","nativeSrc":"1443:4:3","nodeType":"YulIdentifier","src":"1443:4:3"},"nativeSrc":"1443:32:3","nodeType":"YulFunctionCall","src":"1443:32:3"}],"functionName":{"name":"mstore8","nativeSrc":"1430:7:3","nodeType":"YulIdentifier","src":"1430:7:3"},"nativeSrc":"1430:46:3","nodeType":"YulFunctionCall","src":"1430:46:3"},"nativeSrc":"1430:46:3","nodeType":"YulExpressionStatement","src":"1430:46:3"}]},"evmVersion":"paris","externalReferences":[{"declaration":243,"isOffset":false,"isSlot":false,"src":"1464:10:3","valueSize":1},{"declaration":284,"isOffset":false,"isSlot":false,"src":"1438:3:3","valueSize":1},{"declaration":262,"isOffset":false,"isSlot":false,"src":"1452:5:3","valueSize":1}],"flags":["memory-safe"],"id":291,"nodeType":"InlineAssembly","src":"1383:111:3"},{"expression":{"id":294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":292,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"1511:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1520:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1511:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":295,"nodeType":"ExpressionStatement","src":"1511:11:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":296,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"1544:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1553:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1544:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":300,"nodeType":"IfStatement","src":"1540:21:3","trueBody":{"id":299,"nodeType":"Break","src":"1556:5:3"}}]},"condition":{"hexValue":"74727565","id":287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1336:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":302,"nodeType":"WhileStatement","src":"1329:247:3"},{"expression":{"id":303,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":277,"src":"1596:6:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":266,"id":304,"nodeType":"Return","src":"1589:13:3"}]}]},"documentation":{"id":260,"nodeType":"StructuredDocumentation","src":"892:90:3","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":307,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"996:8:3","nodeType":"FunctionDefinition","parameters":{"id":263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":262,"mutability":"mutable","name":"value","nameLocation":"1013:5:3","nodeType":"VariableDeclaration","scope":307,"src":"1005:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":261,"name":"uint256","nodeType":"ElementaryTypeName","src":"1005:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1004:15:3"},"returnParameters":{"id":266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":265,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":307,"src":"1043:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":264,"name":"string","nodeType":"ElementaryTypeName","src":"1043:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1042:15:3"},"scope":1429,"src":"987:632:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":332,"nodeType":"Block","src":"1795:92:3","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":318,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":310,"src":"1826:5:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1834:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1826:9:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1844:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1826:20:3","trueExpression":{"hexValue":"2d","id":321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1838:3:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":327,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":310,"src":"1872:5:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":325,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4944,"src":"1857:10:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$4944_$","typeString":"type(library SignedMath)"}},"id":326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1868:3:3","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":4943,"src":"1857:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1857:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":324,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"1848:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":329,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1848:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":316,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1812:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":315,"name":"string","nodeType":"ElementaryTypeName","src":"1812:6:3","typeDescriptions":{}}},"id":317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1819:6:3","memberName":"concat","nodeType":"MemberAccess","src":"1812:13:3","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1812:68:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":314,"id":331,"nodeType":"Return","src":"1805:75:3"}]},"documentation":{"id":308,"nodeType":"StructuredDocumentation","src":"1625:89:3","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":333,"implemented":true,"kind":"function","modifiers":[],"name":"toStringSigned","nameLocation":"1728:14:3","nodeType":"FunctionDefinition","parameters":{"id":311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":310,"mutability":"mutable","name":"value","nameLocation":"1750:5:3","nodeType":"VariableDeclaration","scope":333,"src":"1743:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":309,"name":"int256","nodeType":"ElementaryTypeName","src":"1743:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1742:14:3"},"returnParameters":{"id":314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":313,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":333,"src":"1780:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":312,"name":"string","nodeType":"ElementaryTypeName","src":"1780:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1779:15:3"},"scope":1429,"src":"1719:168:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":352,"nodeType":"Block","src":"2066:100:3","statements":[{"id":351,"nodeType":"UncheckedBlock","src":"2076:84:3","statements":[{"expression":{"arguments":[{"id":342,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":336,"src":"2119:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":345,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":336,"src":"2138:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":343,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3035,"src":"2126:4:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3035_$","typeString":"type(library Math)"}},"id":344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2131:6:3","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2978,"src":"2126:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2126:18:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2147:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2126:22:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":341,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[353,436,456],"referencedDeclaration":436,"src":"2107:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2107:42:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":340,"id":350,"nodeType":"Return","src":"2100:49:3"}]}]},"documentation":{"id":334,"nodeType":"StructuredDocumentation","src":"1893:94:3","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":353,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2001:11:3","nodeType":"FunctionDefinition","parameters":{"id":337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":336,"mutability":"mutable","name":"value","nameLocation":"2021:5:3","nodeType":"VariableDeclaration","scope":353,"src":"2013:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":335,"name":"uint256","nodeType":"ElementaryTypeName","src":"2013:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2012:15:3"},"returnParameters":{"id":340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":339,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":353,"src":"2051:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":338,"name":"string","nodeType":"ElementaryTypeName","src":"2051:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2050:15:3"},"scope":1429,"src":"1992:174:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":435,"nodeType":"Block","src":"2379:435:3","statements":[{"assignments":[364],"declarations":[{"constant":false,"id":364,"mutability":"mutable","name":"localValue","nameLocation":"2397:10:3","nodeType":"VariableDeclaration","scope":435,"src":"2389:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":363,"name":"uint256","nodeType":"ElementaryTypeName","src":"2389:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":366,"initialValue":{"id":365,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"2410:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2389:26:3"},{"assignments":[368],"declarations":[{"constant":false,"id":368,"mutability":"mutable","name":"buffer","nameLocation":"2438:6:3","nodeType":"VariableDeclaration","scope":435,"src":"2425:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":367,"name":"bytes","nodeType":"ElementaryTypeName","src":"2425:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":377,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2457:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":372,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":358,"src":"2461:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2457:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2470:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2457:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":370,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2447:9:3","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":369,"name":"bytes","nodeType":"ElementaryTypeName","src":"2451:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":376,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2447:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2425:47:3"},{"expression":{"id":382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":378,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":368,"src":"2482:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":380,"indexExpression":{"hexValue":"30","id":379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2489:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2482:9:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2494:3:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2482:15:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":383,"nodeType":"ExpressionStatement","src":"2482:15:3"},{"expression":{"id":388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":384,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":368,"src":"2507:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":386,"indexExpression":{"hexValue":"31","id":385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2514:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2507:9:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2519:3:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2507:15:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":389,"nodeType":"ExpressionStatement","src":"2507:15:3"},{"body":{"id":418,"nodeType":"Block","src":"2577:95:3","statements":[{"expression":{"id":412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":404,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":368,"src":"2591:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":406,"indexExpression":{"id":405,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":391,"src":"2598:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2591:9:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":407,"name":"HEX_DIGITS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":243,"src":"2603:10:3","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":411,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":408,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"2614:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2627:3:3","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2614:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2603:28:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2591:40:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":413,"nodeType":"ExpressionStatement","src":"2591:40:3"},{"expression":{"id":416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":414,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"2645:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2660:1:3","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2645:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":417,"nodeType":"ExpressionStatement","src":"2645:16:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":398,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":391,"src":"2565:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2569:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2565:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":419,"initializationExpression":{"assignments":[391],"declarations":[{"constant":false,"id":391,"mutability":"mutable","name":"i","nameLocation":"2545:1:3","nodeType":"VariableDeclaration","scope":419,"src":"2537:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":390,"name":"uint256","nodeType":"ElementaryTypeName","src":"2537:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":397,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2549:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":393,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":358,"src":"2553:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2549:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2562:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2549:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2537:26:3"},"isSimpleCounterLoop":false,"loopExpression":{"expression":{"id":402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2572:3:3","subExpression":{"id":401,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":391,"src":"2574:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":403,"nodeType":"ExpressionStatement","src":"2572:3:3"},"nodeType":"ForStatement","src":"2532:140:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":420,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"2685:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2699:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2685:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":429,"nodeType":"IfStatement","src":"2681:96:3","trueBody":{"id":428,"nodeType":"Block","src":"2702:75:3","statements":[{"errorCall":{"arguments":[{"id":424,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"2752:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":425,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":358,"src":"2759:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":423,"name":"StringsInsufficientHexLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":253,"src":"2723:28:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (uint256,uint256) pure returns (error)"}},"id":426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2723:43:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":427,"nodeType":"RevertStatement","src":"2716:50:3"}]}},{"expression":{"arguments":[{"id":432,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":368,"src":"2800:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":431,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2793:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":430,"name":"string","nodeType":"ElementaryTypeName","src":"2793:6:3","typeDescriptions":{}}},"id":433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2793:14:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":362,"id":434,"nodeType":"Return","src":"2786:21:3"}]},"documentation":{"id":354,"nodeType":"StructuredDocumentation","src":"2172:112:3","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":436,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2298:11:3","nodeType":"FunctionDefinition","parameters":{"id":359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":356,"mutability":"mutable","name":"value","nameLocation":"2318:5:3","nodeType":"VariableDeclaration","scope":436,"src":"2310:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":355,"name":"uint256","nodeType":"ElementaryTypeName","src":"2310:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":358,"mutability":"mutable","name":"length","nameLocation":"2333:6:3","nodeType":"VariableDeclaration","scope":436,"src":"2325:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":357,"name":"uint256","nodeType":"ElementaryTypeName","src":"2325:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2309:31:3"},"returnParameters":{"id":362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":361,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":436,"src":"2364:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":360,"name":"string","nodeType":"ElementaryTypeName","src":"2364:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2363:15:3"},"scope":1429,"src":"2289:525:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":455,"nodeType":"Block","src":"3046:75:3","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":449,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"3091:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":448,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3083:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":447,"name":"uint160","nodeType":"ElementaryTypeName","src":"3083:7:3","typeDescriptions":{}}},"id":450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3083:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":446,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3075:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":445,"name":"uint256","nodeType":"ElementaryTypeName","src":"3075:7:3","typeDescriptions":{}}},"id":451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3075:22:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":452,"name":"ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"3099:14:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":444,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[353,436,456],"referencedDeclaration":436,"src":"3063:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3063:51:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":443,"id":454,"nodeType":"Return","src":"3056:58:3"}]},"documentation":{"id":437,"nodeType":"StructuredDocumentation","src":"2820:148:3","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n representation."},"id":456,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2982:11:3","nodeType":"FunctionDefinition","parameters":{"id":440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":439,"mutability":"mutable","name":"addr","nameLocation":"3002:4:3","nodeType":"VariableDeclaration","scope":456,"src":"2994:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":438,"name":"address","nodeType":"ElementaryTypeName","src":"2994:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2993:14:3"},"returnParameters":{"id":443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":442,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":456,"src":"3031:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":441,"name":"string","nodeType":"ElementaryTypeName","src":"3031:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3030:15:3"},"scope":1429,"src":"2973:148:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":520,"nodeType":"Block","src":"3378:642:3","statements":[{"assignments":[465],"declarations":[{"constant":false,"id":465,"mutability":"mutable","name":"buffer","nameLocation":"3401:6:3","nodeType":"VariableDeclaration","scope":520,"src":"3388:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":464,"name":"bytes","nodeType":"ElementaryTypeName","src":"3388:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":472,"initialValue":{"arguments":[{"arguments":[{"id":469,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":459,"src":"3428:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":468,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[353,436,456],"referencedDeclaration":456,"src":"3416:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":470,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3416:17:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":467,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3410:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":466,"name":"bytes","nodeType":"ElementaryTypeName","src":"3410:5:3","typeDescriptions":{}}},"id":471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3410:24:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3388:46:3"},{"assignments":[474],"declarations":[{"constant":false,"id":474,"mutability":"mutable","name":"hashValue","nameLocation":"3527:9:3","nodeType":"VariableDeclaration","scope":520,"src":"3519:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":473,"name":"uint256","nodeType":"ElementaryTypeName","src":"3519:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":475,"nodeType":"VariableDeclarationStatement","src":"3519:17:3"},{"AST":{"nativeSrc":"3571:78:3","nodeType":"YulBlock","src":"3571:78:3","statements":[{"nativeSrc":"3585:54:3","nodeType":"YulAssignment","src":"3585:54:3","value":{"arguments":[{"kind":"number","nativeSrc":"3602:2:3","nodeType":"YulLiteral","src":"3602:2:3","type":"","value":"96"},{"arguments":[{"arguments":[{"name":"buffer","nativeSrc":"3620:6:3","nodeType":"YulIdentifier","src":"3620:6:3"},{"kind":"number","nativeSrc":"3628:4:3","nodeType":"YulLiteral","src":"3628:4:3","type":"","value":"0x22"}],"functionName":{"name":"add","nativeSrc":"3616:3:3","nodeType":"YulIdentifier","src":"3616:3:3"},"nativeSrc":"3616:17:3","nodeType":"YulFunctionCall","src":"3616:17:3"},{"kind":"number","nativeSrc":"3635:2:3","nodeType":"YulLiteral","src":"3635:2:3","type":"","value":"40"}],"functionName":{"name":"keccak256","nativeSrc":"3606:9:3","nodeType":"YulIdentifier","src":"3606:9:3"},"nativeSrc":"3606:32:3","nodeType":"YulFunctionCall","src":"3606:32:3"}],"functionName":{"name":"shr","nativeSrc":"3598:3:3","nodeType":"YulIdentifier","src":"3598:3:3"},"nativeSrc":"3598:41:3","nodeType":"YulFunctionCall","src":"3598:41:3"},"variableNames":[{"name":"hashValue","nativeSrc":"3585:9:3","nodeType":"YulIdentifier","src":"3585:9:3"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":465,"isOffset":false,"isSlot":false,"src":"3620:6:3","valueSize":1},{"declaration":474,"isOffset":false,"isSlot":false,"src":"3585:9:3","valueSize":1}],"flags":["memory-safe"],"id":476,"nodeType":"InlineAssembly","src":"3546:103:3"},{"body":{"id":513,"nodeType":"Block","src":"3692:291:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":487,"name":"hashValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":474,"src":"3798:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3810:3:3","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"3798:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"37","id":490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3816:1:3","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"src":"3798:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"baseExpression":{"id":494,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":465,"src":"3827:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":496,"indexExpression":{"id":495,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"3834:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3827:9:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":493,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3821:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":492,"name":"uint8","nodeType":"ElementaryTypeName","src":"3821:5:3","typeDescriptions":{}}},"id":497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3821:16:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3936","id":498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3840:2:3","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"96"},"src":"3821:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3798:44:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":508,"nodeType":"IfStatement","src":"3794:150:3","trueBody":{"id":507,"nodeType":"Block","src":"3844:100:3","statements":[{"expression":{"id":505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":501,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":465,"src":"3912:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":503,"indexExpression":{"id":502,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"3919:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3912:9:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"^=","rightHandSide":{"hexValue":"30783230","id":504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3925:4:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"0x20"},"src":"3912:17:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":506,"nodeType":"ExpressionStatement","src":"3912:17:3"}]}},{"expression":{"id":511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":509,"name":"hashValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":474,"src":"3957:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3971:1:3","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"3957:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":512,"nodeType":"ExpressionStatement","src":"3957:15:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":481,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"3680:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3684:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3680:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":514,"initializationExpression":{"assignments":[478],"declarations":[{"constant":false,"id":478,"mutability":"mutable","name":"i","nameLocation":"3672:1:3","nodeType":"VariableDeclaration","scope":514,"src":"3664:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":477,"name":"uint256","nodeType":"ElementaryTypeName","src":"3664:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":480,"initialValue":{"hexValue":"3431","id":479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3676:2:3","typeDescriptions":{"typeIdentifier":"t_rational_41_by_1","typeString":"int_const 41"},"value":"41"},"nodeType":"VariableDeclarationStatement","src":"3664:14:3"},"isSimpleCounterLoop":false,"loopExpression":{"expression":{"id":485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"3687:3:3","subExpression":{"id":484,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"3689:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":486,"nodeType":"ExpressionStatement","src":"3687:3:3"},"nodeType":"ForStatement","src":"3659:324:3"},{"expression":{"arguments":[{"id":517,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":465,"src":"4006:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":516,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3999:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":515,"name":"string","nodeType":"ElementaryTypeName","src":"3999:6:3","typeDescriptions":{}}},"id":518,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3999:14:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":463,"id":519,"nodeType":"Return","src":"3992:21:3"}]},"documentation":{"id":457,"nodeType":"StructuredDocumentation","src":"3127:165:3","text":" @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\n representation, according to EIP-55."},"id":521,"implemented":true,"kind":"function","modifiers":[],"name":"toChecksumHexString","nameLocation":"3306:19:3","nodeType":"FunctionDefinition","parameters":{"id":460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":459,"mutability":"mutable","name":"addr","nameLocation":"3334:4:3","nodeType":"VariableDeclaration","scope":521,"src":"3326:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":458,"name":"address","nodeType":"ElementaryTypeName","src":"3326:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3325:14:3"},"returnParameters":{"id":463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":462,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":521,"src":"3363:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":461,"name":"string","nodeType":"ElementaryTypeName","src":"3363:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3362:15:3"},"scope":1429,"src":"3297:723:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":557,"nodeType":"Block","src":"4175:104:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":533,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":524,"src":"4198:1:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":532,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4192:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":531,"name":"bytes","nodeType":"ElementaryTypeName","src":"4192:5:3","typeDescriptions":{}}},"id":534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4192:8:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4201:6:3","memberName":"length","nodeType":"MemberAccess","src":"4192:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":538,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":526,"src":"4217:1:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":537,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4211:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":536,"name":"bytes","nodeType":"ElementaryTypeName","src":"4211:5:3","typeDescriptions":{}}},"id":539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4211:8:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4220:6:3","memberName":"length","nodeType":"MemberAccess","src":"4211:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4192:34:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":545,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":524,"src":"4246:1:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":544,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4240:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":543,"name":"bytes","nodeType":"ElementaryTypeName","src":"4240:5:3","typeDescriptions":{}}},"id":546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4240:8:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":542,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4230:9:3","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4230:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":551,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":526,"src":"4269:1:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":550,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4263:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":549,"name":"bytes","nodeType":"ElementaryTypeName","src":"4263:5:3","typeDescriptions":{}}},"id":552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4263:8:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":548,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4253:9:3","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4253:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4230:42:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4192:80:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":530,"id":556,"nodeType":"Return","src":"4185:87:3"}]},"documentation":{"id":522,"nodeType":"StructuredDocumentation","src":"4026:66:3","text":" @dev Returns true if the two strings are equal."},"id":558,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"4106:5:3","nodeType":"FunctionDefinition","parameters":{"id":527,"nodeType":"ParameterList","parameters":[{"constant":false,"id":524,"mutability":"mutable","name":"a","nameLocation":"4126:1:3","nodeType":"VariableDeclaration","scope":558,"src":"4112:15:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":523,"name":"string","nodeType":"ElementaryTypeName","src":"4112:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":526,"mutability":"mutable","name":"b","nameLocation":"4143:1:3","nodeType":"VariableDeclaration","scope":558,"src":"4129:15:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":525,"name":"string","nodeType":"ElementaryTypeName","src":"4129:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4111:34:3"},"returnParameters":{"id":530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":529,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":558,"src":"4169:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":528,"name":"bool","nodeType":"ElementaryTypeName","src":"4169:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4168:6:3"},"scope":1429,"src":"4097:182:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":576,"nodeType":"Block","src":"4576:64:3","statements":[{"expression":{"arguments":[{"id":567,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"4603:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4610:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":571,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"4619:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":570,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4613:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":569,"name":"bytes","nodeType":"ElementaryTypeName","src":"4613:5:3","typeDescriptions":{}}},"id":572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4613:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4626:6:3","memberName":"length","nodeType":"MemberAccess","src":"4613:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":566,"name":"parseUint","nodeType":"Identifier","overloadedDeclarations":[577,608],"referencedDeclaration":608,"src":"4593:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (uint256)"}},"id":574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4593:40:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":565,"id":575,"nodeType":"Return","src":"4586:47:3"}]},"documentation":{"id":559,"nodeType":"StructuredDocumentation","src":"4285:214:3","text":" @dev Parse a decimal string and returns the value as a `uint256`.\n Requirements:\n - The string must be formatted as `[0-9]*`\n - The result must fit into an `uint256` type"},"id":577,"implemented":true,"kind":"function","modifiers":[],"name":"parseUint","nameLocation":"4513:9:3","nodeType":"FunctionDefinition","parameters":{"id":562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":561,"mutability":"mutable","name":"input","nameLocation":"4537:5:3","nodeType":"VariableDeclaration","scope":577,"src":"4523:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":560,"name":"string","nodeType":"ElementaryTypeName","src":"4523:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4522:21:3"},"returnParameters":{"id":565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":564,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":577,"src":"4567:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":563,"name":"uint256","nodeType":"ElementaryTypeName","src":"4567:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4566:9:3"},"scope":1429,"src":"4504:136:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":607,"nodeType":"Block","src":"5038:153:3","statements":[{"assignments":[590,592],"declarations":[{"constant":false,"id":590,"mutability":"mutable","name":"success","nameLocation":"5054:7:3","nodeType":"VariableDeclaration","scope":607,"src":"5049:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":589,"name":"bool","nodeType":"ElementaryTypeName","src":"5049:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":592,"mutability":"mutable","name":"value","nameLocation":"5071:5:3","nodeType":"VariableDeclaration","scope":607,"src":"5063:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":591,"name":"uint256","nodeType":"ElementaryTypeName","src":"5063:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":598,"initialValue":{"arguments":[{"id":594,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"5093:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":595,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":582,"src":"5100:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":596,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":584,"src":"5107:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":593,"name":"tryParseUint","nodeType":"Identifier","overloadedDeclarations":[629,666],"referencedDeclaration":666,"src":"5080:12:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5080:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"5048:63:3"},{"condition":{"id":600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5125:8:3","subExpression":{"id":599,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":590,"src":"5126:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":604,"nodeType":"IfStatement","src":"5121:41:3","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":601,"name":"StringsInvalidChar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"5142:18:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5142:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":603,"nodeType":"RevertStatement","src":"5135:27:3"}},{"expression":{"id":605,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"5179:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":588,"id":606,"nodeType":"Return","src":"5172:12:3"}]},"documentation":{"id":578,"nodeType":"StructuredDocumentation","src":"4646:287:3","text":" @dev Variant of {parseUint} that parses a substring of `input` located between position `begin` (included) and\n `end` (excluded).\n Requirements:\n - The substring must be formatted as `[0-9]*`\n - The result must fit into an `uint256` type"},"id":608,"implemented":true,"kind":"function","modifiers":[],"name":"parseUint","nameLocation":"4947:9:3","nodeType":"FunctionDefinition","parameters":{"id":585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":580,"mutability":"mutable","name":"input","nameLocation":"4971:5:3","nodeType":"VariableDeclaration","scope":608,"src":"4957:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":579,"name":"string","nodeType":"ElementaryTypeName","src":"4957:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":582,"mutability":"mutable","name":"begin","nameLocation":"4986:5:3","nodeType":"VariableDeclaration","scope":608,"src":"4978:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":581,"name":"uint256","nodeType":"ElementaryTypeName","src":"4978:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":584,"mutability":"mutable","name":"end","nameLocation":"5001:3:3","nodeType":"VariableDeclaration","scope":608,"src":"4993:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":583,"name":"uint256","nodeType":"ElementaryTypeName","src":"4993:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4956:49:3"},"returnParameters":{"id":588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":587,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":608,"src":"5029:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":586,"name":"uint256","nodeType":"ElementaryTypeName","src":"5029:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5028:9:3"},"scope":1429,"src":"4938:253:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":628,"nodeType":"Block","src":"5512:83:3","statements":[{"expression":{"arguments":[{"id":619,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":611,"src":"5558:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5565:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":623,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":611,"src":"5574:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":622,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5568:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":621,"name":"bytes","nodeType":"ElementaryTypeName","src":"5568:5:3","typeDescriptions":{}}},"id":624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5568:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5581:6:3","memberName":"length","nodeType":"MemberAccess","src":"5568:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":618,"name":"_tryParseUintUncheckedBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"5529:28:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5529:59:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":617,"id":627,"nodeType":"Return","src":"5522:66:3"}]},"documentation":{"id":609,"nodeType":"StructuredDocumentation","src":"5197:215:3","text":" @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\n NOTE: This function will revert if the result does not fit in a `uint256`."},"id":629,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseUint","nameLocation":"5426:12:3","nodeType":"FunctionDefinition","parameters":{"id":612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":611,"mutability":"mutable","name":"input","nameLocation":"5453:5:3","nodeType":"VariableDeclaration","scope":629,"src":"5439:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":610,"name":"string","nodeType":"ElementaryTypeName","src":"5439:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5438:21:3"},"returnParameters":{"id":617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":614,"mutability":"mutable","name":"success","nameLocation":"5488:7:3","nodeType":"VariableDeclaration","scope":629,"src":"5483:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":613,"name":"bool","nodeType":"ElementaryTypeName","src":"5483:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":616,"mutability":"mutable","name":"value","nameLocation":"5505:5:3","nodeType":"VariableDeclaration","scope":629,"src":"5497:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":615,"name":"uint256","nodeType":"ElementaryTypeName","src":"5497:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5482:29:3"},"scope":1429,"src":"5417:178:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":665,"nodeType":"Block","src":"5997:144:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":643,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"6011:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":646,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":632,"src":"6023:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":645,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6017:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":644,"name":"bytes","nodeType":"ElementaryTypeName","src":"6017:5:3","typeDescriptions":{}}},"id":647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6017:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6030:6:3","memberName":"length","nodeType":"MemberAccess","src":"6017:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6011:25:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":650,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":634,"src":"6040:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":651,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"6048:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6040:11:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6011:40:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":658,"nodeType":"IfStatement","src":"6007:63:3","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6061:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6068:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":656,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6060:10:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":642,"id":657,"nodeType":"Return","src":"6053:17:3"}},{"expression":{"arguments":[{"id":660,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":632,"src":"6116:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":661,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":634,"src":"6123:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":662,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"6130:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":659,"name":"_tryParseUintUncheckedBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"6087:28:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":663,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6087:47:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":642,"id":664,"nodeType":"Return","src":"6080:54:3"}]},"documentation":{"id":630,"nodeType":"StructuredDocumentation","src":"5601:238:3","text":" @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\n character.\n NOTE: This function will revert if the result does not fit in a `uint256`."},"id":666,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseUint","nameLocation":"5853:12:3","nodeType":"FunctionDefinition","parameters":{"id":637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":632,"mutability":"mutable","name":"input","nameLocation":"5889:5:3","nodeType":"VariableDeclaration","scope":666,"src":"5875:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":631,"name":"string","nodeType":"ElementaryTypeName","src":"5875:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":634,"mutability":"mutable","name":"begin","nameLocation":"5912:5:3","nodeType":"VariableDeclaration","scope":666,"src":"5904:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":633,"name":"uint256","nodeType":"ElementaryTypeName","src":"5904:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":636,"mutability":"mutable","name":"end","nameLocation":"5935:3:3","nodeType":"VariableDeclaration","scope":666,"src":"5927:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":635,"name":"uint256","nodeType":"ElementaryTypeName","src":"5927:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5865:79:3"},"returnParameters":{"id":642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":639,"mutability":"mutable","name":"success","nameLocation":"5973:7:3","nodeType":"VariableDeclaration","scope":666,"src":"5968:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":638,"name":"bool","nodeType":"ElementaryTypeName","src":"5968:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":641,"mutability":"mutable","name":"value","nameLocation":"5990:5:3","nodeType":"VariableDeclaration","scope":666,"src":"5982:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":640,"name":"uint256","nodeType":"ElementaryTypeName","src":"5982:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5967:29:3"},"scope":1429,"src":"5844:297:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":735,"nodeType":"Block","src":"6521:347:3","statements":[{"assignments":[681],"declarations":[{"constant":false,"id":681,"mutability":"mutable","name":"buffer","nameLocation":"6544:6:3","nodeType":"VariableDeclaration","scope":735,"src":"6531:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":680,"name":"bytes","nodeType":"ElementaryTypeName","src":"6531:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":686,"initialValue":{"arguments":[{"id":684,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":669,"src":"6559:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":683,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6553:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":682,"name":"bytes","nodeType":"ElementaryTypeName","src":"6553:5:3","typeDescriptions":{}}},"id":685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6553:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"6531:34:3"},{"assignments":[688],"declarations":[{"constant":false,"id":688,"mutability":"mutable","name":"result","nameLocation":"6584:6:3","nodeType":"VariableDeclaration","scope":735,"src":"6576:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":687,"name":"uint256","nodeType":"ElementaryTypeName","src":"6576:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":690,"initialValue":{"hexValue":"30","id":689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6593:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6576:18:3"},{"body":{"id":729,"nodeType":"Block","src":"6642:189:3","statements":[{"assignments":[702],"declarations":[{"constant":false,"id":702,"mutability":"mutable","name":"chr","nameLocation":"6662:3:3","nodeType":"VariableDeclaration","scope":729,"src":"6656:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":701,"name":"uint8","nodeType":"ElementaryTypeName","src":"6656:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":712,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"id":707,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":681,"src":"6711:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":708,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"6719:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":706,"name":"_unsafeReadBytesOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1428,"src":"6688:22:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6688:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":705,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6681:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":704,"name":"bytes1","nodeType":"ElementaryTypeName","src":"6681:6:3","typeDescriptions":{}}},"id":710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6681:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":703,"name":"_tryParseChr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1416,"src":"6668:12:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes1_$returns$_t_uint8_$","typeString":"function (bytes1) pure returns (uint8)"}},"id":711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6668:55:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"6656:67:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":713,"name":"chr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":702,"src":"6741:3:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"39","id":714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6747:1:3","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"9"},"src":"6741:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":720,"nodeType":"IfStatement","src":"6737:30:3","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6758:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6765:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":718,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6757:10:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":679,"id":719,"nodeType":"Return","src":"6750:17:3"}},{"expression":{"id":723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":721,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"6781:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"hexValue":"3130","id":722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6791:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"6781:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":724,"nodeType":"ExpressionStatement","src":"6781:12:3"},{"expression":{"id":727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":725,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"6807:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":726,"name":"chr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":702,"src":"6817:3:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6807:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":728,"nodeType":"ExpressionStatement","src":"6807:13:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":695,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"6628:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":696,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":673,"src":"6632:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6628:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":730,"initializationExpression":{"assignments":[692],"declarations":[{"constant":false,"id":692,"mutability":"mutable","name":"i","nameLocation":"6617:1:3","nodeType":"VariableDeclaration","scope":730,"src":"6609:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":691,"name":"uint256","nodeType":"ElementaryTypeName","src":"6609:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":694,"initialValue":{"id":693,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":671,"src":"6621:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6609:17:3"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"6637:3:3","subExpression":{"id":698,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"6639:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":700,"nodeType":"ExpressionStatement","src":"6637:3:3"},"nodeType":"ForStatement","src":"6604:227:3"},{"expression":{"components":[{"hexValue":"74727565","id":731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6848:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":732,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"6854:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":733,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6847:14:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":679,"id":734,"nodeType":"Return","src":"6840:21:3"}]},"documentation":{"id":667,"nodeType":"StructuredDocumentation","src":"6147:201:3","text":" @dev Implementation of {tryParseUint} that does not check bounds. Caller should make sure that\n `begin <= end <= input.length`. Other inputs would result in undefined behavior."},"id":736,"implemented":true,"kind":"function","modifiers":[],"name":"_tryParseUintUncheckedBounds","nameLocation":"6362:28:3","nodeType":"FunctionDefinition","parameters":{"id":674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":669,"mutability":"mutable","name":"input","nameLocation":"6414:5:3","nodeType":"VariableDeclaration","scope":736,"src":"6400:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":668,"name":"string","nodeType":"ElementaryTypeName","src":"6400:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":671,"mutability":"mutable","name":"begin","nameLocation":"6437:5:3","nodeType":"VariableDeclaration","scope":736,"src":"6429:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":670,"name":"uint256","nodeType":"ElementaryTypeName","src":"6429:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":673,"mutability":"mutable","name":"end","nameLocation":"6460:3:3","nodeType":"VariableDeclaration","scope":736,"src":"6452:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":672,"name":"uint256","nodeType":"ElementaryTypeName","src":"6452:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6390:79:3"},"returnParameters":{"id":679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":676,"mutability":"mutable","name":"success","nameLocation":"6497:7:3","nodeType":"VariableDeclaration","scope":736,"src":"6492:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":675,"name":"bool","nodeType":"ElementaryTypeName","src":"6492:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":678,"mutability":"mutable","name":"value","nameLocation":"6514:5:3","nodeType":"VariableDeclaration","scope":736,"src":"6506:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":677,"name":"uint256","nodeType":"ElementaryTypeName","src":"6506:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6491:29:3"},"scope":1429,"src":"6353:515:3","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":754,"nodeType":"Block","src":"7165:63:3","statements":[{"expression":{"arguments":[{"id":745,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":739,"src":"7191:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7198:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":749,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":739,"src":"7207:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":748,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7201:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":747,"name":"bytes","nodeType":"ElementaryTypeName","src":"7201:5:3","typeDescriptions":{}}},"id":750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7201:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7214:6:3","memberName":"length","nodeType":"MemberAccess","src":"7201:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":744,"name":"parseInt","nodeType":"Identifier","overloadedDeclarations":[755,786],"referencedDeclaration":786,"src":"7182:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_int256_$","typeString":"function (string memory,uint256,uint256) pure returns (int256)"}},"id":752,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7182:39:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":743,"id":753,"nodeType":"Return","src":"7175:46:3"}]},"documentation":{"id":737,"nodeType":"StructuredDocumentation","src":"6874:216:3","text":" @dev Parse a decimal string and returns the value as a `int256`.\n Requirements:\n - The string must be formatted as `[-+]?[0-9]*`\n - The result must fit in an `int256` type."},"id":755,"implemented":true,"kind":"function","modifiers":[],"name":"parseInt","nameLocation":"7104:8:3","nodeType":"FunctionDefinition","parameters":{"id":740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":739,"mutability":"mutable","name":"input","nameLocation":"7127:5:3","nodeType":"VariableDeclaration","scope":755,"src":"7113:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":738,"name":"string","nodeType":"ElementaryTypeName","src":"7113:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7112:21:3"},"returnParameters":{"id":743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":742,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":755,"src":"7157:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":741,"name":"int256","nodeType":"ElementaryTypeName","src":"7157:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"7156:8:3"},"scope":1429,"src":"7095:133:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":785,"nodeType":"Block","src":"7633:151:3","statements":[{"assignments":[768,770],"declarations":[{"constant":false,"id":768,"mutability":"mutable","name":"success","nameLocation":"7649:7:3","nodeType":"VariableDeclaration","scope":785,"src":"7644:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":767,"name":"bool","nodeType":"ElementaryTypeName","src":"7644:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":770,"mutability":"mutable","name":"value","nameLocation":"7665:5:3","nodeType":"VariableDeclaration","scope":785,"src":"7658:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":769,"name":"int256","nodeType":"ElementaryTypeName","src":"7658:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":776,"initialValue":{"arguments":[{"id":772,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":758,"src":"7686:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":773,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"7693:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":774,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":762,"src":"7700:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":771,"name":"tryParseInt","nodeType":"Identifier","overloadedDeclarations":[807,849],"referencedDeclaration":849,"src":"7674:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_int256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,int256)"}},"id":775,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7674:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_int256_$","typeString":"tuple(bool,int256)"}},"nodeType":"VariableDeclarationStatement","src":"7643:61:3"},{"condition":{"id":778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7718:8:3","subExpression":{"id":777,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":768,"src":"7719:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":782,"nodeType":"IfStatement","src":"7714:41:3","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":779,"name":"StringsInvalidChar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"7735:18:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7735:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":781,"nodeType":"RevertStatement","src":"7728:27:3"}},{"expression":{"id":783,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"7772:5:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":766,"id":784,"nodeType":"Return","src":"7765:12:3"}]},"documentation":{"id":756,"nodeType":"StructuredDocumentation","src":"7234:296:3","text":" @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\n `end` (excluded).\n Requirements:\n - The substring must be formatted as `[-+]?[0-9]*`\n - The result must fit in an `int256` type."},"id":786,"implemented":true,"kind":"function","modifiers":[],"name":"parseInt","nameLocation":"7544:8:3","nodeType":"FunctionDefinition","parameters":{"id":763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":758,"mutability":"mutable","name":"input","nameLocation":"7567:5:3","nodeType":"VariableDeclaration","scope":786,"src":"7553:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":757,"name":"string","nodeType":"ElementaryTypeName","src":"7553:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":760,"mutability":"mutable","name":"begin","nameLocation":"7582:5:3","nodeType":"VariableDeclaration","scope":786,"src":"7574:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":759,"name":"uint256","nodeType":"ElementaryTypeName","src":"7574:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":762,"mutability":"mutable","name":"end","nameLocation":"7597:3:3","nodeType":"VariableDeclaration","scope":786,"src":"7589:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":761,"name":"uint256","nodeType":"ElementaryTypeName","src":"7589:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7552:49:3"},"returnParameters":{"id":766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":765,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":786,"src":"7625:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":764,"name":"int256","nodeType":"ElementaryTypeName","src":"7625:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"7624:8:3"},"scope":1429,"src":"7535:249:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":806,"nodeType":"Block","src":"8175:82:3","statements":[{"expression":{"arguments":[{"id":797,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":789,"src":"8220:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8227:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":801,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":789,"src":"8236:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":800,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8230:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":799,"name":"bytes","nodeType":"ElementaryTypeName","src":"8230:5:3","typeDescriptions":{}}},"id":802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8230:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8243:6:3","memberName":"length","nodeType":"MemberAccess","src":"8230:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":796,"name":"_tryParseIntUncheckedBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"8192:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_int256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,int256)"}},"id":804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8192:58:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_int256_$","typeString":"tuple(bool,int256)"}},"functionReturnParameters":795,"id":805,"nodeType":"Return","src":"8185:65:3"}]},"documentation":{"id":787,"nodeType":"StructuredDocumentation","src":"7790:287:3","text":" @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\n the result does not fit in a `int256`.\n NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`."},"id":807,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseInt","nameLocation":"8091:11:3","nodeType":"FunctionDefinition","parameters":{"id":790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":789,"mutability":"mutable","name":"input","nameLocation":"8117:5:3","nodeType":"VariableDeclaration","scope":807,"src":"8103:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":788,"name":"string","nodeType":"ElementaryTypeName","src":"8103:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8102:21:3"},"returnParameters":{"id":795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":792,"mutability":"mutable","name":"success","nameLocation":"8152:7:3","nodeType":"VariableDeclaration","scope":807,"src":"8147:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":791,"name":"bool","nodeType":"ElementaryTypeName","src":"8147:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":794,"mutability":"mutable","name":"value","nameLocation":"8168:5:3","nodeType":"VariableDeclaration","scope":807,"src":"8161:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":793,"name":"int256","nodeType":"ElementaryTypeName","src":"8161:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"8146:28:3"},"scope":1429,"src":"8082:175:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"constant":true,"id":812,"mutability":"constant","name":"ABS_MIN_INT256","nameLocation":"8288:14:3","nodeType":"VariableDeclaration","scope":1429,"src":"8263:50:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":808,"name":"uint256","nodeType":"ElementaryTypeName","src":"8263:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819968_by_1","typeString":"int_const 5789...(69 digits omitted)...9968"},"id":811,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8305:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"323535","id":810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8310:3:3","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"8305:8:3","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819968_by_1","typeString":"int_const 5789...(69 digits omitted)...9968"}},"visibility":"private"},{"body":{"id":848,"nodeType":"Block","src":"8779:143:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":826,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"8793:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":829,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":815,"src":"8805:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":828,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8799:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":827,"name":"bytes","nodeType":"ElementaryTypeName","src":"8799:5:3","typeDescriptions":{}}},"id":830,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8799:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8812:6:3","memberName":"length","nodeType":"MemberAccess","src":"8799:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8793:25:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":833,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":817,"src":"8822:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":834,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"8830:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8822:11:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8793:40:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":841,"nodeType":"IfStatement","src":"8789:63:3","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8843:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8850:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":839,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"8842:10:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":825,"id":840,"nodeType":"Return","src":"8835:17:3"}},{"expression":{"arguments":[{"id":843,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":815,"src":"8897:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":844,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":817,"src":"8904:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":845,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"8911:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":842,"name":"_tryParseIntUncheckedBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"8869:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_int256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,int256)"}},"id":846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8869:46:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_int256_$","typeString":"tuple(bool,int256)"}},"functionReturnParameters":825,"id":847,"nodeType":"Return","src":"8862:53:3"}]},"documentation":{"id":813,"nodeType":"StructuredDocumentation","src":"8320:303:3","text":" @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\n character or if the result does not fit in a `int256`.\n NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`."},"id":849,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseInt","nameLocation":"8637:11:3","nodeType":"FunctionDefinition","parameters":{"id":820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":815,"mutability":"mutable","name":"input","nameLocation":"8672:5:3","nodeType":"VariableDeclaration","scope":849,"src":"8658:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":814,"name":"string","nodeType":"ElementaryTypeName","src":"8658:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":817,"mutability":"mutable","name":"begin","nameLocation":"8695:5:3","nodeType":"VariableDeclaration","scope":849,"src":"8687:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":816,"name":"uint256","nodeType":"ElementaryTypeName","src":"8687:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":819,"mutability":"mutable","name":"end","nameLocation":"8718:3:3","nodeType":"VariableDeclaration","scope":849,"src":"8710:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":818,"name":"uint256","nodeType":"ElementaryTypeName","src":"8710:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8648:79:3"},"returnParameters":{"id":825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":822,"mutability":"mutable","name":"success","nameLocation":"8756:7:3","nodeType":"VariableDeclaration","scope":849,"src":"8751:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":821,"name":"bool","nodeType":"ElementaryTypeName","src":"8751:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":824,"mutability":"mutable","name":"value","nameLocation":"8772:5:3","nodeType":"VariableDeclaration","scope":849,"src":"8765:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":823,"name":"int256","nodeType":"ElementaryTypeName","src":"8765:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"8750:28:3"},"scope":1429,"src":"8628:294:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":969,"nodeType":"Block","src":"9299:812:3","statements":[{"assignments":[864],"declarations":[{"constant":false,"id":864,"mutability":"mutable","name":"buffer","nameLocation":"9322:6:3","nodeType":"VariableDeclaration","scope":969,"src":"9309:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":863,"name":"bytes","nodeType":"ElementaryTypeName","src":"9309:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":869,"initialValue":{"arguments":[{"id":867,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"9337:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":866,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9331:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":865,"name":"bytes","nodeType":"ElementaryTypeName","src":"9331:5:3","typeDescriptions":{}}},"id":868,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9331:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"9309:34:3"},{"assignments":[871],"declarations":[{"constant":false,"id":871,"mutability":"mutable","name":"sign","nameLocation":"9407:4:3","nodeType":"VariableDeclaration","scope":969,"src":"9400:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":870,"name":"bytes1","nodeType":"ElementaryTypeName","src":"9400:6:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"}],"id":887,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":872,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":854,"src":"9414:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":873,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":856,"src":"9423:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9414:12:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"arguments":[{"id":882,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":864,"src":"9471:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":883,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":854,"src":"9479:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":881,"name":"_unsafeReadBytesOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1428,"src":"9448:22:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":884,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9448:37:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":880,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9441:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":879,"name":"bytes1","nodeType":"ElementaryTypeName","src":"9441:6:3","typeDescriptions":{}}},"id":885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9441:45:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9414:72:3","trueExpression":{"arguments":[{"hexValue":"30","id":877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9436:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":876,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9429:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":875,"name":"bytes1","nodeType":"ElementaryTypeName","src":"9429:6:3","typeDescriptions":{}}},"id":878,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9429:9:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"VariableDeclarationStatement","src":"9400:86:3"},{"assignments":[889],"declarations":[{"constant":false,"id":889,"mutability":"mutable","name":"positiveSign","nameLocation":"9572:12:3","nodeType":"VariableDeclaration","scope":969,"src":"9567:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":888,"name":"bool","nodeType":"ElementaryTypeName","src":"9567:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":896,"initialValue":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":890,"name":"sign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":871,"src":"9587:4:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"2b","id":893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9602:3:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_728b8dbbe730d9acd55e30e768e6a28a04bea0c61b88108287c2c87d79c98bb8","typeString":"literal_string \"+\""},"value":"+"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_728b8dbbe730d9acd55e30e768e6a28a04bea0c61b88108287c2c87d79c98bb8","typeString":"literal_string \"+\""}],"id":892,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9595:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":891,"name":"bytes1","nodeType":"ElementaryTypeName","src":"9595:6:3","typeDescriptions":{}}},"id":894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9595:11:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"9587:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"9567:39:3"},{"assignments":[898],"declarations":[{"constant":false,"id":898,"mutability":"mutable","name":"negativeSign","nameLocation":"9621:12:3","nodeType":"VariableDeclaration","scope":969,"src":"9616:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":897,"name":"bool","nodeType":"ElementaryTypeName","src":"9616:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":905,"initialValue":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":899,"name":"sign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":871,"src":"9636:4:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"2d","id":902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9651:3:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""}],"id":901,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9644:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":900,"name":"bytes1","nodeType":"ElementaryTypeName","src":"9644:6:3","typeDescriptions":{}}},"id":903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9644:11:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"9636:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"9616:39:3"},{"assignments":[907],"declarations":[{"constant":false,"id":907,"mutability":"mutable","name":"offset","nameLocation":"9673:6:3","nodeType":"VariableDeclaration","scope":969,"src":"9665:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":906,"name":"uint256","nodeType":"ElementaryTypeName","src":"9665:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":914,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":908,"name":"positiveSign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"9683:12:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":909,"name":"negativeSign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":898,"src":"9699:12:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9683:28:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":911,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9682:30:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9713:6:3","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":4799,"src":"9682:37:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$attached_to$_t_bool_$","typeString":"function (bool) pure returns (uint256)"}},"id":913,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9682:39:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9665:56:3"},{"assignments":[916,918],"declarations":[{"constant":false,"id":916,"mutability":"mutable","name":"absSuccess","nameLocation":"9738:10:3","nodeType":"VariableDeclaration","scope":969,"src":"9733:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":915,"name":"bool","nodeType":"ElementaryTypeName","src":"9733:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":918,"mutability":"mutable","name":"absValue","nameLocation":"9758:8:3","nodeType":"VariableDeclaration","scope":969,"src":"9750:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":917,"name":"uint256","nodeType":"ElementaryTypeName","src":"9750:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":926,"initialValue":{"arguments":[{"id":920,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"9783:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":921,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":854,"src":"9790:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":922,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":907,"src":"9798:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9790:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":924,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":856,"src":"9806:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":919,"name":"tryParseUint","nodeType":"Identifier","overloadedDeclarations":[629,666],"referencedDeclaration":666,"src":"9770:12:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":925,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9770:40:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"9732:78:3"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":927,"name":"absSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"9825:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":928,"name":"absValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"9839:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":929,"name":"ABS_MIN_INT256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":812,"src":"9850:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9839:25:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9825:39:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":947,"name":"absSuccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"9967:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":948,"name":"negativeSign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":898,"src":"9981:12:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9967:26:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":950,"name":"absValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"9997:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":951,"name":"ABS_MIN_INT256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":812,"src":"10009:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9997:26:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9967:56:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"expression":{"components":[{"hexValue":"66616c7365","id":963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10095:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10102:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":965,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"10094:10:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":862,"id":966,"nodeType":"Return","src":"10087:17:3"},"id":967,"nodeType":"IfStatement","src":"9963:141:3","trueBody":{"id":962,"nodeType":"Block","src":"10025:56:3","statements":[{"expression":{"components":[{"hexValue":"74727565","id":954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10047:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"expression":{"arguments":[{"id":957,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10058:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":956,"name":"int256","nodeType":"ElementaryTypeName","src":"10058:6:3","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"}],"id":955,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10053:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10053:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int256","typeString":"type(int256)"}},"id":959,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10066:3:3","memberName":"min","nodeType":"MemberAccess","src":"10053:16:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":960,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"10046:24:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_int256_$","typeString":"tuple(bool,int256)"}},"functionReturnParameters":862,"id":961,"nodeType":"Return","src":"10039:31:3"}]}},"id":968,"nodeType":"IfStatement","src":"9821:283:3","trueBody":{"id":946,"nodeType":"Block","src":"9866:91:3","statements":[{"expression":{"components":[{"hexValue":"74727565","id":932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9888:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"condition":{"id":933,"name":"negativeSign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":898,"src":"9894:12:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":941,"name":"absValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"9936:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":940,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9929:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":939,"name":"int256","nodeType":"ElementaryTypeName","src":"9929:6:3","typeDescriptions":{}}},"id":942,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9929:16:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9894:51:3","trueExpression":{"id":938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"9909:17:3","subExpression":{"arguments":[{"id":936,"name":"absValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"9917:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":935,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9910:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":934,"name":"int256","nodeType":"ElementaryTypeName","src":"9910:6:3","typeDescriptions":{}}},"id":937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9910:16:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":944,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9887:59:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_int256_$","typeString":"tuple(bool,int256)"}},"functionReturnParameters":862,"id":945,"nodeType":"Return","src":"9880:66:3"}]}}]},"documentation":{"id":850,"nodeType":"StructuredDocumentation","src":"8928:200:3","text":" @dev Implementation of {tryParseInt} that does not check bounds. Caller should make sure that\n `begin <= end <= input.length`. Other inputs would result in undefined behavior."},"id":970,"implemented":true,"kind":"function","modifiers":[],"name":"_tryParseIntUncheckedBounds","nameLocation":"9142:27:3","nodeType":"FunctionDefinition","parameters":{"id":857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":852,"mutability":"mutable","name":"input","nameLocation":"9193:5:3","nodeType":"VariableDeclaration","scope":970,"src":"9179:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":851,"name":"string","nodeType":"ElementaryTypeName","src":"9179:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":854,"mutability":"mutable","name":"begin","nameLocation":"9216:5:3","nodeType":"VariableDeclaration","scope":970,"src":"9208:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":853,"name":"uint256","nodeType":"ElementaryTypeName","src":"9208:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":856,"mutability":"mutable","name":"end","nameLocation":"9239:3:3","nodeType":"VariableDeclaration","scope":970,"src":"9231:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":855,"name":"uint256","nodeType":"ElementaryTypeName","src":"9231:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9169:79:3"},"returnParameters":{"id":862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":859,"mutability":"mutable","name":"success","nameLocation":"9276:7:3","nodeType":"VariableDeclaration","scope":970,"src":"9271:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":858,"name":"bool","nodeType":"ElementaryTypeName","src":"9271:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":861,"mutability":"mutable","name":"value","nameLocation":"9292:5:3","nodeType":"VariableDeclaration","scope":970,"src":"9285:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":860,"name":"int256","nodeType":"ElementaryTypeName","src":"9285:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"9270:28:3"},"scope":1429,"src":"9133:978:3","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":988,"nodeType":"Block","src":"10456:67:3","statements":[{"expression":{"arguments":[{"id":979,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":973,"src":"10486:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10493:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":983,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":973,"src":"10502:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":982,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10496:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":981,"name":"bytes","nodeType":"ElementaryTypeName","src":"10496:5:3","typeDescriptions":{}}},"id":984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10496:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10509:6:3","memberName":"length","nodeType":"MemberAccess","src":"10496:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":978,"name":"parseHexUint","nodeType":"Identifier","overloadedDeclarations":[989,1020],"referencedDeclaration":1020,"src":"10473:12:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (uint256)"}},"id":986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10473:43:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":977,"id":987,"nodeType":"Return","src":"10466:50:3"}]},"documentation":{"id":971,"nodeType":"StructuredDocumentation","src":"10117:259:3","text":" @dev Parse a hexadecimal string (with or without \"0x\" prefix), and returns the value as a `uint256`.\n Requirements:\n - The string must be formatted as `(0x)?[0-9a-fA-F]*`\n - The result must fit in an `uint256` type."},"id":989,"implemented":true,"kind":"function","modifiers":[],"name":"parseHexUint","nameLocation":"10390:12:3","nodeType":"FunctionDefinition","parameters":{"id":974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":973,"mutability":"mutable","name":"input","nameLocation":"10417:5:3","nodeType":"VariableDeclaration","scope":989,"src":"10403:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":972,"name":"string","nodeType":"ElementaryTypeName","src":"10403:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"10402:21:3"},"returnParameters":{"id":977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":976,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":989,"src":"10447:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":975,"name":"uint256","nodeType":"ElementaryTypeName","src":"10447:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10446:9:3"},"scope":1429,"src":"10381:142:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1019,"nodeType":"Block","src":"10937:156:3","statements":[{"assignments":[1002,1004],"declarations":[{"constant":false,"id":1002,"mutability":"mutable","name":"success","nameLocation":"10953:7:3","nodeType":"VariableDeclaration","scope":1019,"src":"10948:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1001,"name":"bool","nodeType":"ElementaryTypeName","src":"10948:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1004,"mutability":"mutable","name":"value","nameLocation":"10970:5:3","nodeType":"VariableDeclaration","scope":1019,"src":"10962:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1003,"name":"uint256","nodeType":"ElementaryTypeName","src":"10962:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1010,"initialValue":{"arguments":[{"id":1006,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"10995:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1007,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":994,"src":"11002:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1008,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"11009:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1005,"name":"tryParseHexUint","nodeType":"Identifier","overloadedDeclarations":[1041,1078],"referencedDeclaration":1078,"src":"10979:15:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":1009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10979:34:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"10947:66:3"},{"condition":{"id":1012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"11027:8:3","subExpression":{"id":1011,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1002,"src":"11028:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1016,"nodeType":"IfStatement","src":"11023:41:3","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1013,"name":"StringsInvalidChar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"11044:18:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1014,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11044:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1015,"nodeType":"RevertStatement","src":"11037:27:3"}},{"expression":{"id":1017,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"11081:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1000,"id":1018,"nodeType":"Return","src":"11074:12:3"}]},"documentation":{"id":990,"nodeType":"StructuredDocumentation","src":"10529:300:3","text":" @dev Variant of {parseHexUint} that parses a substring of `input` located between position `begin` (included) and\n `end` (excluded).\n Requirements:\n - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\n - The result must fit in an `uint256` type."},"id":1020,"implemented":true,"kind":"function","modifiers":[],"name":"parseHexUint","nameLocation":"10843:12:3","nodeType":"FunctionDefinition","parameters":{"id":997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":992,"mutability":"mutable","name":"input","nameLocation":"10870:5:3","nodeType":"VariableDeclaration","scope":1020,"src":"10856:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":991,"name":"string","nodeType":"ElementaryTypeName","src":"10856:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":994,"mutability":"mutable","name":"begin","nameLocation":"10885:5:3","nodeType":"VariableDeclaration","scope":1020,"src":"10877:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":993,"name":"uint256","nodeType":"ElementaryTypeName","src":"10877:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":996,"mutability":"mutable","name":"end","nameLocation":"10900:3:3","nodeType":"VariableDeclaration","scope":1020,"src":"10892:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":995,"name":"uint256","nodeType":"ElementaryTypeName","src":"10892:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10855:49:3"},"returnParameters":{"id":1000,"nodeType":"ParameterList","parameters":[{"constant":false,"id":999,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1020,"src":"10928:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":998,"name":"uint256","nodeType":"ElementaryTypeName","src":"10928:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10927:9:3"},"scope":1429,"src":"10834:259:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1040,"nodeType":"Block","src":"11420:86:3","statements":[{"expression":{"arguments":[{"id":1031,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1023,"src":"11469:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":1032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11476:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":1035,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1023,"src":"11485:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1034,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11479:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1033,"name":"bytes","nodeType":"ElementaryTypeName","src":"11479:5:3","typeDescriptions":{}}},"id":1036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11479:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11492:6:3","memberName":"length","nodeType":"MemberAccess","src":"11479:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1030,"name":"_tryParseHexUintUncheckedBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"11437:31:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":1038,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11437:62:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1029,"id":1039,"nodeType":"Return","src":"11430:69:3"}]},"documentation":{"id":1021,"nodeType":"StructuredDocumentation","src":"11099:218:3","text":" @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\n NOTE: This function will revert if the result does not fit in a `uint256`."},"id":1041,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseHexUint","nameLocation":"11331:15:3","nodeType":"FunctionDefinition","parameters":{"id":1024,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1023,"mutability":"mutable","name":"input","nameLocation":"11361:5:3","nodeType":"VariableDeclaration","scope":1041,"src":"11347:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1022,"name":"string","nodeType":"ElementaryTypeName","src":"11347:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"11346:21:3"},"returnParameters":{"id":1029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1026,"mutability":"mutable","name":"success","nameLocation":"11396:7:3","nodeType":"VariableDeclaration","scope":1041,"src":"11391:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1025,"name":"bool","nodeType":"ElementaryTypeName","src":"11391:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1028,"mutability":"mutable","name":"value","nameLocation":"11413:5:3","nodeType":"VariableDeclaration","scope":1041,"src":"11405:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1027,"name":"uint256","nodeType":"ElementaryTypeName","src":"11405:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11390:29:3"},"scope":1429,"src":"11322:184:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1077,"nodeType":"Block","src":"11914:147:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1055,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"11928:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":1058,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1044,"src":"11940:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1057,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11934:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1056,"name":"bytes","nodeType":"ElementaryTypeName","src":"11934:5:3","typeDescriptions":{}}},"id":1059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11934:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11947:6:3","memberName":"length","nodeType":"MemberAccess","src":"11934:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11928:25:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1062,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1046,"src":"11957:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1063,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"11965:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11957:11:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11928:40:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1070,"nodeType":"IfStatement","src":"11924:63:3","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"11978:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11985:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1068,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"11977:10:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1054,"id":1069,"nodeType":"Return","src":"11970:17:3"}},{"expression":{"arguments":[{"id":1072,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1044,"src":"12036:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1073,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1046,"src":"12043:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1074,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"12050:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1071,"name":"_tryParseHexUintUncheckedBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"12004:31:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":1075,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12004:50:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1054,"id":1076,"nodeType":"Return","src":"11997:57:3"}]},"documentation":{"id":1042,"nodeType":"StructuredDocumentation","src":"11512:241:3","text":" @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\n invalid character.\n NOTE: This function will revert if the result does not fit in a `uint256`."},"id":1078,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseHexUint","nameLocation":"11767:15:3","nodeType":"FunctionDefinition","parameters":{"id":1049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1044,"mutability":"mutable","name":"input","nameLocation":"11806:5:3","nodeType":"VariableDeclaration","scope":1078,"src":"11792:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1043,"name":"string","nodeType":"ElementaryTypeName","src":"11792:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1046,"mutability":"mutable","name":"begin","nameLocation":"11829:5:3","nodeType":"VariableDeclaration","scope":1078,"src":"11821:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1045,"name":"uint256","nodeType":"ElementaryTypeName","src":"11821:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1048,"mutability":"mutable","name":"end","nameLocation":"11852:3:3","nodeType":"VariableDeclaration","scope":1078,"src":"11844:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1047,"name":"uint256","nodeType":"ElementaryTypeName","src":"11844:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11782:79:3"},"returnParameters":{"id":1054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1051,"mutability":"mutable","name":"success","nameLocation":"11890:7:3","nodeType":"VariableDeclaration","scope":1078,"src":"11885:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1050,"name":"bool","nodeType":"ElementaryTypeName","src":"11885:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1053,"mutability":"mutable","name":"value","nameLocation":"11907:5:3","nodeType":"VariableDeclaration","scope":1078,"src":"11899:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1052,"name":"uint256","nodeType":"ElementaryTypeName","src":"11899:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11884:29:3"},"scope":1429,"src":"11758:303:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1180,"nodeType":"Block","src":"12447:880:3","statements":[{"assignments":[1093],"declarations":[{"constant":false,"id":1093,"mutability":"mutable","name":"buffer","nameLocation":"12470:6:3","nodeType":"VariableDeclaration","scope":1180,"src":"12457:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1092,"name":"bytes","nodeType":"ElementaryTypeName","src":"12457:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1098,"initialValue":{"arguments":[{"id":1096,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"12485:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1095,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12479:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1094,"name":"bytes","nodeType":"ElementaryTypeName","src":"12479:5:3","typeDescriptions":{}}},"id":1097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12479:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"12457:34:3"},{"assignments":[1100],"declarations":[{"constant":false,"id":1100,"mutability":"mutable","name":"hasPrefix","nameLocation":"12544:9:3","nodeType":"VariableDeclaration","scope":1180,"src":"12539:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1099,"name":"bool","nodeType":"ElementaryTypeName","src":"12539:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":1120,"initialValue":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1101,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"12557:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1102,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1083,"src":"12563:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12571:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12563:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12557:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1106,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12556:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes2","typeString":"bytes2"},"id":1118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1110,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1093,"src":"12607:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1111,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1083,"src":"12615:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1109,"name":"_unsafeReadBytesOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1428,"src":"12584:22:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":1112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12584:37:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1108,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12577:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":1107,"name":"bytes2","nodeType":"ElementaryTypeName","src":"12577:6:3","typeDescriptions":{}}},"id":1113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12577:45:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"3078","id":1116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12633:4:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_39bef1777deb3dfb14f64b9f81ced092c501fee72f90e93d03bb95ee89df9837","typeString":"literal_string \"0x\""},"value":"0x"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_39bef1777deb3dfb14f64b9f81ced092c501fee72f90e93d03bb95ee89df9837","typeString":"literal_string \"0x\""}],"id":1115,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12626:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":1114,"name":"bytes2","nodeType":"ElementaryTypeName","src":"12626:6:3","typeDescriptions":{}}},"id":1117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12626:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},"src":"12577:61:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12556:82:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"12539:99:3"},{"assignments":[1122],"declarations":[{"constant":false,"id":1122,"mutability":"mutable","name":"offset","nameLocation":"12727:6:3","nodeType":"VariableDeclaration","scope":1180,"src":"12719:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1121,"name":"uint256","nodeType":"ElementaryTypeName","src":"12719:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1128,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1123,"name":"hasPrefix","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1100,"src":"12736:9:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12746:6:3","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":4799,"src":"12736:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$attached_to$_t_bool_$","typeString":"function (bool) pure returns (uint256)"}},"id":1125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12736:18:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":1126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12757:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12736:22:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12719:39:3"},{"assignments":[1130],"declarations":[{"constant":false,"id":1130,"mutability":"mutable","name":"result","nameLocation":"12777:6:3","nodeType":"VariableDeclaration","scope":1180,"src":"12769:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1129,"name":"uint256","nodeType":"ElementaryTypeName","src":"12769:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1132,"initialValue":{"hexValue":"30","id":1131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12786:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12769:18:3"},{"body":{"id":1174,"nodeType":"Block","src":"12844:446:3","statements":[{"assignments":[1146],"declarations":[{"constant":false,"id":1146,"mutability":"mutable","name":"chr","nameLocation":"12864:3:3","nodeType":"VariableDeclaration","scope":1174,"src":"12858:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1145,"name":"uint8","nodeType":"ElementaryTypeName","src":"12858:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1156,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"id":1151,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1093,"src":"12913:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1152,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1134,"src":"12921:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1150,"name":"_unsafeReadBytesOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1428,"src":"12890:22:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":1153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12890:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1149,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12883:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":1148,"name":"bytes1","nodeType":"ElementaryTypeName","src":"12883:6:3","typeDescriptions":{}}},"id":1154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12883:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":1147,"name":"_tryParseChr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1416,"src":"12870:12:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes1_$returns$_t_uint8_$","typeString":"function (bytes1) pure returns (uint8)"}},"id":1155,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12870:55:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"12858:67:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1157,"name":"chr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1146,"src":"12943:3:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3135","id":1158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12949:2:3","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"15"},"src":"12943:8:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1164,"nodeType":"IfStatement","src":"12939:31:3","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1160,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"12961:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12968:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1162,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"12960:10:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1091,"id":1163,"nodeType":"Return","src":"12953:17:3"}},{"expression":{"id":1167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1165,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1130,"src":"12984:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"hexValue":"3136","id":1166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12994:2:3","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12984:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1168,"nodeType":"ExpressionStatement","src":"12984:12:3"},{"id":1173,"nodeType":"UncheckedBlock","src":"13010:270:3","statements":[{"expression":{"id":1171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1169,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1130,"src":"13252:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1170,"name":"chr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1146,"src":"13262:3:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"13252:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1172,"nodeType":"ExpressionStatement","src":"13252:13:3"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1139,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1134,"src":"12830:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1140,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"12834:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12830:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1175,"initializationExpression":{"assignments":[1134],"declarations":[{"constant":false,"id":1134,"mutability":"mutable","name":"i","nameLocation":"12810:1:3","nodeType":"VariableDeclaration","scope":1175,"src":"12802:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1133,"name":"uint256","nodeType":"ElementaryTypeName","src":"12802:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1138,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1135,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1083,"src":"12814:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1136,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"12822:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12814:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12802:26:3"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"12839:3:3","subExpression":{"id":1142,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1134,"src":"12841:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1144,"nodeType":"ExpressionStatement","src":"12839:3:3"},"nodeType":"ForStatement","src":"12797:493:3"},{"expression":{"components":[{"hexValue":"74727565","id":1176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"13307:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":1177,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1130,"src":"13313:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1178,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13306:14:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1091,"id":1179,"nodeType":"Return","src":"13299:21:3"}]},"documentation":{"id":1079,"nodeType":"StructuredDocumentation","src":"12067:204:3","text":" @dev Implementation of {tryParseHexUint} that does not check bounds. Caller should make sure that\n `begin <= end <= input.length`. Other inputs would result in undefined behavior."},"id":1181,"implemented":true,"kind":"function","modifiers":[],"name":"_tryParseHexUintUncheckedBounds","nameLocation":"12285:31:3","nodeType":"FunctionDefinition","parameters":{"id":1086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1081,"mutability":"mutable","name":"input","nameLocation":"12340:5:3","nodeType":"VariableDeclaration","scope":1181,"src":"12326:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1080,"name":"string","nodeType":"ElementaryTypeName","src":"12326:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1083,"mutability":"mutable","name":"begin","nameLocation":"12363:5:3","nodeType":"VariableDeclaration","scope":1181,"src":"12355:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1082,"name":"uint256","nodeType":"ElementaryTypeName","src":"12355:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1085,"mutability":"mutable","name":"end","nameLocation":"12386:3:3","nodeType":"VariableDeclaration","scope":1181,"src":"12378:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1084,"name":"uint256","nodeType":"ElementaryTypeName","src":"12378:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12316:79:3"},"returnParameters":{"id":1091,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1088,"mutability":"mutable","name":"success","nameLocation":"12423:7:3","nodeType":"VariableDeclaration","scope":1181,"src":"12418:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1087,"name":"bool","nodeType":"ElementaryTypeName","src":"12418:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1090,"mutability":"mutable","name":"value","nameLocation":"12440:5:3","nodeType":"VariableDeclaration","scope":1181,"src":"12432:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1089,"name":"uint256","nodeType":"ElementaryTypeName","src":"12432:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12417:29:3"},"scope":1429,"src":"12276:1051:3","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1199,"nodeType":"Block","src":"13625:67:3","statements":[{"expression":{"arguments":[{"id":1190,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1184,"src":"13655:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":1191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13662:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":1194,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1184,"src":"13671:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1193,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13665:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1192,"name":"bytes","nodeType":"ElementaryTypeName","src":"13665:5:3","typeDescriptions":{}}},"id":1195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13665:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13678:6:3","memberName":"length","nodeType":"MemberAccess","src":"13665:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1189,"name":"parseAddress","nodeType":"Identifier","overloadedDeclarations":[1200,1231],"referencedDeclaration":1231,"src":"13642:12:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_address_$","typeString":"function (string memory,uint256,uint256) pure returns (address)"}},"id":1197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13642:43:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1188,"id":1198,"nodeType":"Return","src":"13635:50:3"}]},"documentation":{"id":1182,"nodeType":"StructuredDocumentation","src":"13333:212:3","text":" @dev Parse a hexadecimal string (with or without \"0x\" prefix), and returns the value as an `address`.\n Requirements:\n - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`"},"id":1200,"implemented":true,"kind":"function","modifiers":[],"name":"parseAddress","nameLocation":"13559:12:3","nodeType":"FunctionDefinition","parameters":{"id":1185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1184,"mutability":"mutable","name":"input","nameLocation":"13586:5:3","nodeType":"VariableDeclaration","scope":1200,"src":"13572:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1183,"name":"string","nodeType":"ElementaryTypeName","src":"13572:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"13571:21:3"},"returnParameters":{"id":1188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1187,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1200,"src":"13616:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1186,"name":"address","nodeType":"ElementaryTypeName","src":"13616:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13615:9:3"},"scope":1429,"src":"13550:142:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1230,"nodeType":"Block","src":"14058:165:3","statements":[{"assignments":[1213,1215],"declarations":[{"constant":false,"id":1213,"mutability":"mutable","name":"success","nameLocation":"14074:7:3","nodeType":"VariableDeclaration","scope":1230,"src":"14069:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1212,"name":"bool","nodeType":"ElementaryTypeName","src":"14069:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1215,"mutability":"mutable","name":"value","nameLocation":"14091:5:3","nodeType":"VariableDeclaration","scope":1230,"src":"14083:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1214,"name":"address","nodeType":"ElementaryTypeName","src":"14083:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1221,"initialValue":{"arguments":[{"id":1217,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1203,"src":"14116:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1218,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1205,"src":"14123:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1219,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"14130:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1216,"name":"tryParseAddress","nodeType":"Identifier","overloadedDeclarations":[1252,1356],"referencedDeclaration":1356,"src":"14100:15:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_address_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,address)"}},"id":1220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14100:34:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_address_$","typeString":"tuple(bool,address)"}},"nodeType":"VariableDeclarationStatement","src":"14068:66:3"},{"condition":{"id":1223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"14148:8:3","subExpression":{"id":1222,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1213,"src":"14149:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1227,"nodeType":"IfStatement","src":"14144:50:3","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1224,"name":"StringsInvalidAddressFormat","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":259,"src":"14165:27:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14165:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1226,"nodeType":"RevertStatement","src":"14158:36:3"}},{"expression":{"id":1228,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1215,"src":"14211:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1211,"id":1229,"nodeType":"Return","src":"14204:12:3"}]},"documentation":{"id":1201,"nodeType":"StructuredDocumentation","src":"13698:252:3","text":" @dev Variant of {parseAddress} that parses a substring of `input` located between position `begin` (included) and\n `end` (excluded).\n Requirements:\n - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`"},"id":1231,"implemented":true,"kind":"function","modifiers":[],"name":"parseAddress","nameLocation":"13964:12:3","nodeType":"FunctionDefinition","parameters":{"id":1208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1203,"mutability":"mutable","name":"input","nameLocation":"13991:5:3","nodeType":"VariableDeclaration","scope":1231,"src":"13977:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1202,"name":"string","nodeType":"ElementaryTypeName","src":"13977:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1205,"mutability":"mutable","name":"begin","nameLocation":"14006:5:3","nodeType":"VariableDeclaration","scope":1231,"src":"13998:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1204,"name":"uint256","nodeType":"ElementaryTypeName","src":"13998:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1207,"mutability":"mutable","name":"end","nameLocation":"14021:3:3","nodeType":"VariableDeclaration","scope":1231,"src":"14013:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1206,"name":"uint256","nodeType":"ElementaryTypeName","src":"14013:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13976:49:3"},"returnParameters":{"id":1211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1210,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1231,"src":"14049:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1209,"name":"address","nodeType":"ElementaryTypeName","src":"14049:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14048:9:3"},"scope":1429,"src":"13955:268:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1251,"nodeType":"Block","src":"14523:70:3","statements":[{"expression":{"arguments":[{"id":1242,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1234,"src":"14556:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"30","id":1243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14563:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"arguments":[{"id":1246,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1234,"src":"14572:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1245,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14566:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1244,"name":"bytes","nodeType":"ElementaryTypeName","src":"14566:5:3","typeDescriptions":{}}},"id":1247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14566:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14579:6:3","memberName":"length","nodeType":"MemberAccess","src":"14566:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1241,"name":"tryParseAddress","nodeType":"Identifier","overloadedDeclarations":[1252,1356],"referencedDeclaration":1356,"src":"14540:15:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_address_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,address)"}},"id":1249,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14540:46:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_address_$","typeString":"tuple(bool,address)"}},"functionReturnParameters":1240,"id":1250,"nodeType":"Return","src":"14533:53:3"}]},"documentation":{"id":1232,"nodeType":"StructuredDocumentation","src":"14229:191:3","text":" @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\n formatted address. See {parseAddress} requirements."},"id":1252,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseAddress","nameLocation":"14434:15:3","nodeType":"FunctionDefinition","parameters":{"id":1235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1234,"mutability":"mutable","name":"input","nameLocation":"14464:5:3","nodeType":"VariableDeclaration","scope":1252,"src":"14450:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1233,"name":"string","nodeType":"ElementaryTypeName","src":"14450:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"14449:21:3"},"returnParameters":{"id":1240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1237,"mutability":"mutable","name":"success","nameLocation":"14499:7:3","nodeType":"VariableDeclaration","scope":1252,"src":"14494:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1236,"name":"bool","nodeType":"ElementaryTypeName","src":"14494:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1239,"mutability":"mutable","name":"value","nameLocation":"14516:5:3","nodeType":"VariableDeclaration","scope":1252,"src":"14508:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1238,"name":"address","nodeType":"ElementaryTypeName","src":"14508:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14493:29:3"},"scope":1429,"src":"14425:168:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1355,"nodeType":"Block","src":"14963:733:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1266,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1259,"src":"14977:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":1269,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"14989:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1268,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14983:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1267,"name":"bytes","nodeType":"ElementaryTypeName","src":"14983:5:3","typeDescriptions":{}}},"id":1270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14983:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14996:6:3","memberName":"length","nodeType":"MemberAccess","src":"14983:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14977:25:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1273,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1257,"src":"15006:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1274,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1259,"src":"15014:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15006:11:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14977:40:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1284,"nodeType":"IfStatement","src":"14973:72:3","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"15027:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"arguments":[{"hexValue":"30","id":1280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15042:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1279,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15034:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1278,"name":"address","nodeType":"ElementaryTypeName","src":"15034:7:3","typeDescriptions":{}}},"id":1281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15034:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":1282,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"15026:19:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_address_$","typeString":"tuple(bool,address)"}},"functionReturnParameters":1265,"id":1283,"nodeType":"Return","src":"15019:26:3"}},{"assignments":[1286],"declarations":[{"constant":false,"id":1286,"mutability":"mutable","name":"hasPrefix","nameLocation":"15061:9:3","nodeType":"VariableDeclaration","scope":1355,"src":"15056:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1285,"name":"bool","nodeType":"ElementaryTypeName","src":"15056:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":1309,"initialValue":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1287,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1259,"src":"15074:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1288,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1257,"src":"15080:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15088:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15080:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15074:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1292,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15073:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes2","typeString":"bytes2"},"id":1307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"arguments":[{"id":1298,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"15130:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1297,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15124:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1296,"name":"bytes","nodeType":"ElementaryTypeName","src":"15124:5:3","typeDescriptions":{}}},"id":1299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15124:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1300,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1257,"src":"15138:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1295,"name":"_unsafeReadBytesOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1428,"src":"15101:22:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint256) pure returns (bytes32)"}},"id":1301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15101:43:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1294,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15094:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":1293,"name":"bytes2","nodeType":"ElementaryTypeName","src":"15094:6:3","typeDescriptions":{}}},"id":1302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15094:51:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"3078","id":1305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15156:4:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_39bef1777deb3dfb14f64b9f81ced092c501fee72f90e93d03bb95ee89df9837","typeString":"literal_string \"0x\""},"value":"0x"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_39bef1777deb3dfb14f64b9f81ced092c501fee72f90e93d03bb95ee89df9837","typeString":"literal_string \"0x\""}],"id":1304,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15149:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":1303,"name":"bytes2","nodeType":"ElementaryTypeName","src":"15149:6:3","typeDescriptions":{}}},"id":1306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15149:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},"src":"15094:67:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15073:88:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"15056:105:3"},{"assignments":[1311],"declarations":[{"constant":false,"id":1311,"mutability":"mutable","name":"expectedLength","nameLocation":"15250:14:3","nodeType":"VariableDeclaration","scope":1355,"src":"15242:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1310,"name":"uint256","nodeType":"ElementaryTypeName","src":"15242:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1319,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3430","id":1312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15267:2:3","typeDescriptions":{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},"value":"40"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1313,"name":"hasPrefix","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1286,"src":"15272:9:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15282:6:3","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":4799,"src":"15272:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$attached_to$_t_bool_$","typeString":"function (bool) pure returns (uint256)"}},"id":1315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15272:18:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":1316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15293:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"15272:22:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15267:27:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"15242:52:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1320,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1259,"src":"15359:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1321,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1257,"src":"15365:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15359:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1323,"name":"expectedLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"15374:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15359:29:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1353,"nodeType":"Block","src":"15639:51:3","statements":[{"expression":{"components":[{"hexValue":"66616c7365","id":1346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"15661:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"arguments":[{"hexValue":"30","id":1349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15676:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1348,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15668:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1347,"name":"address","nodeType":"ElementaryTypeName","src":"15668:7:3","typeDescriptions":{}}},"id":1350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15668:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":1351,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"15660:19:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_address_$","typeString":"tuple(bool,address)"}},"functionReturnParameters":1265,"id":1352,"nodeType":"Return","src":"15653:26:3"}]},"id":1354,"nodeType":"IfStatement","src":"15355:335:3","trueBody":{"id":1345,"nodeType":"Block","src":"15390:243:3","statements":[{"assignments":[1326,1328],"declarations":[{"constant":false,"id":1326,"mutability":"mutable","name":"s","nameLocation":"15511:1:3","nodeType":"VariableDeclaration","scope":1345,"src":"15506:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1325,"name":"bool","nodeType":"ElementaryTypeName","src":"15506:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1328,"mutability":"mutable","name":"v","nameLocation":"15522:1:3","nodeType":"VariableDeclaration","scope":1345,"src":"15514:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1327,"name":"uint256","nodeType":"ElementaryTypeName","src":"15514:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1334,"initialValue":{"arguments":[{"id":1330,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"15559:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1331,"name":"begin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1257,"src":"15566:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1332,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1259,"src":"15573:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1329,"name":"_tryParseHexUintUncheckedBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"15527:31:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (string memory,uint256,uint256) pure returns (bool,uint256)"}},"id":1333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15527:50:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"15505:72:3"},{"expression":{"components":[{"id":1335,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1326,"src":"15599:1:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"arguments":[{"id":1340,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"15618:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1339,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15610:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1338,"name":"uint160","nodeType":"ElementaryTypeName","src":"15610:7:3","typeDescriptions":{}}},"id":1341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15610:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1337,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15602:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1336,"name":"address","nodeType":"ElementaryTypeName","src":"15602:7:3","typeDescriptions":{}}},"id":1342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15602:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":1343,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15598:24:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_address_$","typeString":"tuple(bool,address)"}},"functionReturnParameters":1265,"id":1344,"nodeType":"Return","src":"15591:31:3"}]}}]},"documentation":{"id":1253,"nodeType":"StructuredDocumentation","src":"14599:203:3","text":" @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\n formatted address. See {parseAddress} requirements."},"id":1356,"implemented":true,"kind":"function","modifiers":[],"name":"tryParseAddress","nameLocation":"14816:15:3","nodeType":"FunctionDefinition","parameters":{"id":1260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1255,"mutability":"mutable","name":"input","nameLocation":"14855:5:3","nodeType":"VariableDeclaration","scope":1356,"src":"14841:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1254,"name":"string","nodeType":"ElementaryTypeName","src":"14841:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1257,"mutability":"mutable","name":"begin","nameLocation":"14878:5:3","nodeType":"VariableDeclaration","scope":1356,"src":"14870:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1256,"name":"uint256","nodeType":"ElementaryTypeName","src":"14870:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1259,"mutability":"mutable","name":"end","nameLocation":"14901:3:3","nodeType":"VariableDeclaration","scope":1356,"src":"14893:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1258,"name":"uint256","nodeType":"ElementaryTypeName","src":"14893:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14831:79:3"},"returnParameters":{"id":1265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1262,"mutability":"mutable","name":"success","nameLocation":"14939:7:3","nodeType":"VariableDeclaration","scope":1356,"src":"14934:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1261,"name":"bool","nodeType":"ElementaryTypeName","src":"14934:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1264,"mutability":"mutable","name":"value","nameLocation":"14956:5:3","nodeType":"VariableDeclaration","scope":1356,"src":"14948:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1263,"name":"address","nodeType":"ElementaryTypeName","src":"14948:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14933:29:3"},"scope":1429,"src":"14807:889:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1415,"nodeType":"Block","src":"15765:461:3","statements":[{"assignments":[1364],"declarations":[{"constant":false,"id":1364,"mutability":"mutable","name":"value","nameLocation":"15781:5:3","nodeType":"VariableDeclaration","scope":1415,"src":"15775:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1363,"name":"uint8","nodeType":"ElementaryTypeName","src":"15775:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1369,"initialValue":{"arguments":[{"id":1367,"name":"chr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1358,"src":"15795:3:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":1366,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15789:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1365,"name":"uint8","nodeType":"ElementaryTypeName","src":"15789:5:3","typeDescriptions":{}}},"id":1368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15789:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"15775:24:3"},{"id":1412,"nodeType":"UncheckedBlock","src":"15959:238:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1370,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"15987:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3437","id":1371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15995:2:3","typeDescriptions":{"typeIdentifier":"t_rational_47_by_1","typeString":"int_const 47"},"value":"47"},"src":"15987:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1373,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"16001:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3538","id":1374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16009:2:3","typeDescriptions":{"typeIdentifier":"t_rational_58_by_1","typeString":"int_const 58"},"value":"58"},"src":"16001:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15987:24:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1381,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"16047:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3936","id":1382,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16055:2:3","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"96"},"src":"16047:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1384,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"16061:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"313033","id":1385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16069:3:3","typeDescriptions":{"typeIdentifier":"t_rational_103_by_1","typeString":"int_const 103"},"value":"103"},"src":"16061:11:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"16047:25:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1392,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"16108:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3634","id":1393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16116:2:3","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"16108:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1395,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"16122:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3731","id":1396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16130:2:3","typeDescriptions":{"typeIdentifier":"t_rational_71_by_1","typeString":"int_const 71"},"value":"71"},"src":"16122:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"16108:24:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"expression":{"expression":{"arguments":[{"id":1405,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16176:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1404,"name":"uint8","nodeType":"ElementaryTypeName","src":"16176:5:3","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":1403,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"16171:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16171:11:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":1407,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16183:3:3","memberName":"max","nodeType":"MemberAccess","src":"16171:15:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":1362,"id":1408,"nodeType":"Return","src":"16164:22:3"},"id":1409,"nodeType":"IfStatement","src":"16104:82:3","trueBody":{"expression":{"id":1401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1399,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"16134:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"3535","id":1400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16143:2:3","typeDescriptions":{"typeIdentifier":"t_rational_55_by_1","typeString":"int_const 55"},"value":"55"},"src":"16134:11:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1402,"nodeType":"ExpressionStatement","src":"16134:11:3"}},"id":1410,"nodeType":"IfStatement","src":"16043:143:3","trueBody":{"expression":{"id":1390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1388,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"16074:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"3837","id":1389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16083:2:3","typeDescriptions":{"typeIdentifier":"t_rational_87_by_1","typeString":"int_const 87"},"value":"87"},"src":"16074:11:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1391,"nodeType":"ExpressionStatement","src":"16074:11:3"}},"id":1411,"nodeType":"IfStatement","src":"15983:203:3","trueBody":{"expression":{"id":1379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1377,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"16013:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"3438","id":1378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16022:2:3","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"src":"16013:11:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1380,"nodeType":"ExpressionStatement","src":"16013:11:3"}}]},{"expression":{"id":1413,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"16214:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":1362,"id":1414,"nodeType":"Return","src":"16207:12:3"}]},"id":1416,"implemented":true,"kind":"function","modifiers":[],"name":"_tryParseChr","nameLocation":"15711:12:3","nodeType":"FunctionDefinition","parameters":{"id":1359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1358,"mutability":"mutable","name":"chr","nameLocation":"15731:3:3","nodeType":"VariableDeclaration","scope":1416,"src":"15724:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":1357,"name":"bytes1","nodeType":"ElementaryTypeName","src":"15724:6:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"}],"src":"15723:12:3"},"returnParameters":{"id":1362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1361,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1416,"src":"15758:5:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1360,"name":"uint8","nodeType":"ElementaryTypeName","src":"15758:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"15757:7:3"},"scope":1429,"src":"15702:524:3","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1427,"nodeType":"Block","src":"16611:225:3","statements":[{"AST":{"nativeSrc":"16760:70:3","nodeType":"YulBlock","src":"16760:70:3","statements":[{"nativeSrc":"16774:46:3","nodeType":"YulAssignment","src":"16774:46:3","value":{"arguments":[{"arguments":[{"name":"buffer","nativeSrc":"16793:6:3","nodeType":"YulIdentifier","src":"16793:6:3"},{"arguments":[{"kind":"number","nativeSrc":"16805:4:3","nodeType":"YulLiteral","src":"16805:4:3","type":"","value":"0x20"},{"name":"offset","nativeSrc":"16811:6:3","nodeType":"YulIdentifier","src":"16811:6:3"}],"functionName":{"name":"add","nativeSrc":"16801:3:3","nodeType":"YulIdentifier","src":"16801:3:3"},"nativeSrc":"16801:17:3","nodeType":"YulFunctionCall","src":"16801:17:3"}],"functionName":{"name":"add","nativeSrc":"16789:3:3","nodeType":"YulIdentifier","src":"16789:3:3"},"nativeSrc":"16789:30:3","nodeType":"YulFunctionCall","src":"16789:30:3"}],"functionName":{"name":"mload","nativeSrc":"16783:5:3","nodeType":"YulIdentifier","src":"16783:5:3"},"nativeSrc":"16783:37:3","nodeType":"YulFunctionCall","src":"16783:37:3"},"variableNames":[{"name":"value","nativeSrc":"16774:5:3","nodeType":"YulIdentifier","src":"16774:5:3"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1419,"isOffset":false,"isSlot":false,"src":"16793:6:3","valueSize":1},{"declaration":1421,"isOffset":false,"isSlot":false,"src":"16811:6:3","valueSize":1},{"declaration":1424,"isOffset":false,"isSlot":false,"src":"16774:5:3","valueSize":1}],"flags":["memory-safe"],"id":1426,"nodeType":"InlineAssembly","src":"16735:95:3"}]},"documentation":{"id":1417,"nodeType":"StructuredDocumentation","src":"16232:268:3","text":" @dev Reads a bytes32 from a bytes array without bounds checking.\n NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\n assembly block as such would prevent some optimizations."},"id":1428,"implemented":true,"kind":"function","modifiers":[],"name":"_unsafeReadBytesOffset","nameLocation":"16514:22:3","nodeType":"FunctionDefinition","parameters":{"id":1422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1419,"mutability":"mutable","name":"buffer","nameLocation":"16550:6:3","nodeType":"VariableDeclaration","scope":1428,"src":"16537:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1418,"name":"bytes","nodeType":"ElementaryTypeName","src":"16537:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1421,"mutability":"mutable","name":"offset","nameLocation":"16566:6:3","nodeType":"VariableDeclaration","scope":1428,"src":"16558:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1420,"name":"uint256","nodeType":"ElementaryTypeName","src":"16558:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16536:37:3"},"returnParameters":{"id":1425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1424,"mutability":"mutable","name":"value","nameLocation":"16604:5:3","nodeType":"VariableDeclaration","scope":1428,"src":"16596:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1423,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16596:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"16595:15:3"},"scope":1429,"src":"16505:331:3","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1430,"src":"297:16541:3","usedErrors":[253,256,259],"usedEvents":[]}],"src":"101:16738:3"},"id":3},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[3035],"Panic":[229],"SafeCast":[4800]},"id":3036,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1431,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"103:24:4"},{"absolutePath":"@openzeppelin/contracts/utils/Panic.sol","file":"../Panic.sol","id":1433,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3036,"sourceUnit":230,"src":"129:35:4","symbolAliases":[{"foreign":{"id":1432,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"137:5:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeCast.sol","file":"./SafeCast.sol","id":1435,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3036,"sourceUnit":4801,"src":"165:40:4","symbolAliases":[{"foreign":{"id":1434,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"173:8:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":1436,"nodeType":"StructuredDocumentation","src":"207:73:4","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":3035,"linearizedBaseContracts":[3035],"name":"Math","nameLocation":"289:4:4","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":1441,"members":[{"id":1437,"name":"Floor","nameLocation":"324:5:4","nodeType":"EnumValue","src":"324:5:4"},{"id":1438,"name":"Ceil","nameLocation":"367:4:4","nodeType":"EnumValue","src":"367:4:4"},{"id":1439,"name":"Trunc","nameLocation":"409:5:4","nodeType":"EnumValue","src":"409:5:4"},{"id":1440,"name":"Expand","nameLocation":"439:6:4","nodeType":"EnumValue","src":"439:6:4"}],"name":"Rounding","nameLocation":"305:8:4","nodeType":"EnumDefinition","src":"300:169:4"},{"body":{"id":1472,"nodeType":"Block","src":"677:140:4","statements":[{"id":1471,"nodeType":"UncheckedBlock","src":"687:124:4","statements":[{"assignments":[1454],"declarations":[{"constant":false,"id":1454,"mutability":"mutable","name":"c","nameLocation":"719:1:4","nodeType":"VariableDeclaration","scope":1471,"src":"711:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1453,"name":"uint256","nodeType":"ElementaryTypeName","src":"711:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1458,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1455,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1444,"src":"723:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1456,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1446,"src":"727:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"723:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"711:17:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1459,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1454,"src":"746:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1460,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1444,"src":"750:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"746:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1466,"nodeType":"IfStatement","src":"742:28:4","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"761:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"768:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1464,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"760:10:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1452,"id":1465,"nodeType":"Return","src":"753:17:4"}},{"expression":{"components":[{"hexValue":"74727565","id":1467,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"792:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":1468,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1454,"src":"798:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1469,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"791:9:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1452,"id":1470,"nodeType":"Return","src":"784:16:4"}]}]},"documentation":{"id":1442,"nodeType":"StructuredDocumentation","src":"475:106:4","text":" @dev Returns the addition of two unsigned integers, with an success flag (no overflow)."},"id":1473,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"595:6:4","nodeType":"FunctionDefinition","parameters":{"id":1447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1444,"mutability":"mutable","name":"a","nameLocation":"610:1:4","nodeType":"VariableDeclaration","scope":1473,"src":"602:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1443,"name":"uint256","nodeType":"ElementaryTypeName","src":"602:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1446,"mutability":"mutable","name":"b","nameLocation":"621:1:4","nodeType":"VariableDeclaration","scope":1473,"src":"613:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1445,"name":"uint256","nodeType":"ElementaryTypeName","src":"613:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"601:22:4"},"returnParameters":{"id":1452,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1449,"mutability":"mutable","name":"success","nameLocation":"652:7:4","nodeType":"VariableDeclaration","scope":1473,"src":"647:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1448,"name":"bool","nodeType":"ElementaryTypeName","src":"647:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1451,"mutability":"mutable","name":"result","nameLocation":"669:6:4","nodeType":"VariableDeclaration","scope":1473,"src":"661:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1450,"name":"uint256","nodeType":"ElementaryTypeName","src":"661:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"646:30:4"},"scope":3035,"src":"586:231:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1500,"nodeType":"Block","src":"1028:113:4","statements":[{"id":1499,"nodeType":"UncheckedBlock","src":"1038:97:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1485,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"1066:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1486,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"1070:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1066:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1492,"nodeType":"IfStatement","src":"1062:28:4","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1081:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1088:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1490,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1080:10:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1484,"id":1491,"nodeType":"Return","src":"1073:17:4"}},{"expression":{"components":[{"hexValue":"74727565","id":1493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1112:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1494,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"1118:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1495,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"1122:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1118:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1497,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1111:13:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1484,"id":1498,"nodeType":"Return","src":"1104:20:4"}]}]},"documentation":{"id":1474,"nodeType":"StructuredDocumentation","src":"823:109:4","text":" @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow)."},"id":1501,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"946:6:4","nodeType":"FunctionDefinition","parameters":{"id":1479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1476,"mutability":"mutable","name":"a","nameLocation":"961:1:4","nodeType":"VariableDeclaration","scope":1501,"src":"953:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1475,"name":"uint256","nodeType":"ElementaryTypeName","src":"953:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1478,"mutability":"mutable","name":"b","nameLocation":"972:1:4","nodeType":"VariableDeclaration","scope":1501,"src":"964:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1477,"name":"uint256","nodeType":"ElementaryTypeName","src":"964:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"952:22:4"},"returnParameters":{"id":1484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1481,"mutability":"mutable","name":"success","nameLocation":"1003:7:4","nodeType":"VariableDeclaration","scope":1501,"src":"998:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1480,"name":"bool","nodeType":"ElementaryTypeName","src":"998:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1483,"mutability":"mutable","name":"result","nameLocation":"1020:6:4","nodeType":"VariableDeclaration","scope":1501,"src":"1012:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1482,"name":"uint256","nodeType":"ElementaryTypeName","src":"1012:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"997:30:4"},"scope":3035,"src":"937:204:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1542,"nodeType":"Block","src":"1355:417:4","statements":[{"id":1541,"nodeType":"UncheckedBlock","src":"1365:401:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1513,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"1623:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1628:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1623:6:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1520,"nodeType":"IfStatement","src":"1619:28:4","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":1516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1639:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":1517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1645:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1518,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1638:9:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1512,"id":1519,"nodeType":"Return","src":"1631:16:4"}},{"assignments":[1522],"declarations":[{"constant":false,"id":1522,"mutability":"mutable","name":"c","nameLocation":"1669:1:4","nodeType":"VariableDeclaration","scope":1541,"src":"1661:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1521,"name":"uint256","nodeType":"ElementaryTypeName","src":"1661:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1526,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1523,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"1673:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1524,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"1677:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1673:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1661:17:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1527,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1522,"src":"1696:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1528,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"1700:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1696:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1530,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"1705:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1696:10:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1536,"nodeType":"IfStatement","src":"1692:33:4","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1716:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1533,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1723:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1534,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1715:10:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1512,"id":1535,"nodeType":"Return","src":"1708:17:4"}},{"expression":{"components":[{"hexValue":"74727565","id":1537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1747:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":1538,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1522,"src":"1753:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1539,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1746:9:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1512,"id":1540,"nodeType":"Return","src":"1739:16:4"}]}]},"documentation":{"id":1502,"nodeType":"StructuredDocumentation","src":"1147:112:4","text":" @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow)."},"id":1543,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1273:6:4","nodeType":"FunctionDefinition","parameters":{"id":1507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1504,"mutability":"mutable","name":"a","nameLocation":"1288:1:4","nodeType":"VariableDeclaration","scope":1543,"src":"1280:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1503,"name":"uint256","nodeType":"ElementaryTypeName","src":"1280:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1506,"mutability":"mutable","name":"b","nameLocation":"1299:1:4","nodeType":"VariableDeclaration","scope":1543,"src":"1291:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1505,"name":"uint256","nodeType":"ElementaryTypeName","src":"1291:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1279:22:4"},"returnParameters":{"id":1512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1509,"mutability":"mutable","name":"success","nameLocation":"1330:7:4","nodeType":"VariableDeclaration","scope":1543,"src":"1325:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1508,"name":"bool","nodeType":"ElementaryTypeName","src":"1325:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1511,"mutability":"mutable","name":"result","nameLocation":"1347:6:4","nodeType":"VariableDeclaration","scope":1543,"src":"1339:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1510,"name":"uint256","nodeType":"ElementaryTypeName","src":"1339:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1324:30:4"},"scope":3035,"src":"1264:508:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1570,"nodeType":"Block","src":"1987:114:4","statements":[{"id":1569,"nodeType":"UncheckedBlock","src":"1997:98:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1555,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1548,"src":"2025:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2030:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2025:6:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1562,"nodeType":"IfStatement","src":"2021:29:4","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2041:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2048:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1560,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2040:10:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1554,"id":1561,"nodeType":"Return","src":"2033:17:4"}},{"expression":{"components":[{"hexValue":"74727565","id":1563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2072:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1564,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1546,"src":"2078:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1565,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1548,"src":"2082:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2078:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1567,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2071:13:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1554,"id":1568,"nodeType":"Return","src":"2064:20:4"}]}]},"documentation":{"id":1544,"nodeType":"StructuredDocumentation","src":"1778:113:4","text":" @dev Returns the division of two unsigned integers, with a success flag (no division by zero)."},"id":1571,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1905:6:4","nodeType":"FunctionDefinition","parameters":{"id":1549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1546,"mutability":"mutable","name":"a","nameLocation":"1920:1:4","nodeType":"VariableDeclaration","scope":1571,"src":"1912:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1545,"name":"uint256","nodeType":"ElementaryTypeName","src":"1912:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1548,"mutability":"mutable","name":"b","nameLocation":"1931:1:4","nodeType":"VariableDeclaration","scope":1571,"src":"1923:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1547,"name":"uint256","nodeType":"ElementaryTypeName","src":"1923:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1911:22:4"},"returnParameters":{"id":1554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1551,"mutability":"mutable","name":"success","nameLocation":"1962:7:4","nodeType":"VariableDeclaration","scope":1571,"src":"1957:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1550,"name":"bool","nodeType":"ElementaryTypeName","src":"1957:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1553,"mutability":"mutable","name":"result","nameLocation":"1979:6:4","nodeType":"VariableDeclaration","scope":1571,"src":"1971:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1552,"name":"uint256","nodeType":"ElementaryTypeName","src":"1971:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1956:30:4"},"scope":3035,"src":"1896:205:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1598,"nodeType":"Block","src":"2326:114:4","statements":[{"id":1597,"nodeType":"UncheckedBlock","src":"2336:98:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1583,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1576,"src":"2364:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2369:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2364:6:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1590,"nodeType":"IfStatement","src":"2360:29:4","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2380:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2387:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1588,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2379:10:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1582,"id":1589,"nodeType":"Return","src":"2372:17:4"}},{"expression":{"components":[{"hexValue":"74727565","id":1591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2411:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1592,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1574,"src":"2417:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":1593,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1576,"src":"2421:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2417:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1595,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2410:13:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1582,"id":1596,"nodeType":"Return","src":"2403:20:4"}]}]},"documentation":{"id":1572,"nodeType":"StructuredDocumentation","src":"2107:123:4","text":" @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero)."},"id":1599,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2244:6:4","nodeType":"FunctionDefinition","parameters":{"id":1577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1574,"mutability":"mutable","name":"a","nameLocation":"2259:1:4","nodeType":"VariableDeclaration","scope":1599,"src":"2251:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1573,"name":"uint256","nodeType":"ElementaryTypeName","src":"2251:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1576,"mutability":"mutable","name":"b","nameLocation":"2270:1:4","nodeType":"VariableDeclaration","scope":1599,"src":"2262:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1575,"name":"uint256","nodeType":"ElementaryTypeName","src":"2262:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2250:22:4"},"returnParameters":{"id":1582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1579,"mutability":"mutable","name":"success","nameLocation":"2301:7:4","nodeType":"VariableDeclaration","scope":1599,"src":"2296:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1578,"name":"bool","nodeType":"ElementaryTypeName","src":"2296:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1581,"mutability":"mutable","name":"result","nameLocation":"2318:6:4","nodeType":"VariableDeclaration","scope":1599,"src":"2310:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1580,"name":"uint256","nodeType":"ElementaryTypeName","src":"2310:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2295:30:4"},"scope":3035,"src":"2235:205:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1625,"nodeType":"Block","src":"2912:207:4","statements":[{"id":1624,"nodeType":"UncheckedBlock","src":"2922:191:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1611,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"3060:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1612,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1604,"src":"3066:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1613,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"3070:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3066:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1615,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3065:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"id":1618,"name":"condition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1602,"src":"3091:9:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":1616,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"3075:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$4800_$","typeString":"type(library SafeCast)"}},"id":1617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3084:6:4","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":4799,"src":"3075:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":1619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3075:26:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3065:36:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1621,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3064:38:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3060:42:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1610,"id":1623,"nodeType":"Return","src":"3053:49:4"}]}]},"documentation":{"id":1600,"nodeType":"StructuredDocumentation","src":"2446:374:4","text":" @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n one branch when needed, making this function more expensive."},"id":1626,"implemented":true,"kind":"function","modifiers":[],"name":"ternary","nameLocation":"2834:7:4","nodeType":"FunctionDefinition","parameters":{"id":1607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1602,"mutability":"mutable","name":"condition","nameLocation":"2847:9:4","nodeType":"VariableDeclaration","scope":1626,"src":"2842:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1601,"name":"bool","nodeType":"ElementaryTypeName","src":"2842:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1604,"mutability":"mutable","name":"a","nameLocation":"2866:1:4","nodeType":"VariableDeclaration","scope":1626,"src":"2858:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1603,"name":"uint256","nodeType":"ElementaryTypeName","src":"2858:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1606,"mutability":"mutable","name":"b","nameLocation":"2877:1:4","nodeType":"VariableDeclaration","scope":1626,"src":"2869:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1605,"name":"uint256","nodeType":"ElementaryTypeName","src":"2869:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2841:38:4"},"returnParameters":{"id":1610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1609,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1626,"src":"2903:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1608,"name":"uint256","nodeType":"ElementaryTypeName","src":"2903:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2902:9:4"},"scope":3035,"src":"2825:294:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1644,"nodeType":"Block","src":"3256:44:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1637,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"3281:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1638,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1631,"src":"3285:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3281:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1640,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"3288:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1641,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1631,"src":"3291:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1636,"name":"ternary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1626,"src":"3273:7:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bool,uint256,uint256) pure returns (uint256)"}},"id":1642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3273:20:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1635,"id":1643,"nodeType":"Return","src":"3266:27:4"}]},"documentation":{"id":1627,"nodeType":"StructuredDocumentation","src":"3125:59:4","text":" @dev Returns the largest of two numbers."},"id":1645,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"3198:3:4","nodeType":"FunctionDefinition","parameters":{"id":1632,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1629,"mutability":"mutable","name":"a","nameLocation":"3210:1:4","nodeType":"VariableDeclaration","scope":1645,"src":"3202:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1628,"name":"uint256","nodeType":"ElementaryTypeName","src":"3202:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1631,"mutability":"mutable","name":"b","nameLocation":"3221:1:4","nodeType":"VariableDeclaration","scope":1645,"src":"3213:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1630,"name":"uint256","nodeType":"ElementaryTypeName","src":"3213:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3201:22:4"},"returnParameters":{"id":1635,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1634,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1645,"src":"3247:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1633,"name":"uint256","nodeType":"ElementaryTypeName","src":"3247:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3246:9:4"},"scope":3035,"src":"3189:111:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1663,"nodeType":"Block","src":"3438:44:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1656,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1648,"src":"3463:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1657,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1650,"src":"3467:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3463:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1659,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1648,"src":"3470:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1660,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1650,"src":"3473:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1655,"name":"ternary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1626,"src":"3455:7:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bool,uint256,uint256) pure returns (uint256)"}},"id":1661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3455:20:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1654,"id":1662,"nodeType":"Return","src":"3448:27:4"}]},"documentation":{"id":1646,"nodeType":"StructuredDocumentation","src":"3306:60:4","text":" @dev Returns the smallest of two numbers."},"id":1664,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"3380:3:4","nodeType":"FunctionDefinition","parameters":{"id":1651,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1648,"mutability":"mutable","name":"a","nameLocation":"3392:1:4","nodeType":"VariableDeclaration","scope":1664,"src":"3384:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1647,"name":"uint256","nodeType":"ElementaryTypeName","src":"3384:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1650,"mutability":"mutable","name":"b","nameLocation":"3403:1:4","nodeType":"VariableDeclaration","scope":1664,"src":"3395:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1649,"name":"uint256","nodeType":"ElementaryTypeName","src":"3395:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3383:22:4"},"returnParameters":{"id":1654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1653,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1664,"src":"3429:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1652,"name":"uint256","nodeType":"ElementaryTypeName","src":"3429:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3428:9:4"},"scope":3035,"src":"3371:111:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1686,"nodeType":"Block","src":"3666:82:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1674,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1667,"src":"3721:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1675,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1669,"src":"3725:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3721:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1677,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3720:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1678,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1667,"src":"3731:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1679,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1669,"src":"3735:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3731:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1681,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3730:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":1682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3740:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"3730:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3720:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1673,"id":1685,"nodeType":"Return","src":"3713:28:4"}]},"documentation":{"id":1665,"nodeType":"StructuredDocumentation","src":"3488:102:4","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":1687,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"3604:7:4","nodeType":"FunctionDefinition","parameters":{"id":1670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1667,"mutability":"mutable","name":"a","nameLocation":"3620:1:4","nodeType":"VariableDeclaration","scope":1687,"src":"3612:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1666,"name":"uint256","nodeType":"ElementaryTypeName","src":"3612:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1669,"mutability":"mutable","name":"b","nameLocation":"3631:1:4","nodeType":"VariableDeclaration","scope":1687,"src":"3623:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1668,"name":"uint256","nodeType":"ElementaryTypeName","src":"3623:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3611:22:4"},"returnParameters":{"id":1673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1672,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1687,"src":"3657:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1671,"name":"uint256","nodeType":"ElementaryTypeName","src":"3657:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3656:9:4"},"scope":3035,"src":"3595:153:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1727,"nodeType":"Block","src":"4040:633:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1697,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1692,"src":"4054:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4059:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4054:6:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1708,"nodeType":"IfStatement","src":"4050:150:4","trueBody":{"id":1707,"nodeType":"Block","src":"4062:138:4","statements":[{"expression":{"arguments":[{"expression":{"id":1703,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"4166:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$229_$","typeString":"type(library Panic)"}},"id":1704,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4172:16:4","memberName":"DIVISION_BY_ZERO","nodeType":"MemberAccess","referencedDeclaration":196,"src":"4166:22:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1700,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"4154:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$229_$","typeString":"type(library Panic)"}},"id":1702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4160:5:4","memberName":"panic","nodeType":"MemberAccess","referencedDeclaration":228,"src":"4154:11:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4154:35:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1706,"nodeType":"ExpressionStatement","src":"4154:35:4"}]}},{"id":1726,"nodeType":"UncheckedBlock","src":"4583:84:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1711,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1690,"src":"4630:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4634:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4630:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":1709,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"4614:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$4800_$","typeString":"type(library SafeCast)"}},"id":1710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4623:6:4","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":4799,"src":"4614:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":1714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4614:22:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1715,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1690,"src":"4641:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4645:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4641:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1718,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4640:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1719,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1692,"src":"4650:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4640:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4654:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4640:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1723,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4639:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4614:42:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1696,"id":1725,"nodeType":"Return","src":"4607:49:4"}]}]},"documentation":{"id":1688,"nodeType":"StructuredDocumentation","src":"3754:210:4","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."},"id":1728,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"3978:7:4","nodeType":"FunctionDefinition","parameters":{"id":1693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1690,"mutability":"mutable","name":"a","nameLocation":"3994:1:4","nodeType":"VariableDeclaration","scope":1728,"src":"3986:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1689,"name":"uint256","nodeType":"ElementaryTypeName","src":"3986:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1692,"mutability":"mutable","name":"b","nameLocation":"4005:1:4","nodeType":"VariableDeclaration","scope":1728,"src":"3997:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1691,"name":"uint256","nodeType":"ElementaryTypeName","src":"3997:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3985:22:4"},"returnParameters":{"id":1696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1695,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1728,"src":"4031:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1694,"name":"uint256","nodeType":"ElementaryTypeName","src":"4031:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4030:9:4"},"scope":3035,"src":"3969:704:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1864,"nodeType":"Block","src":"5094:4128:4","statements":[{"id":1863,"nodeType":"UncheckedBlock","src":"5104:4112:4","statements":[{"assignments":[1741],"declarations":[{"constant":false,"id":1741,"mutability":"mutable","name":"prod0","nameLocation":"5441:5:4","nodeType":"VariableDeclaration","scope":1863,"src":"5433:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1740,"name":"uint256","nodeType":"ElementaryTypeName","src":"5433:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1745,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1742,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1731,"src":"5449:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1743,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1733,"src":"5453:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5449:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5433:21:4"},{"assignments":[1747],"declarations":[{"constant":false,"id":1747,"mutability":"mutable","name":"prod1","nameLocation":"5521:5:4","nodeType":"VariableDeclaration","scope":1863,"src":"5513:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1746,"name":"uint256","nodeType":"ElementaryTypeName","src":"5513:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1748,"nodeType":"VariableDeclarationStatement","src":"5513:13:4"},{"AST":{"nativeSrc":"5593:122:4","nodeType":"YulBlock","src":"5593:122:4","statements":[{"nativeSrc":"5611:30:4","nodeType":"YulVariableDeclaration","src":"5611:30:4","value":{"arguments":[{"name":"x","nativeSrc":"5628:1:4","nodeType":"YulIdentifier","src":"5628:1:4"},{"name":"y","nativeSrc":"5631:1:4","nodeType":"YulIdentifier","src":"5631:1:4"},{"arguments":[{"kind":"number","nativeSrc":"5638:1:4","nodeType":"YulLiteral","src":"5638:1:4","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"5634:3:4","nodeType":"YulIdentifier","src":"5634:3:4"},"nativeSrc":"5634:6:4","nodeType":"YulFunctionCall","src":"5634:6:4"}],"functionName":{"name":"mulmod","nativeSrc":"5621:6:4","nodeType":"YulIdentifier","src":"5621:6:4"},"nativeSrc":"5621:20:4","nodeType":"YulFunctionCall","src":"5621:20:4"},"variables":[{"name":"mm","nativeSrc":"5615:2:4","nodeType":"YulTypedName","src":"5615:2:4","type":""}]},{"nativeSrc":"5658:43:4","nodeType":"YulAssignment","src":"5658:43:4","value":{"arguments":[{"arguments":[{"name":"mm","nativeSrc":"5675:2:4","nodeType":"YulIdentifier","src":"5675:2:4"},{"name":"prod0","nativeSrc":"5679:5:4","nodeType":"YulIdentifier","src":"5679:5:4"}],"functionName":{"name":"sub","nativeSrc":"5671:3:4","nodeType":"YulIdentifier","src":"5671:3:4"},"nativeSrc":"5671:14:4","nodeType":"YulFunctionCall","src":"5671:14:4"},{"arguments":[{"name":"mm","nativeSrc":"5690:2:4","nodeType":"YulIdentifier","src":"5690:2:4"},{"name":"prod0","nativeSrc":"5694:5:4","nodeType":"YulIdentifier","src":"5694:5:4"}],"functionName":{"name":"lt","nativeSrc":"5687:2:4","nodeType":"YulIdentifier","src":"5687:2:4"},"nativeSrc":"5687:13:4","nodeType":"YulFunctionCall","src":"5687:13:4"}],"functionName":{"name":"sub","nativeSrc":"5667:3:4","nodeType":"YulIdentifier","src":"5667:3:4"},"nativeSrc":"5667:34:4","nodeType":"YulFunctionCall","src":"5667:34:4"},"variableNames":[{"name":"prod1","nativeSrc":"5658:5:4","nodeType":"YulIdentifier","src":"5658:5:4"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1741,"isOffset":false,"isSlot":false,"src":"5679:5:4","valueSize":1},{"declaration":1741,"isOffset":false,"isSlot":false,"src":"5694:5:4","valueSize":1},{"declaration":1747,"isOffset":false,"isSlot":false,"src":"5658:5:4","valueSize":1},{"declaration":1731,"isOffset":false,"isSlot":false,"src":"5628:1:4","valueSize":1},{"declaration":1733,"isOffset":false,"isSlot":false,"src":"5631:1:4","valueSize":1}],"id":1749,"nodeType":"InlineAssembly","src":"5584:131:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1750,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1747,"src":"5796:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5805:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5796:10:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1758,"nodeType":"IfStatement","src":"5792:368:4","trueBody":{"id":1757,"nodeType":"Block","src":"5808:352:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1753,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1741,"src":"6126:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1754,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1735,"src":"6134:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6126:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1739,"id":1756,"nodeType":"Return","src":"6119:26:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1759,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1735,"src":"6270:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":1760,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1747,"src":"6285:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6270:20:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1777,"nodeType":"IfStatement","src":"6266:143:4","trueBody":{"id":1776,"nodeType":"Block","src":"6292:117:4","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1766,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1735,"src":"6330:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6345:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6330:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"expression":{"id":1769,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"6348:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$229_$","typeString":"type(library Panic)"}},"id":1770,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6354:16:4","memberName":"DIVISION_BY_ZERO","nodeType":"MemberAccess","referencedDeclaration":196,"src":"6348:22:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1771,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"6372:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$229_$","typeString":"type(library Panic)"}},"id":1772,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6378:14:4","memberName":"UNDER_OVERFLOW","nodeType":"MemberAccess","referencedDeclaration":192,"src":"6372:20:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1765,"name":"ternary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1626,"src":"6322:7:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bool,uint256,uint256) pure returns (uint256)"}},"id":1773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6322:71:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1762,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"6310:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$229_$","typeString":"type(library Panic)"}},"id":1764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6316:5:4","memberName":"panic","nodeType":"MemberAccess","referencedDeclaration":228,"src":"6310:11:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1774,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6310:84:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1775,"nodeType":"ExpressionStatement","src":"6310:84:4"}]}},{"assignments":[1779],"declarations":[{"constant":false,"id":1779,"mutability":"mutable","name":"remainder","nameLocation":"6672:9:4","nodeType":"VariableDeclaration","scope":1863,"src":"6664:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1778,"name":"uint256","nodeType":"ElementaryTypeName","src":"6664:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1780,"nodeType":"VariableDeclarationStatement","src":"6664:17:4"},{"AST":{"nativeSrc":"6704:291:4","nodeType":"YulBlock","src":"6704:291:4","statements":[{"nativeSrc":"6773:38:4","nodeType":"YulAssignment","src":"6773:38:4","value":{"arguments":[{"name":"x","nativeSrc":"6793:1:4","nodeType":"YulIdentifier","src":"6793:1:4"},{"name":"y","nativeSrc":"6796:1:4","nodeType":"YulIdentifier","src":"6796:1:4"},{"name":"denominator","nativeSrc":"6799:11:4","nodeType":"YulIdentifier","src":"6799:11:4"}],"functionName":{"name":"mulmod","nativeSrc":"6786:6:4","nodeType":"YulIdentifier","src":"6786:6:4"},"nativeSrc":"6786:25:4","nodeType":"YulFunctionCall","src":"6786:25:4"},"variableNames":[{"name":"remainder","nativeSrc":"6773:9:4","nodeType":"YulIdentifier","src":"6773:9:4"}]},{"nativeSrc":"6893:41:4","nodeType":"YulAssignment","src":"6893:41:4","value":{"arguments":[{"name":"prod1","nativeSrc":"6906:5:4","nodeType":"YulIdentifier","src":"6906:5:4"},{"arguments":[{"name":"remainder","nativeSrc":"6916:9:4","nodeType":"YulIdentifier","src":"6916:9:4"},{"name":"prod0","nativeSrc":"6927:5:4","nodeType":"YulIdentifier","src":"6927:5:4"}],"functionName":{"name":"gt","nativeSrc":"6913:2:4","nodeType":"YulIdentifier","src":"6913:2:4"},"nativeSrc":"6913:20:4","nodeType":"YulFunctionCall","src":"6913:20:4"}],"functionName":{"name":"sub","nativeSrc":"6902:3:4","nodeType":"YulIdentifier","src":"6902:3:4"},"nativeSrc":"6902:32:4","nodeType":"YulFunctionCall","src":"6902:32:4"},"variableNames":[{"name":"prod1","nativeSrc":"6893:5:4","nodeType":"YulIdentifier","src":"6893:5:4"}]},{"nativeSrc":"6951:30:4","nodeType":"YulAssignment","src":"6951:30:4","value":{"arguments":[{"name":"prod0","nativeSrc":"6964:5:4","nodeType":"YulIdentifier","src":"6964:5:4"},{"name":"remainder","nativeSrc":"6971:9:4","nodeType":"YulIdentifier","src":"6971:9:4"}],"functionName":{"name":"sub","nativeSrc":"6960:3:4","nodeType":"YulIdentifier","src":"6960:3:4"},"nativeSrc":"6960:21:4","nodeType":"YulFunctionCall","src":"6960:21:4"},"variableNames":[{"name":"prod0","nativeSrc":"6951:5:4","nodeType":"YulIdentifier","src":"6951:5:4"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1735,"isOffset":false,"isSlot":false,"src":"6799:11:4","valueSize":1},{"declaration":1741,"isOffset":false,"isSlot":false,"src":"6927:5:4","valueSize":1},{"declaration":1741,"isOffset":false,"isSlot":false,"src":"6951:5:4","valueSize":1},{"declaration":1741,"isOffset":false,"isSlot":false,"src":"6964:5:4","valueSize":1},{"declaration":1747,"isOffset":false,"isSlot":false,"src":"6893:5:4","valueSize":1},{"declaration":1747,"isOffset":false,"isSlot":false,"src":"6906:5:4","valueSize":1},{"declaration":1779,"isOffset":false,"isSlot":false,"src":"6773:9:4","valueSize":1},{"declaration":1779,"isOffset":false,"isSlot":false,"src":"6916:9:4","valueSize":1},{"declaration":1779,"isOffset":false,"isSlot":false,"src":"6971:9:4","valueSize":1},{"declaration":1731,"isOffset":false,"isSlot":false,"src":"6793:1:4","valueSize":1},{"declaration":1733,"isOffset":false,"isSlot":false,"src":"6796:1:4","valueSize":1}],"id":1781,"nodeType":"InlineAssembly","src":"6695:300:4"},{"assignments":[1783],"declarations":[{"constant":false,"id":1783,"mutability":"mutable","name":"twos","nameLocation":"7207:4:4","nodeType":"VariableDeclaration","scope":1863,"src":"7199:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1782,"name":"uint256","nodeType":"ElementaryTypeName","src":"7199:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1790,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1784,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1735,"src":"7214:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"30","id":1785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7229:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1786,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1735,"src":"7233:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7229:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1788,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7228:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7214:31:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7199:46:4"},{"AST":{"nativeSrc":"7268:366:4","nodeType":"YulBlock","src":"7268:366:4","statements":[{"nativeSrc":"7333:37:4","nodeType":"YulAssignment","src":"7333:37:4","value":{"arguments":[{"name":"denominator","nativeSrc":"7352:11:4","nodeType":"YulIdentifier","src":"7352:11:4"},{"name":"twos","nativeSrc":"7365:4:4","nodeType":"YulIdentifier","src":"7365:4:4"}],"functionName":{"name":"div","nativeSrc":"7348:3:4","nodeType":"YulIdentifier","src":"7348:3:4"},"nativeSrc":"7348:22:4","nodeType":"YulFunctionCall","src":"7348:22:4"},"variableNames":[{"name":"denominator","nativeSrc":"7333:11:4","nodeType":"YulIdentifier","src":"7333:11:4"}]},{"nativeSrc":"7437:25:4","nodeType":"YulAssignment","src":"7437:25:4","value":{"arguments":[{"name":"prod0","nativeSrc":"7450:5:4","nodeType":"YulIdentifier","src":"7450:5:4"},{"name":"twos","nativeSrc":"7457:4:4","nodeType":"YulIdentifier","src":"7457:4:4"}],"functionName":{"name":"div","nativeSrc":"7446:3:4","nodeType":"YulIdentifier","src":"7446:3:4"},"nativeSrc":"7446:16:4","nodeType":"YulFunctionCall","src":"7446:16:4"},"variableNames":[{"name":"prod0","nativeSrc":"7437:5:4","nodeType":"YulIdentifier","src":"7437:5:4"}]},{"nativeSrc":"7581:39:4","nodeType":"YulAssignment","src":"7581:39:4","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"7601:1:4","nodeType":"YulLiteral","src":"7601:1:4","type":"","value":"0"},{"name":"twos","nativeSrc":"7604:4:4","nodeType":"YulIdentifier","src":"7604:4:4"}],"functionName":{"name":"sub","nativeSrc":"7597:3:4","nodeType":"YulIdentifier","src":"7597:3:4"},"nativeSrc":"7597:12:4","nodeType":"YulFunctionCall","src":"7597:12:4"},{"name":"twos","nativeSrc":"7611:4:4","nodeType":"YulIdentifier","src":"7611:4:4"}],"functionName":{"name":"div","nativeSrc":"7593:3:4","nodeType":"YulIdentifier","src":"7593:3:4"},"nativeSrc":"7593:23:4","nodeType":"YulFunctionCall","src":"7593:23:4"},{"kind":"number","nativeSrc":"7618:1:4","nodeType":"YulLiteral","src":"7618:1:4","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"7589:3:4","nodeType":"YulIdentifier","src":"7589:3:4"},"nativeSrc":"7589:31:4","nodeType":"YulFunctionCall","src":"7589:31:4"},"variableNames":[{"name":"twos","nativeSrc":"7581:4:4","nodeType":"YulIdentifier","src":"7581:4:4"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1735,"isOffset":false,"isSlot":false,"src":"7333:11:4","valueSize":1},{"declaration":1735,"isOffset":false,"isSlot":false,"src":"7352:11:4","valueSize":1},{"declaration":1741,"isOffset":false,"isSlot":false,"src":"7437:5:4","valueSize":1},{"declaration":1741,"isOffset":false,"isSlot":false,"src":"7450:5:4","valueSize":1},{"declaration":1783,"isOffset":false,"isSlot":false,"src":"7365:4:4","valueSize":1},{"declaration":1783,"isOffset":false,"isSlot":false,"src":"7457:4:4","valueSize":1},{"declaration":1783,"isOffset":false,"isSlot":false,"src":"7581:4:4","valueSize":1},{"declaration":1783,"isOffset":false,"isSlot":false,"src":"7604:4:4","valueSize":1},{"declaration":1783,"isOffset":false,"isSlot":false,"src":"7611:4:4","valueSize":1}],"id":1791,"nodeType":"InlineAssembly","src":"7259:375:4"},{"expression":{"id":1796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1792,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1741,"src":"7700:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1793,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1747,"src":"7709:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1794,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1783,"src":"7717:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7709:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7700:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1797,"nodeType":"ExpressionStatement","src":"7700:21:4"},{"assignments":[1799],"declarations":[{"constant":false,"id":1799,"mutability":"mutable","name":"inverse","nameLocation":"8064:7:4","nodeType":"VariableDeclaration","scope":1863,"src":"8056:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1798,"name":"uint256","nodeType":"ElementaryTypeName","src":"8056:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1806,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":1800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8075:1:4","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1801,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1735,"src":"8079:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8075:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1803,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8074:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":1804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8094:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"8074:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8056:39:4"},{"expression":{"id":1813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1807,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1799,"src":"8312:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8323:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1809,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1735,"src":"8327:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1810,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1799,"src":"8341:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8327:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8323:25:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8312:36:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1814,"nodeType":"ExpressionStatement","src":"8312:36:4"},{"expression":{"id":1821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1815,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1799,"src":"8382:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1816,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8393:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1817,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1735,"src":"8397:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1818,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1799,"src":"8411:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8397:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8393:25:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8382:36:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1822,"nodeType":"ExpressionStatement","src":"8382:36:4"},{"expression":{"id":1829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1823,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1799,"src":"8454:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8465:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1825,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1735,"src":"8469:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1826,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1799,"src":"8483:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8469:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8465:25:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8454:36:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1830,"nodeType":"ExpressionStatement","src":"8454:36:4"},{"expression":{"id":1837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1831,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1799,"src":"8525:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8536:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1833,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1735,"src":"8540:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1834,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1799,"src":"8554:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8540:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8536:25:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8525:36:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1838,"nodeType":"ExpressionStatement","src":"8525:36:4"},{"expression":{"id":1845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1839,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1799,"src":"8598:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8609:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1841,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1735,"src":"8613:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1842,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1799,"src":"8627:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8613:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8609:25:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8598:36:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1846,"nodeType":"ExpressionStatement","src":"8598:36:4"},{"expression":{"id":1853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1847,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1799,"src":"8672:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1848,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8683:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1849,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1735,"src":"8687:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1850,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1799,"src":"8701:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8687:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8683:25:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8672:36:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1854,"nodeType":"ExpressionStatement","src":"8672:36:4"},{"expression":{"id":1859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1855,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1738,"src":"9154:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1856,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1741,"src":"9163:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1857,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1799,"src":"9171:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9163:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9154:24:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1860,"nodeType":"ExpressionStatement","src":"9154:24:4"},{"expression":{"id":1861,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1738,"src":"9199:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1739,"id":1862,"nodeType":"Return","src":"9192:13:4"}]}]},"documentation":{"id":1729,"nodeType":"StructuredDocumentation","src":"4679:312:4","text":" @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."},"id":1865,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5005:6:4","nodeType":"FunctionDefinition","parameters":{"id":1736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1731,"mutability":"mutable","name":"x","nameLocation":"5020:1:4","nodeType":"VariableDeclaration","scope":1865,"src":"5012:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1730,"name":"uint256","nodeType":"ElementaryTypeName","src":"5012:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1733,"mutability":"mutable","name":"y","nameLocation":"5031:1:4","nodeType":"VariableDeclaration","scope":1865,"src":"5023:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1732,"name":"uint256","nodeType":"ElementaryTypeName","src":"5023:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1735,"mutability":"mutable","name":"denominator","nameLocation":"5042:11:4","nodeType":"VariableDeclaration","scope":1865,"src":"5034:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1734,"name":"uint256","nodeType":"ElementaryTypeName","src":"5034:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5011:43:4"},"returnParameters":{"id":1739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1738,"mutability":"mutable","name":"result","nameLocation":"5086:6:4","nodeType":"VariableDeclaration","scope":1865,"src":"5078:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1737,"name":"uint256","nodeType":"ElementaryTypeName","src":"5078:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5077:16:4"},"scope":3035,"src":"4996:4226:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1901,"nodeType":"Block","src":"9461:128:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1881,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1868,"src":"9485:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1882,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1870,"src":"9488:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1883,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1872,"src":"9491:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1880,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[1865,1902],"referencedDeclaration":1865,"src":"9478:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1884,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9478:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1888,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1875,"src":"9539:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1441","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1441","typeString":"enum Math.Rounding"}],"id":1887,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3034,"src":"9522:16:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1441_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":1889,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9522:26:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1891,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1868,"src":"9559:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1892,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1870,"src":"9562:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1893,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1872,"src":"9565:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1890,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"9552:6:4","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9552:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9580:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9552:29:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9522:59:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":1885,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"9506:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$4800_$","typeString":"type(library SafeCast)"}},"id":1886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9515:6:4","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":4799,"src":"9506:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":1898,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9506:76:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9478:104:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1879,"id":1900,"nodeType":"Return","src":"9471:111:4"}]},"documentation":{"id":1866,"nodeType":"StructuredDocumentation","src":"9228:118:4","text":" @dev Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":1902,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"9360:6:4","nodeType":"FunctionDefinition","parameters":{"id":1876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1868,"mutability":"mutable","name":"x","nameLocation":"9375:1:4","nodeType":"VariableDeclaration","scope":1902,"src":"9367:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1867,"name":"uint256","nodeType":"ElementaryTypeName","src":"9367:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1870,"mutability":"mutable","name":"y","nameLocation":"9386:1:4","nodeType":"VariableDeclaration","scope":1902,"src":"9378:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1869,"name":"uint256","nodeType":"ElementaryTypeName","src":"9378:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1872,"mutability":"mutable","name":"denominator","nameLocation":"9397:11:4","nodeType":"VariableDeclaration","scope":1902,"src":"9389:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1871,"name":"uint256","nodeType":"ElementaryTypeName","src":"9389:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1875,"mutability":"mutable","name":"rounding","nameLocation":"9419:8:4","nodeType":"VariableDeclaration","scope":1902,"src":"9410:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1441","typeString":"enum Math.Rounding"},"typeName":{"id":1874,"nodeType":"UserDefinedTypeName","pathNode":{"id":1873,"name":"Rounding","nameLocations":["9410:8:4"],"nodeType":"IdentifierPath","referencedDeclaration":1441,"src":"9410:8:4"},"referencedDeclaration":1441,"src":"9410:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1441","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9366:62:4"},"returnParameters":{"id":1879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1878,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1902,"src":"9452:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1877,"name":"uint256","nodeType":"ElementaryTypeName","src":"9452:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9451:9:4"},"scope":3035,"src":"9351:238:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1998,"nodeType":"Block","src":"10223:1849:4","statements":[{"id":1997,"nodeType":"UncheckedBlock","src":"10233:1833:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1912,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1907,"src":"10261:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10266:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10261:6:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1917,"nodeType":"IfStatement","src":"10257:20:4","trueBody":{"expression":{"hexValue":"30","id":1915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10276:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":1911,"id":1916,"nodeType":"Return","src":"10269:8:4"}},{"assignments":[1919],"declarations":[{"constant":false,"id":1919,"mutability":"mutable","name":"remainder","nameLocation":"10756:9:4","nodeType":"VariableDeclaration","scope":1997,"src":"10748:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1918,"name":"uint256","nodeType":"ElementaryTypeName","src":"10748:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1923,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1920,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"10768:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":1921,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1907,"src":"10772:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10768:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10748:25:4"},{"assignments":[1925],"declarations":[{"constant":false,"id":1925,"mutability":"mutable","name":"gcd","nameLocation":"10795:3:4","nodeType":"VariableDeclaration","scope":1997,"src":"10787:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1924,"name":"uint256","nodeType":"ElementaryTypeName","src":"10787:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1927,"initialValue":{"id":1926,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1907,"src":"10801:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10787:15:4"},{"assignments":[1929],"declarations":[{"constant":false,"id":1929,"mutability":"mutable","name":"x","nameLocation":"10945:1:4","nodeType":"VariableDeclaration","scope":1997,"src":"10938:8:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1928,"name":"int256","nodeType":"ElementaryTypeName","src":"10938:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":1931,"initialValue":{"hexValue":"30","id":1930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10949:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10938:12:4"},{"assignments":[1933],"declarations":[{"constant":false,"id":1933,"mutability":"mutable","name":"y","nameLocation":"10971:1:4","nodeType":"VariableDeclaration","scope":1997,"src":"10964:8:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1932,"name":"int256","nodeType":"ElementaryTypeName","src":"10964:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":1935,"initialValue":{"hexValue":"31","id":1934,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10975:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"VariableDeclarationStatement","src":"10964:12:4"},{"body":{"id":1972,"nodeType":"Block","src":"11014:882:4","statements":[{"assignments":[1940],"declarations":[{"constant":false,"id":1940,"mutability":"mutable","name":"quotient","nameLocation":"11040:8:4","nodeType":"VariableDeclaration","scope":1972,"src":"11032:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1939,"name":"uint256","nodeType":"ElementaryTypeName","src":"11032:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1944,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1941,"name":"gcd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1925,"src":"11051:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1942,"name":"remainder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"11057:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11051:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11032:34:4"},{"expression":{"id":1955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":1945,"name":"gcd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1925,"src":"11086:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1946,"name":"remainder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"11091:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1947,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"11085:16:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"id":1948,"name":"remainder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"11191:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1949,"name":"gcd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1925,"src":"11436:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1950,"name":"remainder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"11442:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1951,"name":"quotient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1940,"src":"11454:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11442:20:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11436:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1954,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11104:376:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"11085:395:4","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1956,"nodeType":"ExpressionStatement","src":"11085:395:4"},{"expression":{"id":1970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":1957,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1929,"src":"11500:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"id":1958,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"11503:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1959,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"11499:6:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_int256_$_t_int256_$","typeString":"tuple(int256,int256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"id":1960,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"11585:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1961,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1929,"src":"11839:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1962,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"11843:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"id":1965,"name":"quotient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1940,"src":"11854:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1964,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11847:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":1963,"name":"int256","nodeType":"ElementaryTypeName","src":"11847:6:4","typeDescriptions":{}}},"id":1966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11847:16:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11843:20:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11839:24:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1969,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11508:373:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_int256_$_t_int256_$","typeString":"tuple(int256,int256)"}},"src":"11499:382:4","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1971,"nodeType":"ExpressionStatement","src":"11499:382:4"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1936,"name":"remainder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"10998:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1937,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11011:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10998:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1973,"nodeType":"WhileStatement","src":"10991:905:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1974,"name":"gcd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1925,"src":"11914:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"31","id":1975,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11921:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11914:8:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1979,"nodeType":"IfStatement","src":"11910:22:4","trueBody":{"expression":{"hexValue":"30","id":1977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11931:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":1911,"id":1978,"nodeType":"Return","src":"11924:8:4"}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1981,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1929,"src":"11983:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1982,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11987:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11983:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1984,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1907,"src":"11990:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[{"id":1988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"12002:2:4","subExpression":{"id":1987,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1929,"src":"12003:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1986,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11994:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1985,"name":"uint256","nodeType":"ElementaryTypeName","src":"11994:7:4","typeDescriptions":{}}},"id":1989,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11994:11:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11990:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":1993,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1929,"src":"12015:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1992,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12007:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1991,"name":"uint256","nodeType":"ElementaryTypeName","src":"12007:7:4","typeDescriptions":{}}},"id":1994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12007:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1980,"name":"ternary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1626,"src":"11975:7:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bool,uint256,uint256) pure returns (uint256)"}},"id":1995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11975:43:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1911,"id":1996,"nodeType":"Return","src":"11968:50:4"}]}]},"documentation":{"id":1903,"nodeType":"StructuredDocumentation","src":"9595:553:4","text":" @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\n If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\n If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\n If the input value is not inversible, 0 is returned.\n NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\n inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}."},"id":1999,"implemented":true,"kind":"function","modifiers":[],"name":"invMod","nameLocation":"10162:6:4","nodeType":"FunctionDefinition","parameters":{"id":1908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1905,"mutability":"mutable","name":"a","nameLocation":"10177:1:4","nodeType":"VariableDeclaration","scope":1999,"src":"10169:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1904,"name":"uint256","nodeType":"ElementaryTypeName","src":"10169:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1907,"mutability":"mutable","name":"n","nameLocation":"10188:1:4","nodeType":"VariableDeclaration","scope":1999,"src":"10180:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1906,"name":"uint256","nodeType":"ElementaryTypeName","src":"10180:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10168:22:4"},"returnParameters":{"id":1911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1910,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1999,"src":"10214:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1909,"name":"uint256","nodeType":"ElementaryTypeName","src":"10214:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10213:9:4"},"scope":3035,"src":"10153:1919:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2019,"nodeType":"Block","src":"12672:82:4","statements":[{"id":2018,"nodeType":"UncheckedBlock","src":"12682:66:4","statements":[{"expression":{"arguments":[{"id":2011,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"12725:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2012,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2004,"src":"12728:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"32","id":2013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12732:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12728:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2015,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2004,"src":"12735:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2009,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3035,"src":"12713:4:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3035_$","typeString":"type(library Math)"}},"id":2010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12718:6:4","memberName":"modExp","nodeType":"MemberAccess","referencedDeclaration":2056,"src":"12713:11:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) view returns (uint256)"}},"id":2016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12713:24:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2008,"id":2017,"nodeType":"Return","src":"12706:31:4"}]}]},"documentation":{"id":2000,"nodeType":"StructuredDocumentation","src":"12078:514:4","text":" @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\n From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\n prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that\n `a**(p-2)` is the modular multiplicative inverse of a in Fp.\n NOTE: this function does NOT check that `p` is a prime greater than `2`."},"id":2020,"implemented":true,"kind":"function","modifiers":[],"name":"invModPrime","nameLocation":"12606:11:4","nodeType":"FunctionDefinition","parameters":{"id":2005,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2002,"mutability":"mutable","name":"a","nameLocation":"12626:1:4","nodeType":"VariableDeclaration","scope":2020,"src":"12618:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2001,"name":"uint256","nodeType":"ElementaryTypeName","src":"12618:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2004,"mutability":"mutable","name":"p","nameLocation":"12637:1:4","nodeType":"VariableDeclaration","scope":2020,"src":"12629:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2003,"name":"uint256","nodeType":"ElementaryTypeName","src":"12629:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12617:22:4"},"returnParameters":{"id":2008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2007,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2020,"src":"12663:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2006,"name":"uint256","nodeType":"ElementaryTypeName","src":"12663:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12662:9:4"},"scope":3035,"src":"12597:157:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2055,"nodeType":"Block","src":"13524:174:4","statements":[{"assignments":[2033,2035],"declarations":[{"constant":false,"id":2033,"mutability":"mutable","name":"success","nameLocation":"13540:7:4","nodeType":"VariableDeclaration","scope":2055,"src":"13535:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2032,"name":"bool","nodeType":"ElementaryTypeName","src":"13535:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2035,"mutability":"mutable","name":"result","nameLocation":"13557:6:4","nodeType":"VariableDeclaration","scope":2055,"src":"13549:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2034,"name":"uint256","nodeType":"ElementaryTypeName","src":"13549:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2041,"initialValue":{"arguments":[{"id":2037,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2023,"src":"13577:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2038,"name":"e","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2025,"src":"13580:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2039,"name":"m","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"13583:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2036,"name":"tryModExp","nodeType":"Identifier","overloadedDeclarations":[2080,2162],"referencedDeclaration":2080,"src":"13567:9:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (uint256,uint256,uint256) view returns (bool,uint256)"}},"id":2040,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13567:18:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"13534:51:4"},{"condition":{"id":2043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"13599:8:4","subExpression":{"id":2042,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2033,"src":"13600:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2052,"nodeType":"IfStatement","src":"13595:74:4","trueBody":{"id":2051,"nodeType":"Block","src":"13609:60:4","statements":[{"expression":{"arguments":[{"expression":{"id":2047,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"13635:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$229_$","typeString":"type(library Panic)"}},"id":2048,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13641:16:4","memberName":"DIVISION_BY_ZERO","nodeType":"MemberAccess","referencedDeclaration":196,"src":"13635:22:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2044,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"13623:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$229_$","typeString":"type(library Panic)"}},"id":2046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13629:5:4","memberName":"panic","nodeType":"MemberAccess","referencedDeclaration":228,"src":"13623:11:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13623:35:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2050,"nodeType":"ExpressionStatement","src":"13623:35:4"}]}},{"expression":{"id":2053,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2035,"src":"13685:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2031,"id":2054,"nodeType":"Return","src":"13678:13:4"}]},"documentation":{"id":2021,"nodeType":"StructuredDocumentation","src":"12760:678:4","text":" @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\n Requirements:\n - modulus can't be zero\n - underlying staticcall to precompile must succeed\n IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\n sure the chain you're using it on supports the precompiled contract for modular exponentiation\n at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\n the underlying function will succeed given the lack of a revert, but the result may be incorrectly\n interpreted as 0."},"id":2056,"implemented":true,"kind":"function","modifiers":[],"name":"modExp","nameLocation":"13452:6:4","nodeType":"FunctionDefinition","parameters":{"id":2028,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2023,"mutability":"mutable","name":"b","nameLocation":"13467:1:4","nodeType":"VariableDeclaration","scope":2056,"src":"13459:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2022,"name":"uint256","nodeType":"ElementaryTypeName","src":"13459:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2025,"mutability":"mutable","name":"e","nameLocation":"13478:1:4","nodeType":"VariableDeclaration","scope":2056,"src":"13470:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2024,"name":"uint256","nodeType":"ElementaryTypeName","src":"13470:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2027,"mutability":"mutable","name":"m","nameLocation":"13489:1:4","nodeType":"VariableDeclaration","scope":2056,"src":"13481:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2026,"name":"uint256","nodeType":"ElementaryTypeName","src":"13481:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13458:33:4"},"returnParameters":{"id":2031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2030,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2056,"src":"13515:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2029,"name":"uint256","nodeType":"ElementaryTypeName","src":"13515:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13514:9:4"},"scope":3035,"src":"13443:255:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2079,"nodeType":"Block","src":"14552:1493:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2070,"name":"m","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2063,"src":"14566:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14571:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14566:6:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2077,"nodeType":"IfStatement","src":"14562:29:4","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14582:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14589:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2075,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"14581:10:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2069,"id":2076,"nodeType":"Return","src":"14574:17:4"}},{"AST":{"nativeSrc":"14626:1413:4","nodeType":"YulBlock","src":"14626:1413:4","statements":[{"nativeSrc":"14640:22:4","nodeType":"YulVariableDeclaration","src":"14640:22:4","value":{"arguments":[{"kind":"number","nativeSrc":"14657:4:4","nodeType":"YulLiteral","src":"14657:4:4","type":"","value":"0x40"}],"functionName":{"name":"mload","nativeSrc":"14651:5:4","nodeType":"YulIdentifier","src":"14651:5:4"},"nativeSrc":"14651:11:4","nodeType":"YulFunctionCall","src":"14651:11:4"},"variables":[{"name":"ptr","nativeSrc":"14644:3:4","nodeType":"YulTypedName","src":"14644:3:4","type":""}]},{"expression":{"arguments":[{"name":"ptr","nativeSrc":"15570:3:4","nodeType":"YulIdentifier","src":"15570:3:4"},{"kind":"number","nativeSrc":"15575:4:4","nodeType":"YulLiteral","src":"15575:4:4","type":"","value":"0x20"}],"functionName":{"name":"mstore","nativeSrc":"15563:6:4","nodeType":"YulIdentifier","src":"15563:6:4"},"nativeSrc":"15563:17:4","nodeType":"YulFunctionCall","src":"15563:17:4"},"nativeSrc":"15563:17:4","nodeType":"YulExpressionStatement","src":"15563:17:4"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"15604:3:4","nodeType":"YulIdentifier","src":"15604:3:4"},{"kind":"number","nativeSrc":"15609:4:4","nodeType":"YulLiteral","src":"15609:4:4","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"15600:3:4","nodeType":"YulIdentifier","src":"15600:3:4"},"nativeSrc":"15600:14:4","nodeType":"YulFunctionCall","src":"15600:14:4"},{"kind":"number","nativeSrc":"15616:4:4","nodeType":"YulLiteral","src":"15616:4:4","type":"","value":"0x20"}],"functionName":{"name":"mstore","nativeSrc":"15593:6:4","nodeType":"YulIdentifier","src":"15593:6:4"},"nativeSrc":"15593:28:4","nodeType":"YulFunctionCall","src":"15593:28:4"},"nativeSrc":"15593:28:4","nodeType":"YulExpressionStatement","src":"15593:28:4"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"15645:3:4","nodeType":"YulIdentifier","src":"15645:3:4"},{"kind":"number","nativeSrc":"15650:4:4","nodeType":"YulLiteral","src":"15650:4:4","type":"","value":"0x40"}],"functionName":{"name":"add","nativeSrc":"15641:3:4","nodeType":"YulIdentifier","src":"15641:3:4"},"nativeSrc":"15641:14:4","nodeType":"YulFunctionCall","src":"15641:14:4"},{"kind":"number","nativeSrc":"15657:4:4","nodeType":"YulLiteral","src":"15657:4:4","type":"","value":"0x20"}],"functionName":{"name":"mstore","nativeSrc":"15634:6:4","nodeType":"YulIdentifier","src":"15634:6:4"},"nativeSrc":"15634:28:4","nodeType":"YulFunctionCall","src":"15634:28:4"},"nativeSrc":"15634:28:4","nodeType":"YulExpressionStatement","src":"15634:28:4"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"15686:3:4","nodeType":"YulIdentifier","src":"15686:3:4"},{"kind":"number","nativeSrc":"15691:4:4","nodeType":"YulLiteral","src":"15691:4:4","type":"","value":"0x60"}],"functionName":{"name":"add","nativeSrc":"15682:3:4","nodeType":"YulIdentifier","src":"15682:3:4"},"nativeSrc":"15682:14:4","nodeType":"YulFunctionCall","src":"15682:14:4"},{"name":"b","nativeSrc":"15698:1:4","nodeType":"YulIdentifier","src":"15698:1:4"}],"functionName":{"name":"mstore","nativeSrc":"15675:6:4","nodeType":"YulIdentifier","src":"15675:6:4"},"nativeSrc":"15675:25:4","nodeType":"YulFunctionCall","src":"15675:25:4"},"nativeSrc":"15675:25:4","nodeType":"YulExpressionStatement","src":"15675:25:4"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"15724:3:4","nodeType":"YulIdentifier","src":"15724:3:4"},{"kind":"number","nativeSrc":"15729:4:4","nodeType":"YulLiteral","src":"15729:4:4","type":"","value":"0x80"}],"functionName":{"name":"add","nativeSrc":"15720:3:4","nodeType":"YulIdentifier","src":"15720:3:4"},"nativeSrc":"15720:14:4","nodeType":"YulFunctionCall","src":"15720:14:4"},{"name":"e","nativeSrc":"15736:1:4","nodeType":"YulIdentifier","src":"15736:1:4"}],"functionName":{"name":"mstore","nativeSrc":"15713:6:4","nodeType":"YulIdentifier","src":"15713:6:4"},"nativeSrc":"15713:25:4","nodeType":"YulFunctionCall","src":"15713:25:4"},"nativeSrc":"15713:25:4","nodeType":"YulExpressionStatement","src":"15713:25:4"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"15762:3:4","nodeType":"YulIdentifier","src":"15762:3:4"},{"kind":"number","nativeSrc":"15767:4:4","nodeType":"YulLiteral","src":"15767:4:4","type":"","value":"0xa0"}],"functionName":{"name":"add","nativeSrc":"15758:3:4","nodeType":"YulIdentifier","src":"15758:3:4"},"nativeSrc":"15758:14:4","nodeType":"YulFunctionCall","src":"15758:14:4"},{"name":"m","nativeSrc":"15774:1:4","nodeType":"YulIdentifier","src":"15774:1:4"}],"functionName":{"name":"mstore","nativeSrc":"15751:6:4","nodeType":"YulIdentifier","src":"15751:6:4"},"nativeSrc":"15751:25:4","nodeType":"YulFunctionCall","src":"15751:25:4"},"nativeSrc":"15751:25:4","nodeType":"YulExpressionStatement","src":"15751:25:4"},{"nativeSrc":"15938:57:4","nodeType":"YulAssignment","src":"15938:57:4","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nativeSrc":"15960:3:4","nodeType":"YulIdentifier","src":"15960:3:4"},"nativeSrc":"15960:5:4","nodeType":"YulFunctionCall","src":"15960:5:4"},{"kind":"number","nativeSrc":"15967:4:4","nodeType":"YulLiteral","src":"15967:4:4","type":"","value":"0x05"},{"name":"ptr","nativeSrc":"15973:3:4","nodeType":"YulIdentifier","src":"15973:3:4"},{"kind":"number","nativeSrc":"15978:4:4","nodeType":"YulLiteral","src":"15978:4:4","type":"","value":"0xc0"},{"kind":"number","nativeSrc":"15984:4:4","nodeType":"YulLiteral","src":"15984:4:4","type":"","value":"0x00"},{"kind":"number","nativeSrc":"15990:4:4","nodeType":"YulLiteral","src":"15990:4:4","type":"","value":"0x20"}],"functionName":{"name":"staticcall","nativeSrc":"15949:10:4","nodeType":"YulIdentifier","src":"15949:10:4"},"nativeSrc":"15949:46:4","nodeType":"YulFunctionCall","src":"15949:46:4"},"variableNames":[{"name":"success","nativeSrc":"15938:7:4","nodeType":"YulIdentifier","src":"15938:7:4"}]},{"nativeSrc":"16008:21:4","nodeType":"YulAssignment","src":"16008:21:4","value":{"arguments":[{"kind":"number","nativeSrc":"16024:4:4","nodeType":"YulLiteral","src":"16024:4:4","type":"","value":"0x00"}],"functionName":{"name":"mload","nativeSrc":"16018:5:4","nodeType":"YulIdentifier","src":"16018:5:4"},"nativeSrc":"16018:11:4","nodeType":"YulFunctionCall","src":"16018:11:4"},"variableNames":[{"name":"result","nativeSrc":"16008:6:4","nodeType":"YulIdentifier","src":"16008:6:4"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2059,"isOffset":false,"isSlot":false,"src":"15698:1:4","valueSize":1},{"declaration":2061,"isOffset":false,"isSlot":false,"src":"15736:1:4","valueSize":1},{"declaration":2063,"isOffset":false,"isSlot":false,"src":"15774:1:4","valueSize":1},{"declaration":2068,"isOffset":false,"isSlot":false,"src":"16008:6:4","valueSize":1},{"declaration":2066,"isOffset":false,"isSlot":false,"src":"15938:7:4","valueSize":1}],"flags":["memory-safe"],"id":2078,"nodeType":"InlineAssembly","src":"14601:1438:4"}]},"documentation":{"id":2057,"nodeType":"StructuredDocumentation","src":"13704:738:4","text":" @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\n It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\n to operate modulo 0 or if the underlying precompile reverted.\n IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\n you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\n https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\n of a revert, but the result may be incorrectly interpreted as 0."},"id":2080,"implemented":true,"kind":"function","modifiers":[],"name":"tryModExp","nameLocation":"14456:9:4","nodeType":"FunctionDefinition","parameters":{"id":2064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2059,"mutability":"mutable","name":"b","nameLocation":"14474:1:4","nodeType":"VariableDeclaration","scope":2080,"src":"14466:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2058,"name":"uint256","nodeType":"ElementaryTypeName","src":"14466:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2061,"mutability":"mutable","name":"e","nameLocation":"14485:1:4","nodeType":"VariableDeclaration","scope":2080,"src":"14477:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2060,"name":"uint256","nodeType":"ElementaryTypeName","src":"14477:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2063,"mutability":"mutable","name":"m","nameLocation":"14496:1:4","nodeType":"VariableDeclaration","scope":2080,"src":"14488:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2062,"name":"uint256","nodeType":"ElementaryTypeName","src":"14488:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14465:33:4"},"returnParameters":{"id":2069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2066,"mutability":"mutable","name":"success","nameLocation":"14527:7:4","nodeType":"VariableDeclaration","scope":2080,"src":"14522:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2065,"name":"bool","nodeType":"ElementaryTypeName","src":"14522:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2068,"mutability":"mutable","name":"result","nameLocation":"14544:6:4","nodeType":"VariableDeclaration","scope":2080,"src":"14536:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2067,"name":"uint256","nodeType":"ElementaryTypeName","src":"14536:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14521:30:4"},"scope":3035,"src":"14447:1598:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2115,"nodeType":"Block","src":"16242:179:4","statements":[{"assignments":[2093,2095],"declarations":[{"constant":false,"id":2093,"mutability":"mutable","name":"success","nameLocation":"16258:7:4","nodeType":"VariableDeclaration","scope":2115,"src":"16253:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2092,"name":"bool","nodeType":"ElementaryTypeName","src":"16253:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2095,"mutability":"mutable","name":"result","nameLocation":"16280:6:4","nodeType":"VariableDeclaration","scope":2115,"src":"16267:19:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2094,"name":"bytes","nodeType":"ElementaryTypeName","src":"16267:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2101,"initialValue":{"arguments":[{"id":2097,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2083,"src":"16300:1:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2098,"name":"e","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2085,"src":"16303:1:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2099,"name":"m","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2087,"src":"16306:1:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2096,"name":"tryModExp","nodeType":"Identifier","overloadedDeclarations":[2080,2162],"referencedDeclaration":2162,"src":"16290:9:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,bytes memory,bytes memory) view returns (bool,bytes memory)"}},"id":2100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16290:18:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"16252:56:4"},{"condition":{"id":2103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"16322:8:4","subExpression":{"id":2102,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2093,"src":"16323:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2112,"nodeType":"IfStatement","src":"16318:74:4","trueBody":{"id":2111,"nodeType":"Block","src":"16332:60:4","statements":[{"expression":{"arguments":[{"expression":{"id":2107,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"16358:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$229_$","typeString":"type(library Panic)"}},"id":2108,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16364:16:4","memberName":"DIVISION_BY_ZERO","nodeType":"MemberAccess","referencedDeclaration":196,"src":"16358:22:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2104,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"16346:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$229_$","typeString":"type(library Panic)"}},"id":2106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16352:5:4","memberName":"panic","nodeType":"MemberAccess","referencedDeclaration":228,"src":"16346:11:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16346:35:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2110,"nodeType":"ExpressionStatement","src":"16346:35:4"}]}},{"expression":{"id":2113,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"16408:6:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2091,"id":2114,"nodeType":"Return","src":"16401:13:4"}]},"documentation":{"id":2081,"nodeType":"StructuredDocumentation","src":"16051:85:4","text":" @dev Variant of {modExp} that supports inputs of arbitrary length."},"id":2116,"implemented":true,"kind":"function","modifiers":[],"name":"modExp","nameLocation":"16150:6:4","nodeType":"FunctionDefinition","parameters":{"id":2088,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2083,"mutability":"mutable","name":"b","nameLocation":"16170:1:4","nodeType":"VariableDeclaration","scope":2116,"src":"16157:14:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2082,"name":"bytes","nodeType":"ElementaryTypeName","src":"16157:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2085,"mutability":"mutable","name":"e","nameLocation":"16186:1:4","nodeType":"VariableDeclaration","scope":2116,"src":"16173:14:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2084,"name":"bytes","nodeType":"ElementaryTypeName","src":"16173:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2087,"mutability":"mutable","name":"m","nameLocation":"16202:1:4","nodeType":"VariableDeclaration","scope":2116,"src":"16189:14:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2086,"name":"bytes","nodeType":"ElementaryTypeName","src":"16189:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16156:48:4"},"returnParameters":{"id":2091,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2090,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2116,"src":"16228:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2089,"name":"bytes","nodeType":"ElementaryTypeName","src":"16228:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16227:14:4"},"scope":3035,"src":"16141:280:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2161,"nodeType":"Block","src":"16675:771:4","statements":[{"condition":{"arguments":[{"id":2131,"name":"m","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2123,"src":"16700:1:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2130,"name":"_zeroBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2195,"src":"16689:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (bytes memory) pure returns (bool)"}},"id":2132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16689:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2140,"nodeType":"IfStatement","src":"16685:47:4","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"16712:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"arguments":[{"hexValue":"30","id":2136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16729:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2135,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"16719:9:4","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":2134,"name":"bytes","nodeType":"ElementaryTypeName","src":"16723:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":2137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16719:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"id":2138,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"16711:21:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"functionReturnParameters":2129,"id":2139,"nodeType":"Return","src":"16704:28:4"}},{"assignments":[2142],"declarations":[{"constant":false,"id":2142,"mutability":"mutable","name":"mLen","nameLocation":"16751:4:4","nodeType":"VariableDeclaration","scope":2161,"src":"16743:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2141,"name":"uint256","nodeType":"ElementaryTypeName","src":"16743:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2145,"initialValue":{"expression":{"id":2143,"name":"m","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2123,"src":"16758:1:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16760:6:4","memberName":"length","nodeType":"MemberAccess","src":"16758:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16743:23:4"},{"expression":{"id":2158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2146,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"16848:6:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":2149,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"16874:1:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16876:6:4","memberName":"length","nodeType":"MemberAccess","src":"16874:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2151,"name":"e","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2121,"src":"16884:1:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16886:6:4","memberName":"length","nodeType":"MemberAccess","src":"16884:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2153,"name":"mLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2142,"src":"16894:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2154,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"16900:1:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2155,"name":"e","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2121,"src":"16903:1:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2156,"name":"m","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2123,"src":"16906:1:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2147,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"16857:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2148,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16861:12:4","memberName":"encodePacked","nodeType":"MemberAccess","src":"16857:16:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16857:51:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"16848:60:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2159,"nodeType":"ExpressionStatement","src":"16848:60:4"},{"AST":{"nativeSrc":"16944:496:4","nodeType":"YulBlock","src":"16944:496:4","statements":[{"nativeSrc":"16958:32:4","nodeType":"YulVariableDeclaration","src":"16958:32:4","value":{"arguments":[{"name":"result","nativeSrc":"16977:6:4","nodeType":"YulIdentifier","src":"16977:6:4"},{"kind":"number","nativeSrc":"16985:4:4","nodeType":"YulLiteral","src":"16985:4:4","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"16973:3:4","nodeType":"YulIdentifier","src":"16973:3:4"},"nativeSrc":"16973:17:4","nodeType":"YulFunctionCall","src":"16973:17:4"},"variables":[{"name":"dataPtr","nativeSrc":"16962:7:4","nodeType":"YulTypedName","src":"16962:7:4","type":""}]},{"nativeSrc":"17080:73:4","nodeType":"YulAssignment","src":"17080:73:4","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nativeSrc":"17102:3:4","nodeType":"YulIdentifier","src":"17102:3:4"},"nativeSrc":"17102:5:4","nodeType":"YulFunctionCall","src":"17102:5:4"},{"kind":"number","nativeSrc":"17109:4:4","nodeType":"YulLiteral","src":"17109:4:4","type":"","value":"0x05"},{"name":"dataPtr","nativeSrc":"17115:7:4","nodeType":"YulIdentifier","src":"17115:7:4"},{"arguments":[{"name":"result","nativeSrc":"17130:6:4","nodeType":"YulIdentifier","src":"17130:6:4"}],"functionName":{"name":"mload","nativeSrc":"17124:5:4","nodeType":"YulIdentifier","src":"17124:5:4"},"nativeSrc":"17124:13:4","nodeType":"YulFunctionCall","src":"17124:13:4"},{"name":"dataPtr","nativeSrc":"17139:7:4","nodeType":"YulIdentifier","src":"17139:7:4"},{"name":"mLen","nativeSrc":"17148:4:4","nodeType":"YulIdentifier","src":"17148:4:4"}],"functionName":{"name":"staticcall","nativeSrc":"17091:10:4","nodeType":"YulIdentifier","src":"17091:10:4"},"nativeSrc":"17091:62:4","nodeType":"YulFunctionCall","src":"17091:62:4"},"variableNames":[{"name":"success","nativeSrc":"17080:7:4","nodeType":"YulIdentifier","src":"17080:7:4"}]},{"expression":{"arguments":[{"name":"result","nativeSrc":"17309:6:4","nodeType":"YulIdentifier","src":"17309:6:4"},{"name":"mLen","nativeSrc":"17317:4:4","nodeType":"YulIdentifier","src":"17317:4:4"}],"functionName":{"name":"mstore","nativeSrc":"17302:6:4","nodeType":"YulIdentifier","src":"17302:6:4"},"nativeSrc":"17302:20:4","nodeType":"YulFunctionCall","src":"17302:20:4"},"nativeSrc":"17302:20:4","nodeType":"YulExpressionStatement","src":"17302:20:4"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"17405:4:4","nodeType":"YulLiteral","src":"17405:4:4","type":"","value":"0x40"},{"arguments":[{"name":"dataPtr","nativeSrc":"17415:7:4","nodeType":"YulIdentifier","src":"17415:7:4"},{"name":"mLen","nativeSrc":"17424:4:4","nodeType":"YulIdentifier","src":"17424:4:4"}],"functionName":{"name":"add","nativeSrc":"17411:3:4","nodeType":"YulIdentifier","src":"17411:3:4"},"nativeSrc":"17411:18:4","nodeType":"YulFunctionCall","src":"17411:18:4"}],"functionName":{"name":"mstore","nativeSrc":"17398:6:4","nodeType":"YulIdentifier","src":"17398:6:4"},"nativeSrc":"17398:32:4","nodeType":"YulFunctionCall","src":"17398:32:4"},"nativeSrc":"17398:32:4","nodeType":"YulExpressionStatement","src":"17398:32:4"}]},"evmVersion":"paris","externalReferences":[{"declaration":2142,"isOffset":false,"isSlot":false,"src":"17148:4:4","valueSize":1},{"declaration":2142,"isOffset":false,"isSlot":false,"src":"17317:4:4","valueSize":1},{"declaration":2142,"isOffset":false,"isSlot":false,"src":"17424:4:4","valueSize":1},{"declaration":2128,"isOffset":false,"isSlot":false,"src":"16977:6:4","valueSize":1},{"declaration":2128,"isOffset":false,"isSlot":false,"src":"17130:6:4","valueSize":1},{"declaration":2128,"isOffset":false,"isSlot":false,"src":"17309:6:4","valueSize":1},{"declaration":2126,"isOffset":false,"isSlot":false,"src":"17080:7:4","valueSize":1}],"flags":["memory-safe"],"id":2160,"nodeType":"InlineAssembly","src":"16919:521:4"}]},"documentation":{"id":2117,"nodeType":"StructuredDocumentation","src":"16427:88:4","text":" @dev Variant of {tryModExp} that supports inputs of arbitrary length."},"id":2162,"implemented":true,"kind":"function","modifiers":[],"name":"tryModExp","nameLocation":"16529:9:4","nodeType":"FunctionDefinition","parameters":{"id":2124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2119,"mutability":"mutable","name":"b","nameLocation":"16561:1:4","nodeType":"VariableDeclaration","scope":2162,"src":"16548:14:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2118,"name":"bytes","nodeType":"ElementaryTypeName","src":"16548:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2121,"mutability":"mutable","name":"e","nameLocation":"16585:1:4","nodeType":"VariableDeclaration","scope":2162,"src":"16572:14:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2120,"name":"bytes","nodeType":"ElementaryTypeName","src":"16572:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2123,"mutability":"mutable","name":"m","nameLocation":"16609:1:4","nodeType":"VariableDeclaration","scope":2162,"src":"16596:14:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2122,"name":"bytes","nodeType":"ElementaryTypeName","src":"16596:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16538:78:4"},"returnParameters":{"id":2129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2126,"mutability":"mutable","name":"success","nameLocation":"16645:7:4","nodeType":"VariableDeclaration","scope":2162,"src":"16640:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2125,"name":"bool","nodeType":"ElementaryTypeName","src":"16640:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2128,"mutability":"mutable","name":"result","nameLocation":"16667:6:4","nodeType":"VariableDeclaration","scope":2162,"src":"16654:19:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2127,"name":"bytes","nodeType":"ElementaryTypeName","src":"16654:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16639:35:4"},"scope":3035,"src":"16520:926:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2194,"nodeType":"Block","src":"17601:176:4","statements":[{"body":{"id":2190,"nodeType":"Block","src":"17658:92:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":2185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2181,"name":"byteArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2165,"src":"17676:9:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2183,"indexExpression":{"id":2182,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2171,"src":"17686:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17676:12:4","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17692:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17676:17:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2189,"nodeType":"IfStatement","src":"17672:68:4","trueBody":{"id":2188,"nodeType":"Block","src":"17695:45:4","statements":[{"expression":{"hexValue":"66616c7365","id":2186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"17720:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":2169,"id":2187,"nodeType":"Return","src":"17713:12:4"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2174,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2171,"src":"17631:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2175,"name":"byteArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2165,"src":"17635:9:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17645:6:4","memberName":"length","nodeType":"MemberAccess","src":"17635:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17631:20:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2191,"initializationExpression":{"assignments":[2171],"declarations":[{"constant":false,"id":2171,"mutability":"mutable","name":"i","nameLocation":"17624:1:4","nodeType":"VariableDeclaration","scope":2191,"src":"17616:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2170,"name":"uint256","nodeType":"ElementaryTypeName","src":"17616:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2173,"initialValue":{"hexValue":"30","id":2172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17628:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"17616:13:4"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"17653:3:4","subExpression":{"id":2178,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2171,"src":"17655:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2180,"nodeType":"ExpressionStatement","src":"17653:3:4"},"nodeType":"ForStatement","src":"17611:139:4"},{"expression":{"hexValue":"74727565","id":2192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"17766:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2169,"id":2193,"nodeType":"Return","src":"17759:11:4"}]},"documentation":{"id":2163,"nodeType":"StructuredDocumentation","src":"17452:72:4","text":" @dev Returns whether the provided byte array is zero."},"id":2195,"implemented":true,"kind":"function","modifiers":[],"name":"_zeroBytes","nameLocation":"17538:10:4","nodeType":"FunctionDefinition","parameters":{"id":2166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2165,"mutability":"mutable","name":"byteArray","nameLocation":"17562:9:4","nodeType":"VariableDeclaration","scope":2195,"src":"17549:22:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2164,"name":"bytes","nodeType":"ElementaryTypeName","src":"17549:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"17548:24:4"},"returnParameters":{"id":2169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2168,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2195,"src":"17595:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2167,"name":"bool","nodeType":"ElementaryTypeName","src":"17595:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"17594:6:4"},"scope":3035,"src":"17529:248:4","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":2413,"nodeType":"Block","src":"18137:5124:4","statements":[{"id":2412,"nodeType":"UncheckedBlock","src":"18147:5108:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2203,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2198,"src":"18241:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"31","id":2204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18246:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"18241:6:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2209,"nodeType":"IfStatement","src":"18237:53:4","trueBody":{"id":2208,"nodeType":"Block","src":"18249:41:4","statements":[{"expression":{"id":2206,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2198,"src":"18274:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2202,"id":2207,"nodeType":"Return","src":"18267:8:4"}]}},{"assignments":[2211],"declarations":[{"constant":false,"id":2211,"mutability":"mutable","name":"aa","nameLocation":"19225:2:4","nodeType":"VariableDeclaration","scope":2412,"src":"19217:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2210,"name":"uint256","nodeType":"ElementaryTypeName","src":"19217:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2213,"initialValue":{"id":2212,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2198,"src":"19230:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"19217:14:4"},{"assignments":[2215],"declarations":[{"constant":false,"id":2215,"mutability":"mutable","name":"xn","nameLocation":"19253:2:4","nodeType":"VariableDeclaration","scope":2412,"src":"19245:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2214,"name":"uint256","nodeType":"ElementaryTypeName","src":"19245:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2217,"initialValue":{"hexValue":"31","id":2216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19258:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"VariableDeclarationStatement","src":"19245:14:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2218,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"19278:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"},"id":2221,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19285:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313238","id":2220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19290:3:4","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"19285:8:4","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"}}],"id":2222,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"19284:10:4","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"}},"src":"19278:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2233,"nodeType":"IfStatement","src":"19274:92:4","trueBody":{"id":2232,"nodeType":"Block","src":"19296:70:4","statements":[{"expression":{"id":2226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2224,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"19314:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2225,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19321:3:4","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"19314:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2227,"nodeType":"ExpressionStatement","src":"19314:10:4"},{"expression":{"id":2230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2228,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"19342:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"3634","id":2229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19349:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"19342:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2231,"nodeType":"ExpressionStatement","src":"19342:9:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2234,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"19383:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"},"id":2237,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2235,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19390:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3634","id":2236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19395:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"19390:7:4","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"}}],"id":2238,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"19389:9:4","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"}},"src":"19383:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2249,"nodeType":"IfStatement","src":"19379:90:4","trueBody":{"id":2248,"nodeType":"Block","src":"19400:69:4","statements":[{"expression":{"id":2242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2240,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"19418:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19425:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"19418:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2243,"nodeType":"ExpressionStatement","src":"19418:9:4"},{"expression":{"id":2246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2244,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"19445:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"3332","id":2245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19452:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"19445:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2247,"nodeType":"ExpressionStatement","src":"19445:9:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2250,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"19486:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"},"id":2253,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19493:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3332","id":2252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19498:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"19493:7:4","typeDescriptions":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"}}],"id":2254,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"19492:9:4","typeDescriptions":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"}},"src":"19486:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2265,"nodeType":"IfStatement","src":"19482:90:4","trueBody":{"id":2264,"nodeType":"Block","src":"19503:69:4","statements":[{"expression":{"id":2258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2256,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"19521:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19528:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"19521:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2259,"nodeType":"ExpressionStatement","src":"19521:9:4"},{"expression":{"id":2262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2260,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"19548:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"3136","id":2261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19555:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"19548:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2263,"nodeType":"ExpressionStatement","src":"19548:9:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2266,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"19589:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"},"id":2269,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19596:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3136","id":2268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19601:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"19596:7:4","typeDescriptions":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"}}],"id":2270,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"19595:9:4","typeDescriptions":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"}},"src":"19589:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2281,"nodeType":"IfStatement","src":"19585:89:4","trueBody":{"id":2280,"nodeType":"Block","src":"19606:68:4","statements":[{"expression":{"id":2274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2272,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"19624:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19631:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"19624:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2275,"nodeType":"ExpressionStatement","src":"19624:9:4"},{"expression":{"id":2278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2276,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"19651:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"38","id":2277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19658:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"19651:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2279,"nodeType":"ExpressionStatement","src":"19651:8:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2282,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"19691:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"id":2285,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19698:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"38","id":2284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19703:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"19698:6:4","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"}}],"id":2286,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"19697:8:4","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"}},"src":"19691:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2297,"nodeType":"IfStatement","src":"19687:87:4","trueBody":{"id":2296,"nodeType":"Block","src":"19707:67:4","statements":[{"expression":{"id":2290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2288,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"19725:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19732:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"19725:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2291,"nodeType":"ExpressionStatement","src":"19725:8:4"},{"expression":{"id":2294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2292,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"19751:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"34","id":2293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19758:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"19751:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2295,"nodeType":"ExpressionStatement","src":"19751:8:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2298,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"19791:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"id":2301,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19798:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"34","id":2300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19803:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"19798:6:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"}}],"id":2302,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"19797:8:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"}},"src":"19791:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2313,"nodeType":"IfStatement","src":"19787:87:4","trueBody":{"id":2312,"nodeType":"Block","src":"19807:67:4","statements":[{"expression":{"id":2306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2304,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"19825:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19832:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"19825:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2307,"nodeType":"ExpressionStatement","src":"19825:8:4"},{"expression":{"id":2310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2308,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"19851:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"32","id":2309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19858:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"19851:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2311,"nodeType":"ExpressionStatement","src":"19851:8:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2314,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"19891:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"id":2317,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19898:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"32","id":2316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19903:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"19898:6:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"}}],"id":2318,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"19897:8:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"}},"src":"19891:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2325,"nodeType":"IfStatement","src":"19887:61:4","trueBody":{"id":2324,"nodeType":"Block","src":"19907:41:4","statements":[{"expression":{"id":2322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2320,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"19925:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"31","id":2321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19932:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"19925:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2323,"nodeType":"ExpressionStatement","src":"19925:8:4"}]}},{"expression":{"id":2333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2326,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"20368:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":2327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20374:1:4","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2328,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"20378:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20374:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2330,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"20373:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20385:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"20373:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20368:18:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2334,"nodeType":"ExpressionStatement","src":"20368:18:4"},{"expression":{"id":2344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2335,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"22273:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2336,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"22279:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2337,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2198,"src":"22284:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2338,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"22288:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22284:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22279:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2341,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"22278:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22295:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"22278:18:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22273:23:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2345,"nodeType":"ExpressionStatement","src":"22273:23:4"},{"expression":{"id":2355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2346,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"22382:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2347,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"22388:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2348,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2198,"src":"22393:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2349,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"22397:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22393:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22388:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2352,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"22387:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22404:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"22387:18:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22382:23:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2356,"nodeType":"ExpressionStatement","src":"22382:23:4"},{"expression":{"id":2366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2357,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"22493:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2358,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"22499:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2359,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2198,"src":"22504:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2360,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"22508:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22504:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22499:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2363,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"22498:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22515:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"22498:18:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22493:23:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2367,"nodeType":"ExpressionStatement","src":"22493:23:4"},{"expression":{"id":2377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2368,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"22602:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2369,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"22608:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2370,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2198,"src":"22613:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2371,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"22617:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22613:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22608:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2374,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"22607:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22624:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"22607:18:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22602:23:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2378,"nodeType":"ExpressionStatement","src":"22602:23:4"},{"expression":{"id":2388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2379,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"22712:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2380,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"22718:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2381,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2198,"src":"22723:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2382,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"22727:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22723:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22718:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2385,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"22717:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22734:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"22717:18:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22712:23:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2389,"nodeType":"ExpressionStatement","src":"22712:23:4"},{"expression":{"id":2399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2390,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"22822:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2391,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"22828:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2392,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2198,"src":"22833:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2393,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"22837:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22833:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22828:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2396,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"22827:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22844:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"22827:18:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22822:23:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2400,"nodeType":"ExpressionStatement","src":"22822:23:4"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2401,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"23211:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2404,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"23232:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2405,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2198,"src":"23237:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2406,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"23241:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23237:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23232:11:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2402,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"23216:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$4800_$","typeString":"type(library SafeCast)"}},"id":2403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23225:6:4","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":4799,"src":"23216:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":2409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23216:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23211:33:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2202,"id":2411,"nodeType":"Return","src":"23204:40:4"}]}]},"documentation":{"id":2196,"nodeType":"StructuredDocumentation","src":"17783:292:4","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n This method is based on Newton's method for computing square roots; the algorithm is restricted to only\n using integer operations."},"id":2414,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"18089:4:4","nodeType":"FunctionDefinition","parameters":{"id":2199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2198,"mutability":"mutable","name":"a","nameLocation":"18102:1:4","nodeType":"VariableDeclaration","scope":2414,"src":"18094:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2197,"name":"uint256","nodeType":"ElementaryTypeName","src":"18094:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18093:11:4"},"returnParameters":{"id":2202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2201,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2414,"src":"18128:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2200,"name":"uint256","nodeType":"ElementaryTypeName","src":"18128:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18127:9:4"},"scope":3035,"src":"18080:5181:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2447,"nodeType":"Block","src":"23434:171:4","statements":[{"id":2446,"nodeType":"UncheckedBlock","src":"23444:155:4","statements":[{"assignments":[2426],"declarations":[{"constant":false,"id":2426,"mutability":"mutable","name":"result","nameLocation":"23476:6:4","nodeType":"VariableDeclaration","scope":2446,"src":"23468:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2425,"name":"uint256","nodeType":"ElementaryTypeName","src":"23468:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2430,"initialValue":{"arguments":[{"id":2428,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2417,"src":"23490:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2427,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2414,2448],"referencedDeclaration":2414,"src":"23485:4:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23485:7:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"23468:24:4"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2431,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"23513:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2435,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2420,"src":"23555:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1441","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1441","typeString":"enum Math.Rounding"}],"id":2434,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3034,"src":"23538:16:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1441_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23538:26:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2437,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"23568:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2438,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"23577:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23568:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2440,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2417,"src":"23586:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23568:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"23538:49:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2432,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"23522:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$4800_$","typeString":"type(library SafeCast)"}},"id":2433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23531:6:4","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":4799,"src":"23522:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":2443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23522:66:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23513:75:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2424,"id":2445,"nodeType":"Return","src":"23506:82:4"}]}]},"documentation":{"id":2415,"nodeType":"StructuredDocumentation","src":"23267:86:4","text":" @dev Calculates sqrt(a), following the selected rounding direction."},"id":2448,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"23367:4:4","nodeType":"FunctionDefinition","parameters":{"id":2421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2417,"mutability":"mutable","name":"a","nameLocation":"23380:1:4","nodeType":"VariableDeclaration","scope":2448,"src":"23372:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2416,"name":"uint256","nodeType":"ElementaryTypeName","src":"23372:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2420,"mutability":"mutable","name":"rounding","nameLocation":"23392:8:4","nodeType":"VariableDeclaration","scope":2448,"src":"23383:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1441","typeString":"enum Math.Rounding"},"typeName":{"id":2419,"nodeType":"UserDefinedTypeName","pathNode":{"id":2418,"name":"Rounding","nameLocations":["23383:8:4"],"nodeType":"IdentifierPath","referencedDeclaration":1441,"src":"23383:8:4"},"referencedDeclaration":1441,"src":"23383:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1441","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"23371:30:4"},"returnParameters":{"id":2424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2423,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2448,"src":"23425:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2422,"name":"uint256","nodeType":"ElementaryTypeName","src":"23425:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23424:9:4"},"scope":3035,"src":"23358:247:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2643,"nodeType":"Block","src":"23796:981:4","statements":[{"assignments":[2457],"declarations":[{"constant":false,"id":2457,"mutability":"mutable","name":"result","nameLocation":"23814:6:4","nodeType":"VariableDeclaration","scope":2643,"src":"23806:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2456,"name":"uint256","nodeType":"ElementaryTypeName","src":"23806:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2459,"initialValue":{"hexValue":"30","id":2458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23823:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23806:18:4"},{"assignments":[2461],"declarations":[{"constant":false,"id":2461,"mutability":"mutable","name":"exp","nameLocation":"23842:3:4","nodeType":"VariableDeclaration","scope":2643,"src":"23834:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2460,"name":"uint256","nodeType":"ElementaryTypeName","src":"23834:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2462,"nodeType":"VariableDeclarationStatement","src":"23834:11:4"},{"id":2640,"nodeType":"UncheckedBlock","src":"23855:893:4","statements":[{"expression":{"id":2477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2463,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"23879:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"313238","id":2464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23885:3:4","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2467,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2451,"src":"23907:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_rational_340282366920938463463374607431768211455_by_1","typeString":"int_const 3402...(31 digits omitted)...1455"},"id":2473,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"},"id":2470,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23916:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313238","id":2469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23921:3:4","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"23916:8:4","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"}}],"id":2471,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"23915:10:4","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23928:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"23915:14:4","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211455_by_1","typeString":"int_const 3402...(31 digits omitted)...1455"}},"src":"23907:22:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2465,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"23891:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$4800_$","typeString":"type(library SafeCast)"}},"id":2466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23900:6:4","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":4799,"src":"23891:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":2475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23891:39:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23885:45:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23879:51:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2478,"nodeType":"ExpressionStatement","src":"23879:51:4"},{"expression":{"id":2481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2479,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2451,"src":"23944:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"id":2480,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"23954:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23944:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2482,"nodeType":"ExpressionStatement","src":"23944:13:4"},{"expression":{"id":2485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2483,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"23971:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2484,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"23981:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23971:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2486,"nodeType":"ExpressionStatement","src":"23971:13:4"},{"expression":{"id":2501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2487,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"23999:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3634","id":2488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24005:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2491,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2451,"src":"24026:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_rational_18446744073709551615_by_1","typeString":"int_const 18446744073709551615"},"id":2497,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"},"id":2494,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24035:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3634","id":2493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24040:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"24035:7:4","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"}}],"id":2495,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"24034:9:4","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24046:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"24034:13:4","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551615_by_1","typeString":"int_const 18446744073709551615"}},"src":"24026:21:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2489,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"24010:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$4800_$","typeString":"type(library SafeCast)"}},"id":2490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24019:6:4","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":4799,"src":"24010:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":2499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24010:38:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24005:43:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23999:49:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2502,"nodeType":"ExpressionStatement","src":"23999:49:4"},{"expression":{"id":2505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2503,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2451,"src":"24062:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"id":2504,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"24072:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24062:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2506,"nodeType":"ExpressionStatement","src":"24062:13:4"},{"expression":{"id":2509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2507,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"24089:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2508,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"24099:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24089:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2510,"nodeType":"ExpressionStatement","src":"24089:13:4"},{"expression":{"id":2525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2511,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"24117:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3332","id":2512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24123:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2515,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2451,"src":"24144:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"id":2521,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"},"id":2518,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24153:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3332","id":2517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24158:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"24153:7:4","typeDescriptions":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"}}],"id":2519,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"24152:9:4","typeDescriptions":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24164:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"24152:13:4","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"}},"src":"24144:21:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2513,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"24128:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$4800_$","typeString":"type(library SafeCast)"}},"id":2514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24137:6:4","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":4799,"src":"24128:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":2523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24128:38:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24123:43:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24117:49:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2526,"nodeType":"ExpressionStatement","src":"24117:49:4"},{"expression":{"id":2529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2527,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2451,"src":"24180:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"id":2528,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"24190:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24180:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2530,"nodeType":"ExpressionStatement","src":"24180:13:4"},{"expression":{"id":2533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2531,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"24207:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2532,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"24217:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24207:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2534,"nodeType":"ExpressionStatement","src":"24207:13:4"},{"expression":{"id":2549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2535,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"24235:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3136","id":2536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24241:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2539,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2451,"src":"24262:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_rational_65535_by_1","typeString":"int_const 65535"},"id":2545,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"},"id":2542,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24271:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3136","id":2541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24276:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"24271:7:4","typeDescriptions":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"}}],"id":2543,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"24270:9:4","typeDescriptions":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24282:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"24270:13:4","typeDescriptions":{"typeIdentifier":"t_rational_65535_by_1","typeString":"int_const 65535"}},"src":"24262:21:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2537,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"24246:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$4800_$","typeString":"type(library SafeCast)"}},"id":2538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24255:6:4","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":4799,"src":"24246:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":2547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24246:38:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24241:43:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24235:49:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2550,"nodeType":"ExpressionStatement","src":"24235:49:4"},{"expression":{"id":2553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2551,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2451,"src":"24298:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"id":2552,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"24308:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24298:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2554,"nodeType":"ExpressionStatement","src":"24298:13:4"},{"expression":{"id":2557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2555,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"24325:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2556,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"24335:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24325:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2558,"nodeType":"ExpressionStatement","src":"24325:13:4"},{"expression":{"id":2573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2559,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"24353:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"38","id":2560,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24359:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2563,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2451,"src":"24379:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"id":2569,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"id":2566,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24388:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"38","id":2565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24393:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"24388:6:4","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"}}],"id":2567,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"24387:8:4","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24398:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"24387:12:4","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"}},"src":"24379:20:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2561,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"24363:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$4800_$","typeString":"type(library SafeCast)"}},"id":2562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24372:6:4","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":4799,"src":"24363:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":2571,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24363:37:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24359:41:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24353:47:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2574,"nodeType":"ExpressionStatement","src":"24353:47:4"},{"expression":{"id":2577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2575,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2451,"src":"24414:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"id":2576,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"24424:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24414:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2578,"nodeType":"ExpressionStatement","src":"24414:13:4"},{"expression":{"id":2581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2579,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"24441:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2580,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"24451:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24441:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2582,"nodeType":"ExpressionStatement","src":"24441:13:4"},{"expression":{"id":2597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2583,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"24469:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"34","id":2584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24475:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2587,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2451,"src":"24495:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"id":2593,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"id":2590,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24504:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"34","id":2589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24509:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"24504:6:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"}}],"id":2591,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"24503:8:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24514:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"24503:12:4","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"}},"src":"24495:20:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2585,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"24479:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$4800_$","typeString":"type(library SafeCast)"}},"id":2586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24488:6:4","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":4799,"src":"24479:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":2595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24479:37:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24475:41:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24469:47:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2598,"nodeType":"ExpressionStatement","src":"24469:47:4"},{"expression":{"id":2601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2599,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2451,"src":"24530:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"id":2600,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"24540:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24530:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2602,"nodeType":"ExpressionStatement","src":"24530:13:4"},{"expression":{"id":2605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2603,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"24557:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2604,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"24567:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24557:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2606,"nodeType":"ExpressionStatement","src":"24557:13:4"},{"expression":{"id":2621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2607,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"24585:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24591:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2611,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2451,"src":"24611:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"id":2617,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"id":2614,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24620:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"32","id":2613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24625:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"24620:6:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"}}],"id":2615,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"24619:8:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24630:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"24619:12:4","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"}},"src":"24611:20:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2609,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"24595:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$4800_$","typeString":"type(library SafeCast)"}},"id":2610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24604:6:4","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":4799,"src":"24595:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":2619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24595:37:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24591:41:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24585:47:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2622,"nodeType":"ExpressionStatement","src":"24585:47:4"},{"expression":{"id":2625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2623,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2451,"src":"24646:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"id":2624,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"24656:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24646:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2626,"nodeType":"ExpressionStatement","src":"24646:13:4"},{"expression":{"id":2629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2627,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"24673:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2628,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"24683:3:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24673:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2630,"nodeType":"ExpressionStatement","src":"24673:13:4"},{"expression":{"id":2638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2631,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"24701:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2634,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2451,"src":"24727:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":2635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24735:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"24727:9:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2632,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"24711:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$4800_$","typeString":"type(library SafeCast)"}},"id":2633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24720:6:4","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":4799,"src":"24711:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":2637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24711:26:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24701:36:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2639,"nodeType":"ExpressionStatement","src":"24701:36:4"}]},{"expression":{"id":2641,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"24764:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2455,"id":2642,"nodeType":"Return","src":"24757:13:4"}]},"documentation":{"id":2449,"nodeType":"StructuredDocumentation","src":"23611:119:4","text":" @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":2644,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"23744:4:4","nodeType":"FunctionDefinition","parameters":{"id":2452,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2451,"mutability":"mutable","name":"value","nameLocation":"23757:5:4","nodeType":"VariableDeclaration","scope":2644,"src":"23749:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2450,"name":"uint256","nodeType":"ElementaryTypeName","src":"23749:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23748:15:4"},"returnParameters":{"id":2455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2454,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2644,"src":"23787:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2453,"name":"uint256","nodeType":"ElementaryTypeName","src":"23787:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23786:9:4"},"scope":3035,"src":"23735:1042:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2677,"nodeType":"Block","src":"25010:175:4","statements":[{"id":2676,"nodeType":"UncheckedBlock","src":"25020:159:4","statements":[{"assignments":[2656],"declarations":[{"constant":false,"id":2656,"mutability":"mutable","name":"result","nameLocation":"25052:6:4","nodeType":"VariableDeclaration","scope":2676,"src":"25044:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2655,"name":"uint256","nodeType":"ElementaryTypeName","src":"25044:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2660,"initialValue":{"arguments":[{"id":2658,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2647,"src":"25066:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2657,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2644,2678],"referencedDeclaration":2644,"src":"25061:4:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2659,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25061:11:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"25044:28:4"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2661,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2656,"src":"25093:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2665,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"25135:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1441","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1441","typeString":"enum Math.Rounding"}],"id":2664,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3034,"src":"25118:16:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1441_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25118:26:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25148:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2668,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2656,"src":"25153:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25148:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2670,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2647,"src":"25162:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25148:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"25118:49:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2662,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"25102:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$4800_$","typeString":"type(library SafeCast)"}},"id":2663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"25111:6:4","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":4799,"src":"25102:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":2673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25102:66:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25093:75:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2654,"id":2675,"nodeType":"Return","src":"25086:82:4"}]}]},"documentation":{"id":2645,"nodeType":"StructuredDocumentation","src":"24783:142:4","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2678,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"24939:4:4","nodeType":"FunctionDefinition","parameters":{"id":2651,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2647,"mutability":"mutable","name":"value","nameLocation":"24952:5:4","nodeType":"VariableDeclaration","scope":2678,"src":"24944:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2646,"name":"uint256","nodeType":"ElementaryTypeName","src":"24944:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2650,"mutability":"mutable","name":"rounding","nameLocation":"24968:8:4","nodeType":"VariableDeclaration","scope":2678,"src":"24959:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1441","typeString":"enum Math.Rounding"},"typeName":{"id":2649,"nodeType":"UserDefinedTypeName","pathNode":{"id":2648,"name":"Rounding","nameLocations":["24959:8:4"],"nodeType":"IdentifierPath","referencedDeclaration":1441,"src":"24959:8:4"},"referencedDeclaration":1441,"src":"24959:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1441","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"24943:34:4"},"returnParameters":{"id":2654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2653,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2678,"src":"25001:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2652,"name":"uint256","nodeType":"ElementaryTypeName","src":"25001:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"25000:9:4"},"scope":3035,"src":"24930:255:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2806,"nodeType":"Block","src":"25378:854:4","statements":[{"assignments":[2687],"declarations":[{"constant":false,"id":2687,"mutability":"mutable","name":"result","nameLocation":"25396:6:4","nodeType":"VariableDeclaration","scope":2806,"src":"25388:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2686,"name":"uint256","nodeType":"ElementaryTypeName","src":"25388:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2689,"initialValue":{"hexValue":"30","id":2688,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25405:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"25388:18:4"},{"id":2803,"nodeType":"UncheckedBlock","src":"25416:787:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2690,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2681,"src":"25444:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2693,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25453:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25459:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"25453:8:4","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"25444:17:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2706,"nodeType":"IfStatement","src":"25440:103:4","trueBody":{"id":2705,"nodeType":"Block","src":"25463:80:4","statements":[{"expression":{"id":2699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2695,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2681,"src":"25481:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2698,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25490:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25496:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"25490:8:4","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"25481:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2700,"nodeType":"ExpressionStatement","src":"25481:17:4"},{"expression":{"id":2703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2701,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"25516:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2702,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25526:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"25516:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2704,"nodeType":"ExpressionStatement","src":"25516:12:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2707,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2681,"src":"25560:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2710,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2708,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25569:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25575:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"25569:8:4","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"25560:17:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2723,"nodeType":"IfStatement","src":"25556:103:4","trueBody":{"id":2722,"nodeType":"Block","src":"25579:80:4","statements":[{"expression":{"id":2716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2712,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2681,"src":"25597:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2715,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25606:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25612:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"25606:8:4","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"25597:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2717,"nodeType":"ExpressionStatement","src":"25597:17:4"},{"expression":{"id":2720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2718,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"25632:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25642:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"25632:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2721,"nodeType":"ExpressionStatement","src":"25632:12:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2724,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2681,"src":"25676:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2727,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25685:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25691:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"25685:8:4","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"25676:17:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2740,"nodeType":"IfStatement","src":"25672:103:4","trueBody":{"id":2739,"nodeType":"Block","src":"25695:80:4","statements":[{"expression":{"id":2733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2729,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2681,"src":"25713:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2732,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25722:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25728:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"25722:8:4","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"25713:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2734,"nodeType":"ExpressionStatement","src":"25713:17:4"},{"expression":{"id":2737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2735,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"25748:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25758:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"25748:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2738,"nodeType":"ExpressionStatement","src":"25748:12:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2741,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2681,"src":"25792:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2744,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25801:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25807:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"25801:7:4","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"25792:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2757,"nodeType":"IfStatement","src":"25788:100:4","trueBody":{"id":2756,"nodeType":"Block","src":"25810:78:4","statements":[{"expression":{"id":2750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2746,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2681,"src":"25828:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2749,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25837:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25843:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"25837:7:4","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"25828:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2751,"nodeType":"ExpressionStatement","src":"25828:16:4"},{"expression":{"id":2754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2752,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"25862:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25872:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"25862:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2755,"nodeType":"ExpressionStatement","src":"25862:11:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2758,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2681,"src":"25905:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2761,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25914:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25920:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"25914:7:4","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"25905:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2774,"nodeType":"IfStatement","src":"25901:100:4","trueBody":{"id":2773,"nodeType":"Block","src":"25923:78:4","statements":[{"expression":{"id":2767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2763,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2681,"src":"25941:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2766,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25950:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25956:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"25950:7:4","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"25941:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2768,"nodeType":"ExpressionStatement","src":"25941:16:4"},{"expression":{"id":2771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2769,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"25975:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25985:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"25975:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2772,"nodeType":"ExpressionStatement","src":"25975:11:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2775,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2681,"src":"26018:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2778,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26027:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26033:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"26027:7:4","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"26018:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2791,"nodeType":"IfStatement","src":"26014:100:4","trueBody":{"id":2790,"nodeType":"Block","src":"26036:78:4","statements":[{"expression":{"id":2784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2780,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2681,"src":"26054:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2783,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2781,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26063:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26069:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"26063:7:4","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"26054:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2785,"nodeType":"ExpressionStatement","src":"26054:16:4"},{"expression":{"id":2788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2786,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"26088:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26098:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"26088:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2789,"nodeType":"ExpressionStatement","src":"26088:11:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2792,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2681,"src":"26131:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2795,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26140:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26146:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"26140:7:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"26131:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2802,"nodeType":"IfStatement","src":"26127:66:4","trueBody":{"id":2801,"nodeType":"Block","src":"26149:44:4","statements":[{"expression":{"id":2799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2797,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"26167:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26177:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"26167:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2800,"nodeType":"ExpressionStatement","src":"26167:11:4"}]}}]},{"expression":{"id":2804,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"26219:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2685,"id":2805,"nodeType":"Return","src":"26212:13:4"}]},"documentation":{"id":2679,"nodeType":"StructuredDocumentation","src":"25191:120:4","text":" @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":2807,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"25325:5:4","nodeType":"FunctionDefinition","parameters":{"id":2682,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2681,"mutability":"mutable","name":"value","nameLocation":"25339:5:4","nodeType":"VariableDeclaration","scope":2807,"src":"25331:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2680,"name":"uint256","nodeType":"ElementaryTypeName","src":"25331:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"25330:15:4"},"returnParameters":{"id":2685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2684,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2807,"src":"25369:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2683,"name":"uint256","nodeType":"ElementaryTypeName","src":"25369:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"25368:9:4"},"scope":3035,"src":"25316:916:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2840,"nodeType":"Block","src":"26467:177:4","statements":[{"id":2839,"nodeType":"UncheckedBlock","src":"26477:161:4","statements":[{"assignments":[2819],"declarations":[{"constant":false,"id":2819,"mutability":"mutable","name":"result","nameLocation":"26509:6:4","nodeType":"VariableDeclaration","scope":2839,"src":"26501:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2818,"name":"uint256","nodeType":"ElementaryTypeName","src":"26501:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2823,"initialValue":{"arguments":[{"id":2821,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2810,"src":"26524:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2820,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2807,2841],"referencedDeclaration":2807,"src":"26518:5:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2822,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26518:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"26501:29:4"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2824,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2819,"src":"26551:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2828,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2813,"src":"26593:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1441","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1441","typeString":"enum Math.Rounding"}],"id":2827,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3034,"src":"26576:16:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1441_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26576:26:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26606:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2831,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2819,"src":"26612:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26606:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2833,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2810,"src":"26621:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26606:20:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"26576:50:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2825,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"26560:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$4800_$","typeString":"type(library SafeCast)"}},"id":2826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26569:6:4","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":4799,"src":"26560:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":2836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26560:67:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26551:76:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2817,"id":2838,"nodeType":"Return","src":"26544:83:4"}]}]},"documentation":{"id":2808,"nodeType":"StructuredDocumentation","src":"26238:143:4","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2841,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"26395:5:4","nodeType":"FunctionDefinition","parameters":{"id":2814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2810,"mutability":"mutable","name":"value","nameLocation":"26409:5:4","nodeType":"VariableDeclaration","scope":2841,"src":"26401:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2809,"name":"uint256","nodeType":"ElementaryTypeName","src":"26401:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2813,"mutability":"mutable","name":"rounding","nameLocation":"26425:8:4","nodeType":"VariableDeclaration","scope":2841,"src":"26416:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1441","typeString":"enum Math.Rounding"},"typeName":{"id":2812,"nodeType":"UserDefinedTypeName","pathNode":{"id":2811,"name":"Rounding","nameLocations":["26416:8:4"],"nodeType":"IdentifierPath","referencedDeclaration":1441,"src":"26416:8:4"},"referencedDeclaration":1441,"src":"26416:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1441","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"26400:34:4"},"returnParameters":{"id":2817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2816,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2841,"src":"26458:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2815,"name":"uint256","nodeType":"ElementaryTypeName","src":"26458:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26457:9:4"},"scope":3035,"src":"26386:258:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2977,"nodeType":"Block","src":"26964:674:4","statements":[{"assignments":[2850],"declarations":[{"constant":false,"id":2850,"mutability":"mutable","name":"result","nameLocation":"26982:6:4","nodeType":"VariableDeclaration","scope":2977,"src":"26974:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2849,"name":"uint256","nodeType":"ElementaryTypeName","src":"26974:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2852,"initialValue":{"hexValue":"30","id":2851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26991:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"26974:18:4"},{"assignments":[2854],"declarations":[{"constant":false,"id":2854,"mutability":"mutable","name":"isGt","nameLocation":"27010:4:4","nodeType":"VariableDeclaration","scope":2977,"src":"27002:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2853,"name":"uint256","nodeType":"ElementaryTypeName","src":"27002:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2855,"nodeType":"VariableDeclarationStatement","src":"27002:12:4"},{"id":2974,"nodeType":"UncheckedBlock","src":"27024:585:4","statements":[{"expression":{"id":2868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2856,"name":"isGt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2854,"src":"27048:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2859,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2844,"src":"27071:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_rational_340282366920938463463374607431768211455_by_1","typeString":"int_const 3402...(31 digits omitted)...1455"},"id":2865,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"},"id":2862,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27080:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313238","id":2861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27085:3:4","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"27080:8:4","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"}}],"id":2863,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"27079:10:4","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27092:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"27079:14:4","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211455_by_1","typeString":"int_const 3402...(31 digits omitted)...1455"}},"src":"27071:22:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2857,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"27055:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$4800_$","typeString":"type(library SafeCast)"}},"id":2858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"27064:6:4","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":4799,"src":"27055:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":2867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27055:39:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27048:46:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2869,"nodeType":"ExpressionStatement","src":"27048:46:4"},{"expression":{"id":2874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2870,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2844,"src":"27108:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2871,"name":"isGt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2854,"src":"27118:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"313238","id":2872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27125:3:4","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"27118:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27108:20:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2875,"nodeType":"ExpressionStatement","src":"27108:20:4"},{"expression":{"id":2880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2876,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2850,"src":"27142:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2877,"name":"isGt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2854,"src":"27152:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3136","id":2878,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27159:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"27152:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27142:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2881,"nodeType":"ExpressionStatement","src":"27142:19:4"},{"expression":{"id":2894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2882,"name":"isGt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2854,"src":"27176:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2885,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2844,"src":"27199:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_rational_18446744073709551615_by_1","typeString":"int_const 18446744073709551615"},"id":2891,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"},"id":2888,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2886,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27208:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3634","id":2887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27213:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"27208:7:4","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"}}],"id":2889,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"27207:9:4","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27219:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"27207:13:4","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551615_by_1","typeString":"int_const 18446744073709551615"}},"src":"27199:21:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2883,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"27183:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$4800_$","typeString":"type(library SafeCast)"}},"id":2884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"27192:6:4","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":4799,"src":"27183:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":2893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27183:38:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27176:45:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2895,"nodeType":"ExpressionStatement","src":"27176:45:4"},{"expression":{"id":2900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2896,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2844,"src":"27235:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2897,"name":"isGt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2854,"src":"27245:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3634","id":2898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27252:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"27245:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27235:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2901,"nodeType":"ExpressionStatement","src":"27235:19:4"},{"expression":{"id":2906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2902,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2850,"src":"27268:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2903,"name":"isGt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2854,"src":"27278:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":2904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27285:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"27278:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27268:18:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2907,"nodeType":"ExpressionStatement","src":"27268:18:4"},{"expression":{"id":2920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2908,"name":"isGt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2854,"src":"27301:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2911,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2844,"src":"27324:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"id":2917,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"},"id":2914,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27333:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3332","id":2913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27338:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"27333:7:4","typeDescriptions":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"}}],"id":2915,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"27332:9:4","typeDescriptions":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27344:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"27332:13:4","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"}},"src":"27324:21:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2909,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"27308:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$4800_$","typeString":"type(library SafeCast)"}},"id":2910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"27317:6:4","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":4799,"src":"27308:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":2919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27308:38:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27301:45:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2921,"nodeType":"ExpressionStatement","src":"27301:45:4"},{"expression":{"id":2926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2922,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2844,"src":"27360:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2923,"name":"isGt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2854,"src":"27370:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3332","id":2924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27377:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"27370:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27360:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2927,"nodeType":"ExpressionStatement","src":"27360:19:4"},{"expression":{"id":2932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2928,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2850,"src":"27393:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2929,"name":"isGt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2854,"src":"27403:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"34","id":2930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27410:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"27403:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27393:18:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2933,"nodeType":"ExpressionStatement","src":"27393:18:4"},{"expression":{"id":2946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2934,"name":"isGt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2854,"src":"27426:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2937,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2844,"src":"27449:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_rational_65535_by_1","typeString":"int_const 65535"},"id":2943,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"},"id":2940,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2938,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27458:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3136","id":2939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27463:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"27458:7:4","typeDescriptions":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"}}],"id":2941,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"27457:9:4","typeDescriptions":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2942,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27469:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"27457:13:4","typeDescriptions":{"typeIdentifier":"t_rational_65535_by_1","typeString":"int_const 65535"}},"src":"27449:21:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2935,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"27433:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$4800_$","typeString":"type(library SafeCast)"}},"id":2936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"27442:6:4","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":4799,"src":"27433:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":2945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27433:38:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27426:45:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2947,"nodeType":"ExpressionStatement","src":"27426:45:4"},{"expression":{"id":2952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2948,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2844,"src":"27485:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2949,"name":"isGt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2854,"src":"27495:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3136","id":2950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27502:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"27495:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27485:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2953,"nodeType":"ExpressionStatement","src":"27485:19:4"},{"expression":{"id":2958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2954,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2850,"src":"27518:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2955,"name":"isGt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2854,"src":"27528:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":2956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27535:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"27528:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27518:18:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2959,"nodeType":"ExpressionStatement","src":"27518:18:4"},{"expression":{"id":2972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2960,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2850,"src":"27551:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2963,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2844,"src":"27577:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"id":2969,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"id":2966,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27586:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"38","id":2965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27591:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"27586:6:4","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"}}],"id":2967,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"27585:8:4","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27596:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"27585:12:4","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"}},"src":"27577:20:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2961,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"27561:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$4800_$","typeString":"type(library SafeCast)"}},"id":2962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"27570:6:4","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":4799,"src":"27561:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":2971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27561:37:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27551:47:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2973,"nodeType":"ExpressionStatement","src":"27551:47:4"}]},{"expression":{"id":2975,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2850,"src":"27625:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2848,"id":2976,"nodeType":"Return","src":"27618:13:4"}]},"documentation":{"id":2842,"nodeType":"StructuredDocumentation","src":"26650:246:4","text":" @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2978,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"26910:6:4","nodeType":"FunctionDefinition","parameters":{"id":2845,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2844,"mutability":"mutable","name":"value","nameLocation":"26925:5:4","nodeType":"VariableDeclaration","scope":2978,"src":"26917:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2843,"name":"uint256","nodeType":"ElementaryTypeName","src":"26917:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26916:15:4"},"returnParameters":{"id":2848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2847,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2978,"src":"26955:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2846,"name":"uint256","nodeType":"ElementaryTypeName","src":"26955:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26954:9:4"},"scope":3035,"src":"26901:737:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3014,"nodeType":"Block","src":"27875:184:4","statements":[{"id":3013,"nodeType":"UncheckedBlock","src":"27885:168:4","statements":[{"assignments":[2990],"declarations":[{"constant":false,"id":2990,"mutability":"mutable","name":"result","nameLocation":"27917:6:4","nodeType":"VariableDeclaration","scope":3013,"src":"27909:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2989,"name":"uint256","nodeType":"ElementaryTypeName","src":"27909:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2994,"initialValue":{"arguments":[{"id":2992,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2981,"src":"27933:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2991,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2978,3015],"referencedDeclaration":2978,"src":"27926:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2993,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27926:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"27909:30:4"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2995,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2990,"src":"27960:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2999,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2984,"src":"28002:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1441","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1441","typeString":"enum Math.Rounding"}],"id":2998,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3034,"src":"27985:16:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1441_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3000,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27985:26:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3001,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28015:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3002,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2990,"src":"28021:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":3003,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28031:1:4","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"28021:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3005,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"28020:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28015:18:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3007,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2981,"src":"28036:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28015:26:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"27985:56:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2996,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"27969:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$4800_$","typeString":"type(library SafeCast)"}},"id":2997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"27978:6:4","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":4799,"src":"27969:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":3010,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27969:73:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27960:82:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2988,"id":3012,"nodeType":"Return","src":"27953:89:4"}]}]},"documentation":{"id":2979,"nodeType":"StructuredDocumentation","src":"27644:144:4","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3015,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"27802:6:4","nodeType":"FunctionDefinition","parameters":{"id":2985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2981,"mutability":"mutable","name":"value","nameLocation":"27817:5:4","nodeType":"VariableDeclaration","scope":3015,"src":"27809:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2980,"name":"uint256","nodeType":"ElementaryTypeName","src":"27809:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2984,"mutability":"mutable","name":"rounding","nameLocation":"27833:8:4","nodeType":"VariableDeclaration","scope":3015,"src":"27824:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1441","typeString":"enum Math.Rounding"},"typeName":{"id":2983,"nodeType":"UserDefinedTypeName","pathNode":{"id":2982,"name":"Rounding","nameLocations":["27824:8:4"],"nodeType":"IdentifierPath","referencedDeclaration":1441,"src":"27824:8:4"},"referencedDeclaration":1441,"src":"27824:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1441","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"27808:34:4"},"returnParameters":{"id":2988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2987,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3015,"src":"27866:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2986,"name":"uint256","nodeType":"ElementaryTypeName","src":"27866:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"27865:9:4"},"scope":3035,"src":"27793:266:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3033,"nodeType":"Block","src":"28257:48:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3026,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3019,"src":"28280:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1441","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1441","typeString":"enum Math.Rounding"}],"id":3025,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28274:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3024,"name":"uint8","nodeType":"ElementaryTypeName","src":"28274:5:4","typeDescriptions":{}}},"id":3027,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28274:15:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"32","id":3028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28292:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"28274:19:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":3030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28297:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"28274:24:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3023,"id":3032,"nodeType":"Return","src":"28267:31:4"}]},"documentation":{"id":3016,"nodeType":"StructuredDocumentation","src":"28065:113:4","text":" @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."},"id":3034,"implemented":true,"kind":"function","modifiers":[],"name":"unsignedRoundsUp","nameLocation":"28192:16:4","nodeType":"FunctionDefinition","parameters":{"id":3020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3019,"mutability":"mutable","name":"rounding","nameLocation":"28218:8:4","nodeType":"VariableDeclaration","scope":3034,"src":"28209:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1441","typeString":"enum Math.Rounding"},"typeName":{"id":3018,"nodeType":"UserDefinedTypeName","pathNode":{"id":3017,"name":"Rounding","nameLocations":["28209:8:4"],"nodeType":"IdentifierPath","referencedDeclaration":1441,"src":"28209:8:4"},"referencedDeclaration":1441,"src":"28209:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1441","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"28208:19:4"},"returnParameters":{"id":3023,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3022,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3034,"src":"28251:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3021,"name":"bool","nodeType":"ElementaryTypeName","src":"28251:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"28250:6:4"},"scope":3035,"src":"28183:122:4","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3036,"src":"281:28026:4","usedErrors":[],"usedEvents":[]}],"src":"103:28205:4"},"id":4},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SafeCast.sol","exportedSymbols":{"SafeCast":[4800]},"id":4801,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3037,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"192:24:5"},{"abstract":false,"baseContracts":[],"canonicalName":"SafeCast","contractDependencies":[],"contractKind":"library","documentation":{"id":3038,"nodeType":"StructuredDocumentation","src":"218:550:5","text":" @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\n checks.\n Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n easily result in undesired exploitation or bugs, since developers usually\n assume that overflows raise errors. `SafeCast` restores this intuition by\n reverting the transaction when such an operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."},"fullyImplemented":true,"id":4800,"linearizedBaseContracts":[4800],"name":"SafeCast","nameLocation":"777:8:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3039,"nodeType":"StructuredDocumentation","src":"792:68:5","text":" @dev Value doesn't fit in an uint of `bits` size."},"errorSelector":"6dfcc650","id":3045,"name":"SafeCastOverflowedUintDowncast","nameLocation":"871:30:5","nodeType":"ErrorDefinition","parameters":{"id":3044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3041,"mutability":"mutable","name":"bits","nameLocation":"908:4:5","nodeType":"VariableDeclaration","scope":3045,"src":"902:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3040,"name":"uint8","nodeType":"ElementaryTypeName","src":"902:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3043,"mutability":"mutable","name":"value","nameLocation":"922:5:5","nodeType":"VariableDeclaration","scope":3045,"src":"914:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3042,"name":"uint256","nodeType":"ElementaryTypeName","src":"914:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"901:27:5"},"src":"865:64:5"},{"documentation":{"id":3046,"nodeType":"StructuredDocumentation","src":"935:75:5","text":" @dev An int value doesn't fit in an uint of `bits` size."},"errorSelector":"a8ce4432","id":3050,"name":"SafeCastOverflowedIntToUint","nameLocation":"1021:27:5","nodeType":"ErrorDefinition","parameters":{"id":3049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3048,"mutability":"mutable","name":"value","nameLocation":"1056:5:5","nodeType":"VariableDeclaration","scope":3050,"src":"1049:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3047,"name":"int256","nodeType":"ElementaryTypeName","src":"1049:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1048:14:5"},"src":"1015:48:5"},{"documentation":{"id":3051,"nodeType":"StructuredDocumentation","src":"1069:67:5","text":" @dev Value doesn't fit in an int of `bits` size."},"errorSelector":"327269a7","id":3057,"name":"SafeCastOverflowedIntDowncast","nameLocation":"1147:29:5","nodeType":"ErrorDefinition","parameters":{"id":3056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3053,"mutability":"mutable","name":"bits","nameLocation":"1183:4:5","nodeType":"VariableDeclaration","scope":3057,"src":"1177:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3052,"name":"uint8","nodeType":"ElementaryTypeName","src":"1177:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3055,"mutability":"mutable","name":"value","nameLocation":"1196:5:5","nodeType":"VariableDeclaration","scope":3057,"src":"1189:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3054,"name":"int256","nodeType":"ElementaryTypeName","src":"1189:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1176:26:5"},"src":"1141:62:5"},{"documentation":{"id":3058,"nodeType":"StructuredDocumentation","src":"1209:75:5","text":" @dev An uint value doesn't fit in an int of `bits` size."},"errorSelector":"24775e06","id":3062,"name":"SafeCastOverflowedUintToInt","nameLocation":"1295:27:5","nodeType":"ErrorDefinition","parameters":{"id":3061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3060,"mutability":"mutable","name":"value","nameLocation":"1331:5:5","nodeType":"VariableDeclaration","scope":3062,"src":"1323:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3059,"name":"uint256","nodeType":"ElementaryTypeName","src":"1323:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1322:15:5"},"src":"1289:49:5"},{"body":{"id":3089,"nodeType":"Block","src":"1695:152:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3070,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3065,"src":"1709:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3073,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1722:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"},"typeName":{"id":3072,"name":"uint248","nodeType":"ElementaryTypeName","src":"1722:7:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"}],"id":3071,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1717:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1717:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint248","typeString":"type(uint248)"}},"id":3075,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1731:3:5","memberName":"max","nodeType":"MemberAccess","src":"1717:17:5","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"src":"1709:25:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3083,"nodeType":"IfStatement","src":"1705:105:5","trueBody":{"id":3082,"nodeType":"Block","src":"1736:74:5","statements":[{"errorCall":{"arguments":[{"hexValue":"323438","id":3078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1788:3:5","typeDescriptions":{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},"value":"248"},{"id":3079,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3065,"src":"1793:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3077,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"1757:30:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3080,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1757:42:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3081,"nodeType":"RevertStatement","src":"1750:49:5"}]}},{"expression":{"arguments":[{"id":3086,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3065,"src":"1834:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3085,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1826:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"},"typeName":{"id":3084,"name":"uint248","nodeType":"ElementaryTypeName","src":"1826:7:5","typeDescriptions":{}}},"id":3087,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1826:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"functionReturnParameters":3069,"id":3088,"nodeType":"Return","src":"1819:21:5"}]},"documentation":{"id":3063,"nodeType":"StructuredDocumentation","src":"1344:280:5","text":" @dev Returns the downcasted uint248 from uint256, reverting on\n overflow (when the input is greater than largest uint248).\n Counterpart to Solidity's `uint248` operator.\n Requirements:\n - input must fit into 248 bits"},"id":3090,"implemented":true,"kind":"function","modifiers":[],"name":"toUint248","nameLocation":"1638:9:5","nodeType":"FunctionDefinition","parameters":{"id":3066,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3065,"mutability":"mutable","name":"value","nameLocation":"1656:5:5","nodeType":"VariableDeclaration","scope":3090,"src":"1648:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3064,"name":"uint256","nodeType":"ElementaryTypeName","src":"1648:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1647:15:5"},"returnParameters":{"id":3069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3068,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3090,"src":"1686:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"},"typeName":{"id":3067,"name":"uint248","nodeType":"ElementaryTypeName","src":"1686:7:5","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"visibility":"internal"}],"src":"1685:9:5"},"scope":4800,"src":"1629:218:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3117,"nodeType":"Block","src":"2204:152:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3098,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3093,"src":"2218:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3101,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2231:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"},"typeName":{"id":3100,"name":"uint240","nodeType":"ElementaryTypeName","src":"2231:7:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"}],"id":3099,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2226:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2226:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint240","typeString":"type(uint240)"}},"id":3103,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2240:3:5","memberName":"max","nodeType":"MemberAccess","src":"2226:17:5","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"src":"2218:25:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3111,"nodeType":"IfStatement","src":"2214:105:5","trueBody":{"id":3110,"nodeType":"Block","src":"2245:74:5","statements":[{"errorCall":{"arguments":[{"hexValue":"323430","id":3106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2297:3:5","typeDescriptions":{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},"value":"240"},{"id":3107,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3093,"src":"2302:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3105,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"2266:30:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2266:42:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3109,"nodeType":"RevertStatement","src":"2259:49:5"}]}},{"expression":{"arguments":[{"id":3114,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3093,"src":"2343:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3113,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2335:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"},"typeName":{"id":3112,"name":"uint240","nodeType":"ElementaryTypeName","src":"2335:7:5","typeDescriptions":{}}},"id":3115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2335:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"functionReturnParameters":3097,"id":3116,"nodeType":"Return","src":"2328:21:5"}]},"documentation":{"id":3091,"nodeType":"StructuredDocumentation","src":"1853:280:5","text":" @dev Returns the downcasted uint240 from uint256, reverting on\n overflow (when the input is greater than largest uint240).\n Counterpart to Solidity's `uint240` operator.\n Requirements:\n - input must fit into 240 bits"},"id":3118,"implemented":true,"kind":"function","modifiers":[],"name":"toUint240","nameLocation":"2147:9:5","nodeType":"FunctionDefinition","parameters":{"id":3094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3093,"mutability":"mutable","name":"value","nameLocation":"2165:5:5","nodeType":"VariableDeclaration","scope":3118,"src":"2157:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3092,"name":"uint256","nodeType":"ElementaryTypeName","src":"2157:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2156:15:5"},"returnParameters":{"id":3097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3096,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3118,"src":"2195:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"},"typeName":{"id":3095,"name":"uint240","nodeType":"ElementaryTypeName","src":"2195:7:5","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"visibility":"internal"}],"src":"2194:9:5"},"scope":4800,"src":"2138:218:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3145,"nodeType":"Block","src":"2713:152:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3126,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3121,"src":"2727:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3129,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2740:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"},"typeName":{"id":3128,"name":"uint232","nodeType":"ElementaryTypeName","src":"2740:7:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"}],"id":3127,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2735:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2735:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint232","typeString":"type(uint232)"}},"id":3131,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2749:3:5","memberName":"max","nodeType":"MemberAccess","src":"2735:17:5","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"src":"2727:25:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3139,"nodeType":"IfStatement","src":"2723:105:5","trueBody":{"id":3138,"nodeType":"Block","src":"2754:74:5","statements":[{"errorCall":{"arguments":[{"hexValue":"323332","id":3134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2806:3:5","typeDescriptions":{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},"value":"232"},{"id":3135,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3121,"src":"2811:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3133,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"2775:30:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2775:42:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3137,"nodeType":"RevertStatement","src":"2768:49:5"}]}},{"expression":{"arguments":[{"id":3142,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3121,"src":"2852:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3141,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2844:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"},"typeName":{"id":3140,"name":"uint232","nodeType":"ElementaryTypeName","src":"2844:7:5","typeDescriptions":{}}},"id":3143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2844:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"functionReturnParameters":3125,"id":3144,"nodeType":"Return","src":"2837:21:5"}]},"documentation":{"id":3119,"nodeType":"StructuredDocumentation","src":"2362:280:5","text":" @dev Returns the downcasted uint232 from uint256, reverting on\n overflow (when the input is greater than largest uint232).\n Counterpart to Solidity's `uint232` operator.\n Requirements:\n - input must fit into 232 bits"},"id":3146,"implemented":true,"kind":"function","modifiers":[],"name":"toUint232","nameLocation":"2656:9:5","nodeType":"FunctionDefinition","parameters":{"id":3122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3121,"mutability":"mutable","name":"value","nameLocation":"2674:5:5","nodeType":"VariableDeclaration","scope":3146,"src":"2666:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3120,"name":"uint256","nodeType":"ElementaryTypeName","src":"2666:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:15:5"},"returnParameters":{"id":3125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3124,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3146,"src":"2704:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"},"typeName":{"id":3123,"name":"uint232","nodeType":"ElementaryTypeName","src":"2704:7:5","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"visibility":"internal"}],"src":"2703:9:5"},"scope":4800,"src":"2647:218:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3173,"nodeType":"Block","src":"3222:152:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3154,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3149,"src":"3236:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3157,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3249:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"},"typeName":{"id":3156,"name":"uint224","nodeType":"ElementaryTypeName","src":"3249:7:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"}],"id":3155,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3244:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3244:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint224","typeString":"type(uint224)"}},"id":3159,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3258:3:5","memberName":"max","nodeType":"MemberAccess","src":"3244:17:5","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"src":"3236:25:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3167,"nodeType":"IfStatement","src":"3232:105:5","trueBody":{"id":3166,"nodeType":"Block","src":"3263:74:5","statements":[{"errorCall":{"arguments":[{"hexValue":"323234","id":3162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3315:3:5","typeDescriptions":{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},"value":"224"},{"id":3163,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3149,"src":"3320:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3161,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"3284:30:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3284:42:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3165,"nodeType":"RevertStatement","src":"3277:49:5"}]}},{"expression":{"arguments":[{"id":3170,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3149,"src":"3361:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3169,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3353:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"},"typeName":{"id":3168,"name":"uint224","nodeType":"ElementaryTypeName","src":"3353:7:5","typeDescriptions":{}}},"id":3171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3353:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"functionReturnParameters":3153,"id":3172,"nodeType":"Return","src":"3346:21:5"}]},"documentation":{"id":3147,"nodeType":"StructuredDocumentation","src":"2871:280:5","text":" @dev Returns the downcasted uint224 from uint256, reverting on\n overflow (when the input is greater than largest uint224).\n Counterpart to Solidity's `uint224` operator.\n Requirements:\n - input must fit into 224 bits"},"id":3174,"implemented":true,"kind":"function","modifiers":[],"name":"toUint224","nameLocation":"3165:9:5","nodeType":"FunctionDefinition","parameters":{"id":3150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3149,"mutability":"mutable","name":"value","nameLocation":"3183:5:5","nodeType":"VariableDeclaration","scope":3174,"src":"3175:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3148,"name":"uint256","nodeType":"ElementaryTypeName","src":"3175:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3174:15:5"},"returnParameters":{"id":3153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3152,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3174,"src":"3213:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"},"typeName":{"id":3151,"name":"uint224","nodeType":"ElementaryTypeName","src":"3213:7:5","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"visibility":"internal"}],"src":"3212:9:5"},"scope":4800,"src":"3156:218:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3201,"nodeType":"Block","src":"3731:152:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3182,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3177,"src":"3745:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3185,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3758:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"},"typeName":{"id":3184,"name":"uint216","nodeType":"ElementaryTypeName","src":"3758:7:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"}],"id":3183,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3753:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3753:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint216","typeString":"type(uint216)"}},"id":3187,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3767:3:5","memberName":"max","nodeType":"MemberAccess","src":"3753:17:5","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"src":"3745:25:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3195,"nodeType":"IfStatement","src":"3741:105:5","trueBody":{"id":3194,"nodeType":"Block","src":"3772:74:5","statements":[{"errorCall":{"arguments":[{"hexValue":"323136","id":3190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3824:3:5","typeDescriptions":{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},"value":"216"},{"id":3191,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3177,"src":"3829:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3189,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"3793:30:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3793:42:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3193,"nodeType":"RevertStatement","src":"3786:49:5"}]}},{"expression":{"arguments":[{"id":3198,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3177,"src":"3870:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3197,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3862:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"},"typeName":{"id":3196,"name":"uint216","nodeType":"ElementaryTypeName","src":"3862:7:5","typeDescriptions":{}}},"id":3199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3862:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"functionReturnParameters":3181,"id":3200,"nodeType":"Return","src":"3855:21:5"}]},"documentation":{"id":3175,"nodeType":"StructuredDocumentation","src":"3380:280:5","text":" @dev Returns the downcasted uint216 from uint256, reverting on\n overflow (when the input is greater than largest uint216).\n Counterpart to Solidity's `uint216` operator.\n Requirements:\n - input must fit into 216 bits"},"id":3202,"implemented":true,"kind":"function","modifiers":[],"name":"toUint216","nameLocation":"3674:9:5","nodeType":"FunctionDefinition","parameters":{"id":3178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3177,"mutability":"mutable","name":"value","nameLocation":"3692:5:5","nodeType":"VariableDeclaration","scope":3202,"src":"3684:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3176,"name":"uint256","nodeType":"ElementaryTypeName","src":"3684:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3683:15:5"},"returnParameters":{"id":3181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3180,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3202,"src":"3722:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"},"typeName":{"id":3179,"name":"uint216","nodeType":"ElementaryTypeName","src":"3722:7:5","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"visibility":"internal"}],"src":"3721:9:5"},"scope":4800,"src":"3665:218:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3229,"nodeType":"Block","src":"4240:152:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3210,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3205,"src":"4254:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3213,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4267:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"},"typeName":{"id":3212,"name":"uint208","nodeType":"ElementaryTypeName","src":"4267:7:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"}],"id":3211,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4262:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4262:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint208","typeString":"type(uint208)"}},"id":3215,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4276:3:5","memberName":"max","nodeType":"MemberAccess","src":"4262:17:5","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"src":"4254:25:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3223,"nodeType":"IfStatement","src":"4250:105:5","trueBody":{"id":3222,"nodeType":"Block","src":"4281:74:5","statements":[{"errorCall":{"arguments":[{"hexValue":"323038","id":3218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4333:3:5","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},"value":"208"},{"id":3219,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3205,"src":"4338:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3217,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"4302:30:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4302:42:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3221,"nodeType":"RevertStatement","src":"4295:49:5"}]}},{"expression":{"arguments":[{"id":3226,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3205,"src":"4379:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3225,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4371:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"},"typeName":{"id":3224,"name":"uint208","nodeType":"ElementaryTypeName","src":"4371:7:5","typeDescriptions":{}}},"id":3227,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4371:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"functionReturnParameters":3209,"id":3228,"nodeType":"Return","src":"4364:21:5"}]},"documentation":{"id":3203,"nodeType":"StructuredDocumentation","src":"3889:280:5","text":" @dev Returns the downcasted uint208 from uint256, reverting on\n overflow (when the input is greater than largest uint208).\n Counterpart to Solidity's `uint208` operator.\n Requirements:\n - input must fit into 208 bits"},"id":3230,"implemented":true,"kind":"function","modifiers":[],"name":"toUint208","nameLocation":"4183:9:5","nodeType":"FunctionDefinition","parameters":{"id":3206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3205,"mutability":"mutable","name":"value","nameLocation":"4201:5:5","nodeType":"VariableDeclaration","scope":3230,"src":"4193:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3204,"name":"uint256","nodeType":"ElementaryTypeName","src":"4193:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4192:15:5"},"returnParameters":{"id":3209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3208,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3230,"src":"4231:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":3207,"name":"uint208","nodeType":"ElementaryTypeName","src":"4231:7:5","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"}],"src":"4230:9:5"},"scope":4800,"src":"4174:218:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3257,"nodeType":"Block","src":"4749:152:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3238,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3233,"src":"4763:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3241,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4776:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"},"typeName":{"id":3240,"name":"uint200","nodeType":"ElementaryTypeName","src":"4776:7:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"}],"id":3239,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4771:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4771:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint200","typeString":"type(uint200)"}},"id":3243,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4785:3:5","memberName":"max","nodeType":"MemberAccess","src":"4771:17:5","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"src":"4763:25:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3251,"nodeType":"IfStatement","src":"4759:105:5","trueBody":{"id":3250,"nodeType":"Block","src":"4790:74:5","statements":[{"errorCall":{"arguments":[{"hexValue":"323030","id":3246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4842:3:5","typeDescriptions":{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},"value":"200"},{"id":3247,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3233,"src":"4847:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3245,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"4811:30:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4811:42:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3249,"nodeType":"RevertStatement","src":"4804:49:5"}]}},{"expression":{"arguments":[{"id":3254,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3233,"src":"4888:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3253,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4880:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"},"typeName":{"id":3252,"name":"uint200","nodeType":"ElementaryTypeName","src":"4880:7:5","typeDescriptions":{}}},"id":3255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4880:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"functionReturnParameters":3237,"id":3256,"nodeType":"Return","src":"4873:21:5"}]},"documentation":{"id":3231,"nodeType":"StructuredDocumentation","src":"4398:280:5","text":" @dev Returns the downcasted uint200 from uint256, reverting on\n overflow (when the input is greater than largest uint200).\n Counterpart to Solidity's `uint200` operator.\n Requirements:\n - input must fit into 200 bits"},"id":3258,"implemented":true,"kind":"function","modifiers":[],"name":"toUint200","nameLocation":"4692:9:5","nodeType":"FunctionDefinition","parameters":{"id":3234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3233,"mutability":"mutable","name":"value","nameLocation":"4710:5:5","nodeType":"VariableDeclaration","scope":3258,"src":"4702:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3232,"name":"uint256","nodeType":"ElementaryTypeName","src":"4702:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4701:15:5"},"returnParameters":{"id":3237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3236,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3258,"src":"4740:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"},"typeName":{"id":3235,"name":"uint200","nodeType":"ElementaryTypeName","src":"4740:7:5","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"visibility":"internal"}],"src":"4739:9:5"},"scope":4800,"src":"4683:218:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3285,"nodeType":"Block","src":"5258:152:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3266,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3261,"src":"5272:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3269,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5285:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"},"typeName":{"id":3268,"name":"uint192","nodeType":"ElementaryTypeName","src":"5285:7:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"}],"id":3267,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5280:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5280:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint192","typeString":"type(uint192)"}},"id":3271,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5294:3:5","memberName":"max","nodeType":"MemberAccess","src":"5280:17:5","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"src":"5272:25:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3279,"nodeType":"IfStatement","src":"5268:105:5","trueBody":{"id":3278,"nodeType":"Block","src":"5299:74:5","statements":[{"errorCall":{"arguments":[{"hexValue":"313932","id":3274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5351:3:5","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},{"id":3275,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3261,"src":"5356:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3273,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"5320:30:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5320:42:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3277,"nodeType":"RevertStatement","src":"5313:49:5"}]}},{"expression":{"arguments":[{"id":3282,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3261,"src":"5397:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3281,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5389:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"},"typeName":{"id":3280,"name":"uint192","nodeType":"ElementaryTypeName","src":"5389:7:5","typeDescriptions":{}}},"id":3283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5389:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"functionReturnParameters":3265,"id":3284,"nodeType":"Return","src":"5382:21:5"}]},"documentation":{"id":3259,"nodeType":"StructuredDocumentation","src":"4907:280:5","text":" @dev Returns the downcasted uint192 from uint256, reverting on\n overflow (when the input is greater than largest uint192).\n Counterpart to Solidity's `uint192` operator.\n Requirements:\n - input must fit into 192 bits"},"id":3286,"implemented":true,"kind":"function","modifiers":[],"name":"toUint192","nameLocation":"5201:9:5","nodeType":"FunctionDefinition","parameters":{"id":3262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3261,"mutability":"mutable","name":"value","nameLocation":"5219:5:5","nodeType":"VariableDeclaration","scope":3286,"src":"5211:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3260,"name":"uint256","nodeType":"ElementaryTypeName","src":"5211:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5210:15:5"},"returnParameters":{"id":3265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3264,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3286,"src":"5249:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"},"typeName":{"id":3263,"name":"uint192","nodeType":"ElementaryTypeName","src":"5249:7:5","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"visibility":"internal"}],"src":"5248:9:5"},"scope":4800,"src":"5192:218:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3313,"nodeType":"Block","src":"5767:152:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3294,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"5781:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3297,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5794:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"},"typeName":{"id":3296,"name":"uint184","nodeType":"ElementaryTypeName","src":"5794:7:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"}],"id":3295,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5789:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5789:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint184","typeString":"type(uint184)"}},"id":3299,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5803:3:5","memberName":"max","nodeType":"MemberAccess","src":"5789:17:5","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"src":"5781:25:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3307,"nodeType":"IfStatement","src":"5777:105:5","trueBody":{"id":3306,"nodeType":"Block","src":"5808:74:5","statements":[{"errorCall":{"arguments":[{"hexValue":"313834","id":3302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5860:3:5","typeDescriptions":{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},"value":"184"},{"id":3303,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"5865:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3301,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"5829:30:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5829:42:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3305,"nodeType":"RevertStatement","src":"5822:49:5"}]}},{"expression":{"arguments":[{"id":3310,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"5906:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3309,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5898:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"},"typeName":{"id":3308,"name":"uint184","nodeType":"ElementaryTypeName","src":"5898:7:5","typeDescriptions":{}}},"id":3311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5898:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"functionReturnParameters":3293,"id":3312,"nodeType":"Return","src":"5891:21:5"}]},"documentation":{"id":3287,"nodeType":"StructuredDocumentation","src":"5416:280:5","text":" @dev Returns the downcasted uint184 from uint256, reverting on\n overflow (when the input is greater than largest uint184).\n Counterpart to Solidity's `uint184` operator.\n Requirements:\n - input must fit into 184 bits"},"id":3314,"implemented":true,"kind":"function","modifiers":[],"name":"toUint184","nameLocation":"5710:9:5","nodeType":"FunctionDefinition","parameters":{"id":3290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3289,"mutability":"mutable","name":"value","nameLocation":"5728:5:5","nodeType":"VariableDeclaration","scope":3314,"src":"5720:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3288,"name":"uint256","nodeType":"ElementaryTypeName","src":"5720:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5719:15:5"},"returnParameters":{"id":3293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3292,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3314,"src":"5758:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"},"typeName":{"id":3291,"name":"uint184","nodeType":"ElementaryTypeName","src":"5758:7:5","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"visibility":"internal"}],"src":"5757:9:5"},"scope":4800,"src":"5701:218:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3341,"nodeType":"Block","src":"6276:152:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3322,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3317,"src":"6290:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3325,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6303:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"},"typeName":{"id":3324,"name":"uint176","nodeType":"ElementaryTypeName","src":"6303:7:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"}],"id":3323,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6298:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6298:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint176","typeString":"type(uint176)"}},"id":3327,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6312:3:5","memberName":"max","nodeType":"MemberAccess","src":"6298:17:5","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"src":"6290:25:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3335,"nodeType":"IfStatement","src":"6286:105:5","trueBody":{"id":3334,"nodeType":"Block","src":"6317:74:5","statements":[{"errorCall":{"arguments":[{"hexValue":"313736","id":3330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6369:3:5","typeDescriptions":{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},"value":"176"},{"id":3331,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3317,"src":"6374:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3329,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"6338:30:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3332,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6338:42:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3333,"nodeType":"RevertStatement","src":"6331:49:5"}]}},{"expression":{"arguments":[{"id":3338,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3317,"src":"6415:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3337,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6407:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"},"typeName":{"id":3336,"name":"uint176","nodeType":"ElementaryTypeName","src":"6407:7:5","typeDescriptions":{}}},"id":3339,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6407:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"functionReturnParameters":3321,"id":3340,"nodeType":"Return","src":"6400:21:5"}]},"documentation":{"id":3315,"nodeType":"StructuredDocumentation","src":"5925:280:5","text":" @dev Returns the downcasted uint176 from uint256, reverting on\n overflow (when the input is greater than largest uint176).\n Counterpart to Solidity's `uint176` operator.\n Requirements:\n - input must fit into 176 bits"},"id":3342,"implemented":true,"kind":"function","modifiers":[],"name":"toUint176","nameLocation":"6219:9:5","nodeType":"FunctionDefinition","parameters":{"id":3318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3317,"mutability":"mutable","name":"value","nameLocation":"6237:5:5","nodeType":"VariableDeclaration","scope":3342,"src":"6229:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3316,"name":"uint256","nodeType":"ElementaryTypeName","src":"6229:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6228:15:5"},"returnParameters":{"id":3321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3320,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3342,"src":"6267:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"},"typeName":{"id":3319,"name":"uint176","nodeType":"ElementaryTypeName","src":"6267:7:5","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"visibility":"internal"}],"src":"6266:9:5"},"scope":4800,"src":"6210:218:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3369,"nodeType":"Block","src":"6785:152:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3350,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3345,"src":"6799:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3353,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6812:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"},"typeName":{"id":3352,"name":"uint168","nodeType":"ElementaryTypeName","src":"6812:7:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"}],"id":3351,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6807:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6807:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint168","typeString":"type(uint168)"}},"id":3355,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6821:3:5","memberName":"max","nodeType":"MemberAccess","src":"6807:17:5","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"src":"6799:25:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3363,"nodeType":"IfStatement","src":"6795:105:5","trueBody":{"id":3362,"nodeType":"Block","src":"6826:74:5","statements":[{"errorCall":{"arguments":[{"hexValue":"313638","id":3358,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6878:3:5","typeDescriptions":{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},"value":"168"},{"id":3359,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3345,"src":"6883:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3357,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"6847:30:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3360,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6847:42:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3361,"nodeType":"RevertStatement","src":"6840:49:5"}]}},{"expression":{"arguments":[{"id":3366,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3345,"src":"6924:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3365,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6916:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"},"typeName":{"id":3364,"name":"uint168","nodeType":"ElementaryTypeName","src":"6916:7:5","typeDescriptions":{}}},"id":3367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6916:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"functionReturnParameters":3349,"id":3368,"nodeType":"Return","src":"6909:21:5"}]},"documentation":{"id":3343,"nodeType":"StructuredDocumentation","src":"6434:280:5","text":" @dev Returns the downcasted uint168 from uint256, reverting on\n overflow (when the input is greater than largest uint168).\n Counterpart to Solidity's `uint168` operator.\n Requirements:\n - input must fit into 168 bits"},"id":3370,"implemented":true,"kind":"function","modifiers":[],"name":"toUint168","nameLocation":"6728:9:5","nodeType":"FunctionDefinition","parameters":{"id":3346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3345,"mutability":"mutable","name":"value","nameLocation":"6746:5:5","nodeType":"VariableDeclaration","scope":3370,"src":"6738:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3344,"name":"uint256","nodeType":"ElementaryTypeName","src":"6738:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6737:15:5"},"returnParameters":{"id":3349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3348,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3370,"src":"6776:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"},"typeName":{"id":3347,"name":"uint168","nodeType":"ElementaryTypeName","src":"6776:7:5","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"visibility":"internal"}],"src":"6775:9:5"},"scope":4800,"src":"6719:218:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3397,"nodeType":"Block","src":"7294:152:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3378,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3373,"src":"7308:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3381,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7321:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3380,"name":"uint160","nodeType":"ElementaryTypeName","src":"7321:7:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"}],"id":3379,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"7316:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3382,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7316:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint160","typeString":"type(uint160)"}},"id":3383,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7330:3:5","memberName":"max","nodeType":"MemberAccess","src":"7316:17:5","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"7308:25:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3391,"nodeType":"IfStatement","src":"7304:105:5","trueBody":{"id":3390,"nodeType":"Block","src":"7335:74:5","statements":[{"errorCall":{"arguments":[{"hexValue":"313630","id":3386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7387:3:5","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},{"id":3387,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3373,"src":"7392:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3385,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"7356:30:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3388,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7356:42:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3389,"nodeType":"RevertStatement","src":"7349:49:5"}]}},{"expression":{"arguments":[{"id":3394,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3373,"src":"7433:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3393,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7425:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3392,"name":"uint160","nodeType":"ElementaryTypeName","src":"7425:7:5","typeDescriptions":{}}},"id":3395,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7425:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":3377,"id":3396,"nodeType":"Return","src":"7418:21:5"}]},"documentation":{"id":3371,"nodeType":"StructuredDocumentation","src":"6943:280:5","text":" @dev Returns the downcasted uint160 from uint256, reverting on\n overflow (when the input is greater than largest uint160).\n Counterpart to Solidity's `uint160` operator.\n Requirements:\n - input must fit into 160 bits"},"id":3398,"implemented":true,"kind":"function","modifiers":[],"name":"toUint160","nameLocation":"7237:9:5","nodeType":"FunctionDefinition","parameters":{"id":3374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3373,"mutability":"mutable","name":"value","nameLocation":"7255:5:5","nodeType":"VariableDeclaration","scope":3398,"src":"7247:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3372,"name":"uint256","nodeType":"ElementaryTypeName","src":"7247:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7246:15:5"},"returnParameters":{"id":3377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3376,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3398,"src":"7285:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":3375,"name":"uint160","nodeType":"ElementaryTypeName","src":"7285:7:5","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"7284:9:5"},"scope":4800,"src":"7228:218:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3425,"nodeType":"Block","src":"7803:152:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3406,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3401,"src":"7817:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3409,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7830:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"},"typeName":{"id":3408,"name":"uint152","nodeType":"ElementaryTypeName","src":"7830:7:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"}],"id":3407,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"7825:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7825:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint152","typeString":"type(uint152)"}},"id":3411,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7839:3:5","memberName":"max","nodeType":"MemberAccess","src":"7825:17:5","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"src":"7817:25:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3419,"nodeType":"IfStatement","src":"7813:105:5","trueBody":{"id":3418,"nodeType":"Block","src":"7844:74:5","statements":[{"errorCall":{"arguments":[{"hexValue":"313532","id":3414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7896:3:5","typeDescriptions":{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},"value":"152"},{"id":3415,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3401,"src":"7901:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3413,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"7865:30:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7865:42:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3417,"nodeType":"RevertStatement","src":"7858:49:5"}]}},{"expression":{"arguments":[{"id":3422,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3401,"src":"7942:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3421,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7934:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"},"typeName":{"id":3420,"name":"uint152","nodeType":"ElementaryTypeName","src":"7934:7:5","typeDescriptions":{}}},"id":3423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7934:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"functionReturnParameters":3405,"id":3424,"nodeType":"Return","src":"7927:21:5"}]},"documentation":{"id":3399,"nodeType":"StructuredDocumentation","src":"7452:280:5","text":" @dev Returns the downcasted uint152 from uint256, reverting on\n overflow (when the input is greater than largest uint152).\n Counterpart to Solidity's `uint152` operator.\n Requirements:\n - input must fit into 152 bits"},"id":3426,"implemented":true,"kind":"function","modifiers":[],"name":"toUint152","nameLocation":"7746:9:5","nodeType":"FunctionDefinition","parameters":{"id":3402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3401,"mutability":"mutable","name":"value","nameLocation":"7764:5:5","nodeType":"VariableDeclaration","scope":3426,"src":"7756:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3400,"name":"uint256","nodeType":"ElementaryTypeName","src":"7756:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7755:15:5"},"returnParameters":{"id":3405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3404,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3426,"src":"7794:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"},"typeName":{"id":3403,"name":"uint152","nodeType":"ElementaryTypeName","src":"7794:7:5","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"visibility":"internal"}],"src":"7793:9:5"},"scope":4800,"src":"7737:218:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3453,"nodeType":"Block","src":"8312:152:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3434,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3429,"src":"8326:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3437,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8339:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"},"typeName":{"id":3436,"name":"uint144","nodeType":"ElementaryTypeName","src":"8339:7:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"}],"id":3435,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8334:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8334:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint144","typeString":"type(uint144)"}},"id":3439,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8348:3:5","memberName":"max","nodeType":"MemberAccess","src":"8334:17:5","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"src":"8326:25:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3447,"nodeType":"IfStatement","src":"8322:105:5","trueBody":{"id":3446,"nodeType":"Block","src":"8353:74:5","statements":[{"errorCall":{"arguments":[{"hexValue":"313434","id":3442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8405:3:5","typeDescriptions":{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},"value":"144"},{"id":3443,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3429,"src":"8410:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3441,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"8374:30:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3444,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8374:42:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3445,"nodeType":"RevertStatement","src":"8367:49:5"}]}},{"expression":{"arguments":[{"id":3450,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3429,"src":"8451:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3449,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8443:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"},"typeName":{"id":3448,"name":"uint144","nodeType":"ElementaryTypeName","src":"8443:7:5","typeDescriptions":{}}},"id":3451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8443:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"functionReturnParameters":3433,"id":3452,"nodeType":"Return","src":"8436:21:5"}]},"documentation":{"id":3427,"nodeType":"StructuredDocumentation","src":"7961:280:5","text":" @dev Returns the downcasted uint144 from uint256, reverting on\n overflow (when the input is greater than largest uint144).\n Counterpart to Solidity's `uint144` operator.\n Requirements:\n - input must fit into 144 bits"},"id":3454,"implemented":true,"kind":"function","modifiers":[],"name":"toUint144","nameLocation":"8255:9:5","nodeType":"FunctionDefinition","parameters":{"id":3430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3429,"mutability":"mutable","name":"value","nameLocation":"8273:5:5","nodeType":"VariableDeclaration","scope":3454,"src":"8265:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3428,"name":"uint256","nodeType":"ElementaryTypeName","src":"8265:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8264:15:5"},"returnParameters":{"id":3433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3432,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3454,"src":"8303:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"},"typeName":{"id":3431,"name":"uint144","nodeType":"ElementaryTypeName","src":"8303:7:5","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"visibility":"internal"}],"src":"8302:9:5"},"scope":4800,"src":"8246:218:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3481,"nodeType":"Block","src":"8821:152:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3462,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3457,"src":"8835:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3465,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8848:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"},"typeName":{"id":3464,"name":"uint136","nodeType":"ElementaryTypeName","src":"8848:7:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"}],"id":3463,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8843:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8843:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint136","typeString":"type(uint136)"}},"id":3467,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8857:3:5","memberName":"max","nodeType":"MemberAccess","src":"8843:17:5","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"src":"8835:25:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3475,"nodeType":"IfStatement","src":"8831:105:5","trueBody":{"id":3474,"nodeType":"Block","src":"8862:74:5","statements":[{"errorCall":{"arguments":[{"hexValue":"313336","id":3470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8914:3:5","typeDescriptions":{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},"value":"136"},{"id":3471,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3457,"src":"8919:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3469,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"8883:30:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8883:42:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3473,"nodeType":"RevertStatement","src":"8876:49:5"}]}},{"expression":{"arguments":[{"id":3478,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3457,"src":"8960:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3477,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8952:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"},"typeName":{"id":3476,"name":"uint136","nodeType":"ElementaryTypeName","src":"8952:7:5","typeDescriptions":{}}},"id":3479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8952:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"functionReturnParameters":3461,"id":3480,"nodeType":"Return","src":"8945:21:5"}]},"documentation":{"id":3455,"nodeType":"StructuredDocumentation","src":"8470:280:5","text":" @dev Returns the downcasted uint136 from uint256, reverting on\n overflow (when the input is greater than largest uint136).\n Counterpart to Solidity's `uint136` operator.\n Requirements:\n - input must fit into 136 bits"},"id":3482,"implemented":true,"kind":"function","modifiers":[],"name":"toUint136","nameLocation":"8764:9:5","nodeType":"FunctionDefinition","parameters":{"id":3458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3457,"mutability":"mutable","name":"value","nameLocation":"8782:5:5","nodeType":"VariableDeclaration","scope":3482,"src":"8774:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3456,"name":"uint256","nodeType":"ElementaryTypeName","src":"8774:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8773:15:5"},"returnParameters":{"id":3461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3460,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3482,"src":"8812:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"},"typeName":{"id":3459,"name":"uint136","nodeType":"ElementaryTypeName","src":"8812:7:5","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"visibility":"internal"}],"src":"8811:9:5"},"scope":4800,"src":"8755:218:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3509,"nodeType":"Block","src":"9330:152:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3490,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3485,"src":"9344:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3493,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9357:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":3492,"name":"uint128","nodeType":"ElementaryTypeName","src":"9357:7:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"}],"id":3491,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"9352:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9352:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint128","typeString":"type(uint128)"}},"id":3495,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9366:3:5","memberName":"max","nodeType":"MemberAccess","src":"9352:17:5","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"9344:25:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3503,"nodeType":"IfStatement","src":"9340:105:5","trueBody":{"id":3502,"nodeType":"Block","src":"9371:74:5","statements":[{"errorCall":{"arguments":[{"hexValue":"313238","id":3498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9423:3:5","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},{"id":3499,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3485,"src":"9428:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3497,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"9392:30:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9392:42:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3501,"nodeType":"RevertStatement","src":"9385:49:5"}]}},{"expression":{"arguments":[{"id":3506,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3485,"src":"9469:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3505,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9461:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":3504,"name":"uint128","nodeType":"ElementaryTypeName","src":"9461:7:5","typeDescriptions":{}}},"id":3507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9461:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"functionReturnParameters":3489,"id":3508,"nodeType":"Return","src":"9454:21:5"}]},"documentation":{"id":3483,"nodeType":"StructuredDocumentation","src":"8979:280:5","text":" @dev Returns the downcasted uint128 from uint256, reverting on\n overflow (when the input is greater than largest uint128).\n Counterpart to Solidity's `uint128` operator.\n Requirements:\n - input must fit into 128 bits"},"id":3510,"implemented":true,"kind":"function","modifiers":[],"name":"toUint128","nameLocation":"9273:9:5","nodeType":"FunctionDefinition","parameters":{"id":3486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3485,"mutability":"mutable","name":"value","nameLocation":"9291:5:5","nodeType":"VariableDeclaration","scope":3510,"src":"9283:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3484,"name":"uint256","nodeType":"ElementaryTypeName","src":"9283:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9282:15:5"},"returnParameters":{"id":3489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3488,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3510,"src":"9321:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":3487,"name":"uint128","nodeType":"ElementaryTypeName","src":"9321:7:5","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"9320:9:5"},"scope":4800,"src":"9264:218:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3537,"nodeType":"Block","src":"9839:152:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3518,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3513,"src":"9853:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3521,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9866:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"},"typeName":{"id":3520,"name":"uint120","nodeType":"ElementaryTypeName","src":"9866:7:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"}],"id":3519,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"9861:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9861:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint120","typeString":"type(uint120)"}},"id":3523,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9875:3:5","memberName":"max","nodeType":"MemberAccess","src":"9861:17:5","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"src":"9853:25:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3531,"nodeType":"IfStatement","src":"9849:105:5","trueBody":{"id":3530,"nodeType":"Block","src":"9880:74:5","statements":[{"errorCall":{"arguments":[{"hexValue":"313230","id":3526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9932:3:5","typeDescriptions":{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},"value":"120"},{"id":3527,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3513,"src":"9937:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3525,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"9901:30:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9901:42:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3529,"nodeType":"RevertStatement","src":"9894:49:5"}]}},{"expression":{"arguments":[{"id":3534,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3513,"src":"9978:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3533,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9970:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"},"typeName":{"id":3532,"name":"uint120","nodeType":"ElementaryTypeName","src":"9970:7:5","typeDescriptions":{}}},"id":3535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9970:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"functionReturnParameters":3517,"id":3536,"nodeType":"Return","src":"9963:21:5"}]},"documentation":{"id":3511,"nodeType":"StructuredDocumentation","src":"9488:280:5","text":" @dev Returns the downcasted uint120 from uint256, reverting on\n overflow (when the input is greater than largest uint120).\n Counterpart to Solidity's `uint120` operator.\n Requirements:\n - input must fit into 120 bits"},"id":3538,"implemented":true,"kind":"function","modifiers":[],"name":"toUint120","nameLocation":"9782:9:5","nodeType":"FunctionDefinition","parameters":{"id":3514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3513,"mutability":"mutable","name":"value","nameLocation":"9800:5:5","nodeType":"VariableDeclaration","scope":3538,"src":"9792:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3512,"name":"uint256","nodeType":"ElementaryTypeName","src":"9792:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9791:15:5"},"returnParameters":{"id":3517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3516,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3538,"src":"9830:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"},"typeName":{"id":3515,"name":"uint120","nodeType":"ElementaryTypeName","src":"9830:7:5","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"visibility":"internal"}],"src":"9829:9:5"},"scope":4800,"src":"9773:218:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3565,"nodeType":"Block","src":"10348:152:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3546,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3541,"src":"10362:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3549,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10375:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":3548,"name":"uint112","nodeType":"ElementaryTypeName","src":"10375:7:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"}],"id":3547,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10370:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10370:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint112","typeString":"type(uint112)"}},"id":3551,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10384:3:5","memberName":"max","nodeType":"MemberAccess","src":"10370:17:5","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"src":"10362:25:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3559,"nodeType":"IfStatement","src":"10358:105:5","trueBody":{"id":3558,"nodeType":"Block","src":"10389:74:5","statements":[{"errorCall":{"arguments":[{"hexValue":"313132","id":3554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10441:3:5","typeDescriptions":{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},"value":"112"},{"id":3555,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3541,"src":"10446:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3553,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"10410:30:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10410:42:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3557,"nodeType":"RevertStatement","src":"10403:49:5"}]}},{"expression":{"arguments":[{"id":3562,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3541,"src":"10487:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3561,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10479:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":3560,"name":"uint112","nodeType":"ElementaryTypeName","src":"10479:7:5","typeDescriptions":{}}},"id":3563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10479:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"functionReturnParameters":3545,"id":3564,"nodeType":"Return","src":"10472:21:5"}]},"documentation":{"id":3539,"nodeType":"StructuredDocumentation","src":"9997:280:5","text":" @dev Returns the downcasted uint112 from uint256, reverting on\n overflow (when the input is greater than largest uint112).\n Counterpart to Solidity's `uint112` operator.\n Requirements:\n - input must fit into 112 bits"},"id":3566,"implemented":true,"kind":"function","modifiers":[],"name":"toUint112","nameLocation":"10291:9:5","nodeType":"FunctionDefinition","parameters":{"id":3542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3541,"mutability":"mutable","name":"value","nameLocation":"10309:5:5","nodeType":"VariableDeclaration","scope":3566,"src":"10301:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3540,"name":"uint256","nodeType":"ElementaryTypeName","src":"10301:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10300:15:5"},"returnParameters":{"id":3545,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3544,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3566,"src":"10339:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":3543,"name":"uint112","nodeType":"ElementaryTypeName","src":"10339:7:5","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"}],"src":"10338:9:5"},"scope":4800,"src":"10282:218:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3593,"nodeType":"Block","src":"10857:152:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3574,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3569,"src":"10871:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3577,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10884:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"},"typeName":{"id":3576,"name":"uint104","nodeType":"ElementaryTypeName","src":"10884:7:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"}],"id":3575,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10879:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10879:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint104","typeString":"type(uint104)"}},"id":3579,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10893:3:5","memberName":"max","nodeType":"MemberAccess","src":"10879:17:5","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"src":"10871:25:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3587,"nodeType":"IfStatement","src":"10867:105:5","trueBody":{"id":3586,"nodeType":"Block","src":"10898:74:5","statements":[{"errorCall":{"arguments":[{"hexValue":"313034","id":3582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10950:3:5","typeDescriptions":{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},"value":"104"},{"id":3583,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3569,"src":"10955:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3581,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"10919:30:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10919:42:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3585,"nodeType":"RevertStatement","src":"10912:49:5"}]}},{"expression":{"arguments":[{"id":3590,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3569,"src":"10996:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3589,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10988:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"},"typeName":{"id":3588,"name":"uint104","nodeType":"ElementaryTypeName","src":"10988:7:5","typeDescriptions":{}}},"id":3591,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10988:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"functionReturnParameters":3573,"id":3592,"nodeType":"Return","src":"10981:21:5"}]},"documentation":{"id":3567,"nodeType":"StructuredDocumentation","src":"10506:280:5","text":" @dev Returns the downcasted uint104 from uint256, reverting on\n overflow (when the input is greater than largest uint104).\n Counterpart to Solidity's `uint104` operator.\n Requirements:\n - input must fit into 104 bits"},"id":3594,"implemented":true,"kind":"function","modifiers":[],"name":"toUint104","nameLocation":"10800:9:5","nodeType":"FunctionDefinition","parameters":{"id":3570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3569,"mutability":"mutable","name":"value","nameLocation":"10818:5:5","nodeType":"VariableDeclaration","scope":3594,"src":"10810:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3568,"name":"uint256","nodeType":"ElementaryTypeName","src":"10810:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10809:15:5"},"returnParameters":{"id":3573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3572,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3594,"src":"10848:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"},"typeName":{"id":3571,"name":"uint104","nodeType":"ElementaryTypeName","src":"10848:7:5","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"visibility":"internal"}],"src":"10847:9:5"},"scope":4800,"src":"10791:218:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3621,"nodeType":"Block","src":"11360:149:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3602,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3597,"src":"11374:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3605,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11387:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":3604,"name":"uint96","nodeType":"ElementaryTypeName","src":"11387:6:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"}],"id":3603,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11382:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11382:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint96","typeString":"type(uint96)"}},"id":3607,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11395:3:5","memberName":"max","nodeType":"MemberAccess","src":"11382:16:5","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"11374:24:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3615,"nodeType":"IfStatement","src":"11370:103:5","trueBody":{"id":3614,"nodeType":"Block","src":"11400:73:5","statements":[{"errorCall":{"arguments":[{"hexValue":"3936","id":3610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11452:2:5","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"96"},{"id":3611,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3597,"src":"11456:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3609,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"11421:30:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11421:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3613,"nodeType":"RevertStatement","src":"11414:48:5"}]}},{"expression":{"arguments":[{"id":3618,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3597,"src":"11496:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3617,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11489:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":3616,"name":"uint96","nodeType":"ElementaryTypeName","src":"11489:6:5","typeDescriptions":{}}},"id":3619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11489:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"functionReturnParameters":3601,"id":3620,"nodeType":"Return","src":"11482:20:5"}]},"documentation":{"id":3595,"nodeType":"StructuredDocumentation","src":"11015:276:5","text":" @dev Returns the downcasted uint96 from uint256, reverting on\n overflow (when the input is greater than largest uint96).\n Counterpart to Solidity's `uint96` operator.\n Requirements:\n - input must fit into 96 bits"},"id":3622,"implemented":true,"kind":"function","modifiers":[],"name":"toUint96","nameLocation":"11305:8:5","nodeType":"FunctionDefinition","parameters":{"id":3598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3597,"mutability":"mutable","name":"value","nameLocation":"11322:5:5","nodeType":"VariableDeclaration","scope":3622,"src":"11314:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3596,"name":"uint256","nodeType":"ElementaryTypeName","src":"11314:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11313:15:5"},"returnParameters":{"id":3601,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3600,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3622,"src":"11352:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3599,"name":"uint96","nodeType":"ElementaryTypeName","src":"11352:6:5","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"11351:8:5"},"scope":4800,"src":"11296:213:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3649,"nodeType":"Block","src":"11860:149:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3630,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3625,"src":"11874:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3633,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11887:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"},"typeName":{"id":3632,"name":"uint88","nodeType":"ElementaryTypeName","src":"11887:6:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"}],"id":3631,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11882:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11882:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint88","typeString":"type(uint88)"}},"id":3635,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11895:3:5","memberName":"max","nodeType":"MemberAccess","src":"11882:16:5","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"src":"11874:24:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3643,"nodeType":"IfStatement","src":"11870:103:5","trueBody":{"id":3642,"nodeType":"Block","src":"11900:73:5","statements":[{"errorCall":{"arguments":[{"hexValue":"3838","id":3638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11952:2:5","typeDescriptions":{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},"value":"88"},{"id":3639,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3625,"src":"11956:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3637,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"11921:30:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11921:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3641,"nodeType":"RevertStatement","src":"11914:48:5"}]}},{"expression":{"arguments":[{"id":3646,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3625,"src":"11996:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3645,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11989:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"},"typeName":{"id":3644,"name":"uint88","nodeType":"ElementaryTypeName","src":"11989:6:5","typeDescriptions":{}}},"id":3647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11989:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"functionReturnParameters":3629,"id":3648,"nodeType":"Return","src":"11982:20:5"}]},"documentation":{"id":3623,"nodeType":"StructuredDocumentation","src":"11515:276:5","text":" @dev Returns the downcasted uint88 from uint256, reverting on\n overflow (when the input is greater than largest uint88).\n Counterpart to Solidity's `uint88` operator.\n Requirements:\n - input must fit into 88 bits"},"id":3650,"implemented":true,"kind":"function","modifiers":[],"name":"toUint88","nameLocation":"11805:8:5","nodeType":"FunctionDefinition","parameters":{"id":3626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3625,"mutability":"mutable","name":"value","nameLocation":"11822:5:5","nodeType":"VariableDeclaration","scope":3650,"src":"11814:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3624,"name":"uint256","nodeType":"ElementaryTypeName","src":"11814:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11813:15:5"},"returnParameters":{"id":3629,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3628,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3650,"src":"11852:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"},"typeName":{"id":3627,"name":"uint88","nodeType":"ElementaryTypeName","src":"11852:6:5","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"visibility":"internal"}],"src":"11851:8:5"},"scope":4800,"src":"11796:213:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3677,"nodeType":"Block","src":"12360:149:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3658,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3653,"src":"12374:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3661,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12387:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"},"typeName":{"id":3660,"name":"uint80","nodeType":"ElementaryTypeName","src":"12387:6:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"}],"id":3659,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"12382:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12382:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint80","typeString":"type(uint80)"}},"id":3663,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12395:3:5","memberName":"max","nodeType":"MemberAccess","src":"12382:16:5","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"src":"12374:24:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3671,"nodeType":"IfStatement","src":"12370:103:5","trueBody":{"id":3670,"nodeType":"Block","src":"12400:73:5","statements":[{"errorCall":{"arguments":[{"hexValue":"3830","id":3666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12452:2:5","typeDescriptions":{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},"value":"80"},{"id":3667,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3653,"src":"12456:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3665,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"12421:30:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12421:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3669,"nodeType":"RevertStatement","src":"12414:48:5"}]}},{"expression":{"arguments":[{"id":3674,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3653,"src":"12496:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3673,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12489:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"},"typeName":{"id":3672,"name":"uint80","nodeType":"ElementaryTypeName","src":"12489:6:5","typeDescriptions":{}}},"id":3675,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12489:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"functionReturnParameters":3657,"id":3676,"nodeType":"Return","src":"12482:20:5"}]},"documentation":{"id":3651,"nodeType":"StructuredDocumentation","src":"12015:276:5","text":" @dev Returns the downcasted uint80 from uint256, reverting on\n overflow (when the input is greater than largest uint80).\n Counterpart to Solidity's `uint80` operator.\n Requirements:\n - input must fit into 80 bits"},"id":3678,"implemented":true,"kind":"function","modifiers":[],"name":"toUint80","nameLocation":"12305:8:5","nodeType":"FunctionDefinition","parameters":{"id":3654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3653,"mutability":"mutable","name":"value","nameLocation":"12322:5:5","nodeType":"VariableDeclaration","scope":3678,"src":"12314:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3652,"name":"uint256","nodeType":"ElementaryTypeName","src":"12314:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12313:15:5"},"returnParameters":{"id":3657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3656,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3678,"src":"12352:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"},"typeName":{"id":3655,"name":"uint80","nodeType":"ElementaryTypeName","src":"12352:6:5","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"visibility":"internal"}],"src":"12351:8:5"},"scope":4800,"src":"12296:213:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3705,"nodeType":"Block","src":"12860:149:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3686,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3681,"src":"12874:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3689,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12887:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"},"typeName":{"id":3688,"name":"uint72","nodeType":"ElementaryTypeName","src":"12887:6:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"}],"id":3687,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"12882:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12882:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint72","typeString":"type(uint72)"}},"id":3691,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12895:3:5","memberName":"max","nodeType":"MemberAccess","src":"12882:16:5","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"src":"12874:24:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3699,"nodeType":"IfStatement","src":"12870:103:5","trueBody":{"id":3698,"nodeType":"Block","src":"12900:73:5","statements":[{"errorCall":{"arguments":[{"hexValue":"3732","id":3694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12952:2:5","typeDescriptions":{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},"value":"72"},{"id":3695,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3681,"src":"12956:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3693,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"12921:30:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12921:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3697,"nodeType":"RevertStatement","src":"12914:48:5"}]}},{"expression":{"arguments":[{"id":3702,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3681,"src":"12996:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3701,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12989:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"},"typeName":{"id":3700,"name":"uint72","nodeType":"ElementaryTypeName","src":"12989:6:5","typeDescriptions":{}}},"id":3703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12989:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"functionReturnParameters":3685,"id":3704,"nodeType":"Return","src":"12982:20:5"}]},"documentation":{"id":3679,"nodeType":"StructuredDocumentation","src":"12515:276:5","text":" @dev Returns the downcasted uint72 from uint256, reverting on\n overflow (when the input is greater than largest uint72).\n Counterpart to Solidity's `uint72` operator.\n Requirements:\n - input must fit into 72 bits"},"id":3706,"implemented":true,"kind":"function","modifiers":[],"name":"toUint72","nameLocation":"12805:8:5","nodeType":"FunctionDefinition","parameters":{"id":3682,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3681,"mutability":"mutable","name":"value","nameLocation":"12822:5:5","nodeType":"VariableDeclaration","scope":3706,"src":"12814:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3680,"name":"uint256","nodeType":"ElementaryTypeName","src":"12814:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12813:15:5"},"returnParameters":{"id":3685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3684,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3706,"src":"12852:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"},"typeName":{"id":3683,"name":"uint72","nodeType":"ElementaryTypeName","src":"12852:6:5","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"visibility":"internal"}],"src":"12851:8:5"},"scope":4800,"src":"12796:213:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3733,"nodeType":"Block","src":"13360:149:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3714,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3709,"src":"13374:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3717,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13387:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":3716,"name":"uint64","nodeType":"ElementaryTypeName","src":"13387:6:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}],"id":3715,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"13382:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13382:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint64","typeString":"type(uint64)"}},"id":3719,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13395:3:5","memberName":"max","nodeType":"MemberAccess","src":"13382:16:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"13374:24:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3727,"nodeType":"IfStatement","src":"13370:103:5","trueBody":{"id":3726,"nodeType":"Block","src":"13400:73:5","statements":[{"errorCall":{"arguments":[{"hexValue":"3634","id":3722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13452:2:5","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},{"id":3723,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3709,"src":"13456:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3721,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"13421:30:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13421:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3725,"nodeType":"RevertStatement","src":"13414:48:5"}]}},{"expression":{"arguments":[{"id":3730,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3709,"src":"13496:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3729,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13489:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":3728,"name":"uint64","nodeType":"ElementaryTypeName","src":"13489:6:5","typeDescriptions":{}}},"id":3731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13489:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":3713,"id":3732,"nodeType":"Return","src":"13482:20:5"}]},"documentation":{"id":3707,"nodeType":"StructuredDocumentation","src":"13015:276:5","text":" @dev Returns the downcasted uint64 from uint256, reverting on\n overflow (when the input is greater than largest uint64).\n Counterpart to Solidity's `uint64` operator.\n Requirements:\n - input must fit into 64 bits"},"id":3734,"implemented":true,"kind":"function","modifiers":[],"name":"toUint64","nameLocation":"13305:8:5","nodeType":"FunctionDefinition","parameters":{"id":3710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3709,"mutability":"mutable","name":"value","nameLocation":"13322:5:5","nodeType":"VariableDeclaration","scope":3734,"src":"13314:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3708,"name":"uint256","nodeType":"ElementaryTypeName","src":"13314:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13313:15:5"},"returnParameters":{"id":3713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3712,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3734,"src":"13352:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3711,"name":"uint64","nodeType":"ElementaryTypeName","src":"13352:6:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"13351:8:5"},"scope":4800,"src":"13296:213:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3761,"nodeType":"Block","src":"13860:149:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3742,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3737,"src":"13874:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3745,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13887:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"},"typeName":{"id":3744,"name":"uint56","nodeType":"ElementaryTypeName","src":"13887:6:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"}],"id":3743,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"13882:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13882:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint56","typeString":"type(uint56)"}},"id":3747,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13895:3:5","memberName":"max","nodeType":"MemberAccess","src":"13882:16:5","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"src":"13874:24:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3755,"nodeType":"IfStatement","src":"13870:103:5","trueBody":{"id":3754,"nodeType":"Block","src":"13900:73:5","statements":[{"errorCall":{"arguments":[{"hexValue":"3536","id":3750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13952:2:5","typeDescriptions":{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},"value":"56"},{"id":3751,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3737,"src":"13956:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3749,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"13921:30:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3752,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13921:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3753,"nodeType":"RevertStatement","src":"13914:48:5"}]}},{"expression":{"arguments":[{"id":3758,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3737,"src":"13996:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3757,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13989:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"},"typeName":{"id":3756,"name":"uint56","nodeType":"ElementaryTypeName","src":"13989:6:5","typeDescriptions":{}}},"id":3759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13989:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"functionReturnParameters":3741,"id":3760,"nodeType":"Return","src":"13982:20:5"}]},"documentation":{"id":3735,"nodeType":"StructuredDocumentation","src":"13515:276:5","text":" @dev Returns the downcasted uint56 from uint256, reverting on\n overflow (when the input is greater than largest uint56).\n Counterpart to Solidity's `uint56` operator.\n Requirements:\n - input must fit into 56 bits"},"id":3762,"implemented":true,"kind":"function","modifiers":[],"name":"toUint56","nameLocation":"13805:8:5","nodeType":"FunctionDefinition","parameters":{"id":3738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3737,"mutability":"mutable","name":"value","nameLocation":"13822:5:5","nodeType":"VariableDeclaration","scope":3762,"src":"13814:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3736,"name":"uint256","nodeType":"ElementaryTypeName","src":"13814:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13813:15:5"},"returnParameters":{"id":3741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3740,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3762,"src":"13852:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"},"typeName":{"id":3739,"name":"uint56","nodeType":"ElementaryTypeName","src":"13852:6:5","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"visibility":"internal"}],"src":"13851:8:5"},"scope":4800,"src":"13796:213:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3789,"nodeType":"Block","src":"14360:149:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3770,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3765,"src":"14374:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3773,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14387:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":3772,"name":"uint48","nodeType":"ElementaryTypeName","src":"14387:6:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"}],"id":3771,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"14382:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14382:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint48","typeString":"type(uint48)"}},"id":3775,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14395:3:5","memberName":"max","nodeType":"MemberAccess","src":"14382:16:5","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"14374:24:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3783,"nodeType":"IfStatement","src":"14370:103:5","trueBody":{"id":3782,"nodeType":"Block","src":"14400:73:5","statements":[{"errorCall":{"arguments":[{"hexValue":"3438","id":3778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14452:2:5","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},{"id":3779,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3765,"src":"14456:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3777,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"14421:30:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14421:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3781,"nodeType":"RevertStatement","src":"14414:48:5"}]}},{"expression":{"arguments":[{"id":3786,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3765,"src":"14496:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3785,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14489:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":3784,"name":"uint48","nodeType":"ElementaryTypeName","src":"14489:6:5","typeDescriptions":{}}},"id":3787,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14489:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"functionReturnParameters":3769,"id":3788,"nodeType":"Return","src":"14482:20:5"}]},"documentation":{"id":3763,"nodeType":"StructuredDocumentation","src":"14015:276:5","text":" @dev Returns the downcasted uint48 from uint256, reverting on\n overflow (when the input is greater than largest uint48).\n Counterpart to Solidity's `uint48` operator.\n Requirements:\n - input must fit into 48 bits"},"id":3790,"implemented":true,"kind":"function","modifiers":[],"name":"toUint48","nameLocation":"14305:8:5","nodeType":"FunctionDefinition","parameters":{"id":3766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3765,"mutability":"mutable","name":"value","nameLocation":"14322:5:5","nodeType":"VariableDeclaration","scope":3790,"src":"14314:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3764,"name":"uint256","nodeType":"ElementaryTypeName","src":"14314:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14313:15:5"},"returnParameters":{"id":3769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3768,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3790,"src":"14352:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":3767,"name":"uint48","nodeType":"ElementaryTypeName","src":"14352:6:5","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"14351:8:5"},"scope":4800,"src":"14296:213:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3817,"nodeType":"Block","src":"14860:149:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3798,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3793,"src":"14874:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3801,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14887:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"},"typeName":{"id":3800,"name":"uint40","nodeType":"ElementaryTypeName","src":"14887:6:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"}],"id":3799,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"14882:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14882:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint40","typeString":"type(uint40)"}},"id":3803,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14895:3:5","memberName":"max","nodeType":"MemberAccess","src":"14882:16:5","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"src":"14874:24:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3811,"nodeType":"IfStatement","src":"14870:103:5","trueBody":{"id":3810,"nodeType":"Block","src":"14900:73:5","statements":[{"errorCall":{"arguments":[{"hexValue":"3430","id":3806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14952:2:5","typeDescriptions":{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},"value":"40"},{"id":3807,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3793,"src":"14956:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3805,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"14921:30:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14921:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3809,"nodeType":"RevertStatement","src":"14914:48:5"}]}},{"expression":{"arguments":[{"id":3814,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3793,"src":"14996:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3813,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14989:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"},"typeName":{"id":3812,"name":"uint40","nodeType":"ElementaryTypeName","src":"14989:6:5","typeDescriptions":{}}},"id":3815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14989:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"functionReturnParameters":3797,"id":3816,"nodeType":"Return","src":"14982:20:5"}]},"documentation":{"id":3791,"nodeType":"StructuredDocumentation","src":"14515:276:5","text":" @dev Returns the downcasted uint40 from uint256, reverting on\n overflow (when the input is greater than largest uint40).\n Counterpart to Solidity's `uint40` operator.\n Requirements:\n - input must fit into 40 bits"},"id":3818,"implemented":true,"kind":"function","modifiers":[],"name":"toUint40","nameLocation":"14805:8:5","nodeType":"FunctionDefinition","parameters":{"id":3794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3793,"mutability":"mutable","name":"value","nameLocation":"14822:5:5","nodeType":"VariableDeclaration","scope":3818,"src":"14814:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3792,"name":"uint256","nodeType":"ElementaryTypeName","src":"14814:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14813:15:5"},"returnParameters":{"id":3797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3796,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3818,"src":"14852:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"},"typeName":{"id":3795,"name":"uint40","nodeType":"ElementaryTypeName","src":"14852:6:5","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"visibility":"internal"}],"src":"14851:8:5"},"scope":4800,"src":"14796:213:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3845,"nodeType":"Block","src":"15360:149:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3826,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3821,"src":"15374:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3829,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15387:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":3828,"name":"uint32","nodeType":"ElementaryTypeName","src":"15387:6:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"}],"id":3827,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"15382:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15382:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint32","typeString":"type(uint32)"}},"id":3831,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15395:3:5","memberName":"max","nodeType":"MemberAccess","src":"15382:16:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"15374:24:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3839,"nodeType":"IfStatement","src":"15370:103:5","trueBody":{"id":3838,"nodeType":"Block","src":"15400:73:5","statements":[{"errorCall":{"arguments":[{"hexValue":"3332","id":3834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15452:2:5","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},{"id":3835,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3821,"src":"15456:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3833,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"15421:30:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15421:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3837,"nodeType":"RevertStatement","src":"15414:48:5"}]}},{"expression":{"arguments":[{"id":3842,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3821,"src":"15496:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3841,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15489:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":3840,"name":"uint32","nodeType":"ElementaryTypeName","src":"15489:6:5","typeDescriptions":{}}},"id":3843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15489:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":3825,"id":3844,"nodeType":"Return","src":"15482:20:5"}]},"documentation":{"id":3819,"nodeType":"StructuredDocumentation","src":"15015:276:5","text":" @dev Returns the downcasted uint32 from uint256, reverting on\n overflow (when the input is greater than largest uint32).\n Counterpart to Solidity's `uint32` operator.\n Requirements:\n - input must fit into 32 bits"},"id":3846,"implemented":true,"kind":"function","modifiers":[],"name":"toUint32","nameLocation":"15305:8:5","nodeType":"FunctionDefinition","parameters":{"id":3822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3821,"mutability":"mutable","name":"value","nameLocation":"15322:5:5","nodeType":"VariableDeclaration","scope":3846,"src":"15314:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3820,"name":"uint256","nodeType":"ElementaryTypeName","src":"15314:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15313:15:5"},"returnParameters":{"id":3825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3824,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3846,"src":"15352:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3823,"name":"uint32","nodeType":"ElementaryTypeName","src":"15352:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"15351:8:5"},"scope":4800,"src":"15296:213:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3873,"nodeType":"Block","src":"15860:149:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3854,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3849,"src":"15874:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3857,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15887:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":3856,"name":"uint24","nodeType":"ElementaryTypeName","src":"15887:6:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"}],"id":3855,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"15882:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15882:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint24","typeString":"type(uint24)"}},"id":3859,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15895:3:5","memberName":"max","nodeType":"MemberAccess","src":"15882:16:5","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"src":"15874:24:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3867,"nodeType":"IfStatement","src":"15870:103:5","trueBody":{"id":3866,"nodeType":"Block","src":"15900:73:5","statements":[{"errorCall":{"arguments":[{"hexValue":"3234","id":3862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15952:2:5","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},{"id":3863,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3849,"src":"15956:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3861,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"15921:30:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3864,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15921:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3865,"nodeType":"RevertStatement","src":"15914:48:5"}]}},{"expression":{"arguments":[{"id":3870,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3849,"src":"15996:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3869,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15989:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":3868,"name":"uint24","nodeType":"ElementaryTypeName","src":"15989:6:5","typeDescriptions":{}}},"id":3871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15989:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"functionReturnParameters":3853,"id":3872,"nodeType":"Return","src":"15982:20:5"}]},"documentation":{"id":3847,"nodeType":"StructuredDocumentation","src":"15515:276:5","text":" @dev Returns the downcasted uint24 from uint256, reverting on\n overflow (when the input is greater than largest uint24).\n Counterpart to Solidity's `uint24` operator.\n Requirements:\n - input must fit into 24 bits"},"id":3874,"implemented":true,"kind":"function","modifiers":[],"name":"toUint24","nameLocation":"15805:8:5","nodeType":"FunctionDefinition","parameters":{"id":3850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3849,"mutability":"mutable","name":"value","nameLocation":"15822:5:5","nodeType":"VariableDeclaration","scope":3874,"src":"15814:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3848,"name":"uint256","nodeType":"ElementaryTypeName","src":"15814:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15813:15:5"},"returnParameters":{"id":3853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3852,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3874,"src":"15852:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":3851,"name":"uint24","nodeType":"ElementaryTypeName","src":"15852:6:5","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"15851:8:5"},"scope":4800,"src":"15796:213:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3901,"nodeType":"Block","src":"16360:149:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3882,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3877,"src":"16374:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3885,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16387:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":3884,"name":"uint16","nodeType":"ElementaryTypeName","src":"16387:6:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"}],"id":3883,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"16382:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3886,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16382:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint16","typeString":"type(uint16)"}},"id":3887,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16395:3:5","memberName":"max","nodeType":"MemberAccess","src":"16382:16:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"16374:24:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3895,"nodeType":"IfStatement","src":"16370:103:5","trueBody":{"id":3894,"nodeType":"Block","src":"16400:73:5","statements":[{"errorCall":{"arguments":[{"hexValue":"3136","id":3890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16452:2:5","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},{"id":3891,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3877,"src":"16456:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3889,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"16421:30:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3892,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16421:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3893,"nodeType":"RevertStatement","src":"16414:48:5"}]}},{"expression":{"arguments":[{"id":3898,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3877,"src":"16496:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3897,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16489:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":3896,"name":"uint16","nodeType":"ElementaryTypeName","src":"16489:6:5","typeDescriptions":{}}},"id":3899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16489:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"functionReturnParameters":3881,"id":3900,"nodeType":"Return","src":"16482:20:5"}]},"documentation":{"id":3875,"nodeType":"StructuredDocumentation","src":"16015:276:5","text":" @dev Returns the downcasted uint16 from uint256, reverting on\n overflow (when the input is greater than largest uint16).\n Counterpart to Solidity's `uint16` operator.\n Requirements:\n - input must fit into 16 bits"},"id":3902,"implemented":true,"kind":"function","modifiers":[],"name":"toUint16","nameLocation":"16305:8:5","nodeType":"FunctionDefinition","parameters":{"id":3878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3877,"mutability":"mutable","name":"value","nameLocation":"16322:5:5","nodeType":"VariableDeclaration","scope":3902,"src":"16314:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3876,"name":"uint256","nodeType":"ElementaryTypeName","src":"16314:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16313:15:5"},"returnParameters":{"id":3881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3880,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3902,"src":"16352:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3879,"name":"uint16","nodeType":"ElementaryTypeName","src":"16352:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"16351:8:5"},"scope":4800,"src":"16296:213:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3929,"nodeType":"Block","src":"16854:146:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3910,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3905,"src":"16868:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3913,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16881:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3912,"name":"uint8","nodeType":"ElementaryTypeName","src":"16881:5:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":3911,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"16876:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16876:11:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":3915,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16888:3:5","memberName":"max","nodeType":"MemberAccess","src":"16876:15:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"16868:23:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3923,"nodeType":"IfStatement","src":"16864:101:5","trueBody":{"id":3922,"nodeType":"Block","src":"16893:72:5","statements":[{"errorCall":{"arguments":[{"hexValue":"38","id":3918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16945:1:5","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},{"id":3919,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3905,"src":"16948:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3917,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"16914:30:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$_t_error_$","typeString":"function (uint8,uint256) pure returns (error)"}},"id":3920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16914:40:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3921,"nodeType":"RevertStatement","src":"16907:47:5"}]}},{"expression":{"arguments":[{"id":3926,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3905,"src":"16987:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3925,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16981:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3924,"name":"uint8","nodeType":"ElementaryTypeName","src":"16981:5:5","typeDescriptions":{}}},"id":3927,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16981:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":3909,"id":3928,"nodeType":"Return","src":"16974:19:5"}]},"documentation":{"id":3903,"nodeType":"StructuredDocumentation","src":"16515:272:5","text":" @dev Returns the downcasted uint8 from uint256, reverting on\n overflow (when the input is greater than largest uint8).\n Counterpart to Solidity's `uint8` operator.\n Requirements:\n - input must fit into 8 bits"},"id":3930,"implemented":true,"kind":"function","modifiers":[],"name":"toUint8","nameLocation":"16801:7:5","nodeType":"FunctionDefinition","parameters":{"id":3906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3905,"mutability":"mutable","name":"value","nameLocation":"16817:5:5","nodeType":"VariableDeclaration","scope":3930,"src":"16809:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3904,"name":"uint256","nodeType":"ElementaryTypeName","src":"16809:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16808:15:5"},"returnParameters":{"id":3909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3908,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3930,"src":"16847:5:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3907,"name":"uint8","nodeType":"ElementaryTypeName","src":"16847:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"16846:7:5"},"scope":4800,"src":"16792:208:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3952,"nodeType":"Block","src":"17236:128:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3938,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3933,"src":"17250:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":3939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17258:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17250:9:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3946,"nodeType":"IfStatement","src":"17246:81:5","trueBody":{"id":3945,"nodeType":"Block","src":"17261:66:5","statements":[{"errorCall":{"arguments":[{"id":3942,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3933,"src":"17310:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3941,"name":"SafeCastOverflowedIntToUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3050,"src":"17282:27:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_int256_$returns$_t_error_$","typeString":"function (int256) pure returns (error)"}},"id":3943,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17282:34:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3944,"nodeType":"RevertStatement","src":"17275:41:5"}]}},{"expression":{"arguments":[{"id":3949,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3933,"src":"17351:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3948,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17343:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3947,"name":"uint256","nodeType":"ElementaryTypeName","src":"17343:7:5","typeDescriptions":{}}},"id":3950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17343:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3937,"id":3951,"nodeType":"Return","src":"17336:21:5"}]},"documentation":{"id":3931,"nodeType":"StructuredDocumentation","src":"17006:160:5","text":" @dev Converts a signed int256 into an unsigned uint256.\n Requirements:\n - input must be greater than or equal to 0."},"id":3953,"implemented":true,"kind":"function","modifiers":[],"name":"toUint256","nameLocation":"17180:9:5","nodeType":"FunctionDefinition","parameters":{"id":3934,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3933,"mutability":"mutable","name":"value","nameLocation":"17197:5:5","nodeType":"VariableDeclaration","scope":3953,"src":"17190:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3932,"name":"int256","nodeType":"ElementaryTypeName","src":"17190:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"17189:14:5"},"returnParameters":{"id":3937,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3936,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3953,"src":"17227:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3935,"name":"uint256","nodeType":"ElementaryTypeName","src":"17227:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17226:9:5"},"scope":4800,"src":"17171:193:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3978,"nodeType":"Block","src":"17761:150:5","statements":[{"expression":{"id":3966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3961,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3959,"src":"17771:10:5","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3964,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3956,"src":"17791:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3963,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17784:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int248_$","typeString":"type(int248)"},"typeName":{"id":3962,"name":"int248","nodeType":"ElementaryTypeName","src":"17784:6:5","typeDescriptions":{}}},"id":3965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17784:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"src":"17771:26:5","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"id":3967,"nodeType":"ExpressionStatement","src":"17771:26:5"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3968,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3959,"src":"17811:10:5","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3969,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3956,"src":"17825:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17811:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3977,"nodeType":"IfStatement","src":"17807:98:5","trueBody":{"id":3976,"nodeType":"Block","src":"17832:73:5","statements":[{"errorCall":{"arguments":[{"hexValue":"323438","id":3972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17883:3:5","typeDescriptions":{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},"value":"248"},{"id":3973,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3956,"src":"17888:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3971,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"17853:29:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":3974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17853:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3975,"nodeType":"RevertStatement","src":"17846:48:5"}]}}]},"documentation":{"id":3954,"nodeType":"StructuredDocumentation","src":"17370:312:5","text":" @dev Returns the downcasted int248 from int256, reverting on\n overflow (when the input is less than smallest int248 or\n greater than largest int248).\n Counterpart to Solidity's `int248` operator.\n Requirements:\n - input must fit into 248 bits"},"id":3979,"implemented":true,"kind":"function","modifiers":[],"name":"toInt248","nameLocation":"17696:8:5","nodeType":"FunctionDefinition","parameters":{"id":3957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3956,"mutability":"mutable","name":"value","nameLocation":"17712:5:5","nodeType":"VariableDeclaration","scope":3979,"src":"17705:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3955,"name":"int256","nodeType":"ElementaryTypeName","src":"17705:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"17704:14:5"},"returnParameters":{"id":3960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3959,"mutability":"mutable","name":"downcasted","nameLocation":"17749:10:5","nodeType":"VariableDeclaration","scope":3979,"src":"17742:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"},"typeName":{"id":3958,"name":"int248","nodeType":"ElementaryTypeName","src":"17742:6:5","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"visibility":"internal"}],"src":"17741:19:5"},"scope":4800,"src":"17687:224:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4004,"nodeType":"Block","src":"18308:150:5","statements":[{"expression":{"id":3992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3987,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3985,"src":"18318:10:5","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3990,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3982,"src":"18338:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3989,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18331:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int240_$","typeString":"type(int240)"},"typeName":{"id":3988,"name":"int240","nodeType":"ElementaryTypeName","src":"18331:6:5","typeDescriptions":{}}},"id":3991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18331:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"src":"18318:26:5","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"id":3993,"nodeType":"ExpressionStatement","src":"18318:26:5"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3994,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3985,"src":"18358:10:5","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3995,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3982,"src":"18372:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18358:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4003,"nodeType":"IfStatement","src":"18354:98:5","trueBody":{"id":4002,"nodeType":"Block","src":"18379:73:5","statements":[{"errorCall":{"arguments":[{"hexValue":"323430","id":3998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18430:3:5","typeDescriptions":{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},"value":"240"},{"id":3999,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3982,"src":"18435:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3997,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"18400:29:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4000,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18400:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4001,"nodeType":"RevertStatement","src":"18393:48:5"}]}}]},"documentation":{"id":3980,"nodeType":"StructuredDocumentation","src":"17917:312:5","text":" @dev Returns the downcasted int240 from int256, reverting on\n overflow (when the input is less than smallest int240 or\n greater than largest int240).\n Counterpart to Solidity's `int240` operator.\n Requirements:\n - input must fit into 240 bits"},"id":4005,"implemented":true,"kind":"function","modifiers":[],"name":"toInt240","nameLocation":"18243:8:5","nodeType":"FunctionDefinition","parameters":{"id":3983,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3982,"mutability":"mutable","name":"value","nameLocation":"18259:5:5","nodeType":"VariableDeclaration","scope":4005,"src":"18252:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3981,"name":"int256","nodeType":"ElementaryTypeName","src":"18252:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"18251:14:5"},"returnParameters":{"id":3986,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3985,"mutability":"mutable","name":"downcasted","nameLocation":"18296:10:5","nodeType":"VariableDeclaration","scope":4005,"src":"18289:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"},"typeName":{"id":3984,"name":"int240","nodeType":"ElementaryTypeName","src":"18289:6:5","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"visibility":"internal"}],"src":"18288:19:5"},"scope":4800,"src":"18234:224:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4030,"nodeType":"Block","src":"18855:150:5","statements":[{"expression":{"id":4018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4013,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4011,"src":"18865:10:5","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4016,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4008,"src":"18885:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4015,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18878:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int232_$","typeString":"type(int232)"},"typeName":{"id":4014,"name":"int232","nodeType":"ElementaryTypeName","src":"18878:6:5","typeDescriptions":{}}},"id":4017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18878:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"src":"18865:26:5","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"id":4019,"nodeType":"ExpressionStatement","src":"18865:26:5"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4020,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4011,"src":"18905:10:5","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4021,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4008,"src":"18919:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18905:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4029,"nodeType":"IfStatement","src":"18901:98:5","trueBody":{"id":4028,"nodeType":"Block","src":"18926:73:5","statements":[{"errorCall":{"arguments":[{"hexValue":"323332","id":4024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18977:3:5","typeDescriptions":{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},"value":"232"},{"id":4025,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4008,"src":"18982:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4023,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"18947:29:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4026,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18947:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4027,"nodeType":"RevertStatement","src":"18940:48:5"}]}}]},"documentation":{"id":4006,"nodeType":"StructuredDocumentation","src":"18464:312:5","text":" @dev Returns the downcasted int232 from int256, reverting on\n overflow (when the input is less than smallest int232 or\n greater than largest int232).\n Counterpart to Solidity's `int232` operator.\n Requirements:\n - input must fit into 232 bits"},"id":4031,"implemented":true,"kind":"function","modifiers":[],"name":"toInt232","nameLocation":"18790:8:5","nodeType":"FunctionDefinition","parameters":{"id":4009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4008,"mutability":"mutable","name":"value","nameLocation":"18806:5:5","nodeType":"VariableDeclaration","scope":4031,"src":"18799:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4007,"name":"int256","nodeType":"ElementaryTypeName","src":"18799:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"18798:14:5"},"returnParameters":{"id":4012,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4011,"mutability":"mutable","name":"downcasted","nameLocation":"18843:10:5","nodeType":"VariableDeclaration","scope":4031,"src":"18836:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"},"typeName":{"id":4010,"name":"int232","nodeType":"ElementaryTypeName","src":"18836:6:5","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"visibility":"internal"}],"src":"18835:19:5"},"scope":4800,"src":"18781:224:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4056,"nodeType":"Block","src":"19402:150:5","statements":[{"expression":{"id":4044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4039,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4037,"src":"19412:10:5","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4042,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4034,"src":"19432:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4041,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19425:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int224_$","typeString":"type(int224)"},"typeName":{"id":4040,"name":"int224","nodeType":"ElementaryTypeName","src":"19425:6:5","typeDescriptions":{}}},"id":4043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19425:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"src":"19412:26:5","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"id":4045,"nodeType":"ExpressionStatement","src":"19412:26:5"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4046,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4037,"src":"19452:10:5","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4047,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4034,"src":"19466:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19452:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4055,"nodeType":"IfStatement","src":"19448:98:5","trueBody":{"id":4054,"nodeType":"Block","src":"19473:73:5","statements":[{"errorCall":{"arguments":[{"hexValue":"323234","id":4050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19524:3:5","typeDescriptions":{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},"value":"224"},{"id":4051,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4034,"src":"19529:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4049,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"19494:29:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4052,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19494:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4053,"nodeType":"RevertStatement","src":"19487:48:5"}]}}]},"documentation":{"id":4032,"nodeType":"StructuredDocumentation","src":"19011:312:5","text":" @dev Returns the downcasted int224 from int256, reverting on\n overflow (when the input is less than smallest int224 or\n greater than largest int224).\n Counterpart to Solidity's `int224` operator.\n Requirements:\n - input must fit into 224 bits"},"id":4057,"implemented":true,"kind":"function","modifiers":[],"name":"toInt224","nameLocation":"19337:8:5","nodeType":"FunctionDefinition","parameters":{"id":4035,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4034,"mutability":"mutable","name":"value","nameLocation":"19353:5:5","nodeType":"VariableDeclaration","scope":4057,"src":"19346:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4033,"name":"int256","nodeType":"ElementaryTypeName","src":"19346:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"19345:14:5"},"returnParameters":{"id":4038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4037,"mutability":"mutable","name":"downcasted","nameLocation":"19390:10:5","nodeType":"VariableDeclaration","scope":4057,"src":"19383:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"},"typeName":{"id":4036,"name":"int224","nodeType":"ElementaryTypeName","src":"19383:6:5","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"visibility":"internal"}],"src":"19382:19:5"},"scope":4800,"src":"19328:224:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4082,"nodeType":"Block","src":"19949:150:5","statements":[{"expression":{"id":4070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4065,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4063,"src":"19959:10:5","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4068,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"19979:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4067,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19972:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int216_$","typeString":"type(int216)"},"typeName":{"id":4066,"name":"int216","nodeType":"ElementaryTypeName","src":"19972:6:5","typeDescriptions":{}}},"id":4069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19972:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"src":"19959:26:5","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"id":4071,"nodeType":"ExpressionStatement","src":"19959:26:5"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4072,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4063,"src":"19999:10:5","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4073,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"20013:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19999:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4081,"nodeType":"IfStatement","src":"19995:98:5","trueBody":{"id":4080,"nodeType":"Block","src":"20020:73:5","statements":[{"errorCall":{"arguments":[{"hexValue":"323136","id":4076,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20071:3:5","typeDescriptions":{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},"value":"216"},{"id":4077,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"20076:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4075,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"20041:29:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4078,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20041:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4079,"nodeType":"RevertStatement","src":"20034:48:5"}]}}]},"documentation":{"id":4058,"nodeType":"StructuredDocumentation","src":"19558:312:5","text":" @dev Returns the downcasted int216 from int256, reverting on\n overflow (when the input is less than smallest int216 or\n greater than largest int216).\n Counterpart to Solidity's `int216` operator.\n Requirements:\n - input must fit into 216 bits"},"id":4083,"implemented":true,"kind":"function","modifiers":[],"name":"toInt216","nameLocation":"19884:8:5","nodeType":"FunctionDefinition","parameters":{"id":4061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4060,"mutability":"mutable","name":"value","nameLocation":"19900:5:5","nodeType":"VariableDeclaration","scope":4083,"src":"19893:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4059,"name":"int256","nodeType":"ElementaryTypeName","src":"19893:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"19892:14:5"},"returnParameters":{"id":4064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4063,"mutability":"mutable","name":"downcasted","nameLocation":"19937:10:5","nodeType":"VariableDeclaration","scope":4083,"src":"19930:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"},"typeName":{"id":4062,"name":"int216","nodeType":"ElementaryTypeName","src":"19930:6:5","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"visibility":"internal"}],"src":"19929:19:5"},"scope":4800,"src":"19875:224:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4108,"nodeType":"Block","src":"20496:150:5","statements":[{"expression":{"id":4096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4091,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4089,"src":"20506:10:5","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4094,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4086,"src":"20526:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4093,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20519:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int208_$","typeString":"type(int208)"},"typeName":{"id":4092,"name":"int208","nodeType":"ElementaryTypeName","src":"20519:6:5","typeDescriptions":{}}},"id":4095,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20519:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"src":"20506:26:5","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"id":4097,"nodeType":"ExpressionStatement","src":"20506:26:5"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4098,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4089,"src":"20546:10:5","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4099,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4086,"src":"20560:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"20546:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4107,"nodeType":"IfStatement","src":"20542:98:5","trueBody":{"id":4106,"nodeType":"Block","src":"20567:73:5","statements":[{"errorCall":{"arguments":[{"hexValue":"323038","id":4102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20618:3:5","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},"value":"208"},{"id":4103,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4086,"src":"20623:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4101,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"20588:29:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20588:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4105,"nodeType":"RevertStatement","src":"20581:48:5"}]}}]},"documentation":{"id":4084,"nodeType":"StructuredDocumentation","src":"20105:312:5","text":" @dev Returns the downcasted int208 from int256, reverting on\n overflow (when the input is less than smallest int208 or\n greater than largest int208).\n Counterpart to Solidity's `int208` operator.\n Requirements:\n - input must fit into 208 bits"},"id":4109,"implemented":true,"kind":"function","modifiers":[],"name":"toInt208","nameLocation":"20431:8:5","nodeType":"FunctionDefinition","parameters":{"id":4087,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4086,"mutability":"mutable","name":"value","nameLocation":"20447:5:5","nodeType":"VariableDeclaration","scope":4109,"src":"20440:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4085,"name":"int256","nodeType":"ElementaryTypeName","src":"20440:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"20439:14:5"},"returnParameters":{"id":4090,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4089,"mutability":"mutable","name":"downcasted","nameLocation":"20484:10:5","nodeType":"VariableDeclaration","scope":4109,"src":"20477:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"},"typeName":{"id":4088,"name":"int208","nodeType":"ElementaryTypeName","src":"20477:6:5","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"visibility":"internal"}],"src":"20476:19:5"},"scope":4800,"src":"20422:224:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4134,"nodeType":"Block","src":"21043:150:5","statements":[{"expression":{"id":4122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4117,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4115,"src":"21053:10:5","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4120,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4112,"src":"21073:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4119,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21066:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int200_$","typeString":"type(int200)"},"typeName":{"id":4118,"name":"int200","nodeType":"ElementaryTypeName","src":"21066:6:5","typeDescriptions":{}}},"id":4121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21066:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"src":"21053:26:5","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"id":4123,"nodeType":"ExpressionStatement","src":"21053:26:5"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4124,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4115,"src":"21093:10:5","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4125,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4112,"src":"21107:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21093:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4133,"nodeType":"IfStatement","src":"21089:98:5","trueBody":{"id":4132,"nodeType":"Block","src":"21114:73:5","statements":[{"errorCall":{"arguments":[{"hexValue":"323030","id":4128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21165:3:5","typeDescriptions":{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},"value":"200"},{"id":4129,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4112,"src":"21170:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4127,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"21135:29:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4130,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21135:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4131,"nodeType":"RevertStatement","src":"21128:48:5"}]}}]},"documentation":{"id":4110,"nodeType":"StructuredDocumentation","src":"20652:312:5","text":" @dev Returns the downcasted int200 from int256, reverting on\n overflow (when the input is less than smallest int200 or\n greater than largest int200).\n Counterpart to Solidity's `int200` operator.\n Requirements:\n - input must fit into 200 bits"},"id":4135,"implemented":true,"kind":"function","modifiers":[],"name":"toInt200","nameLocation":"20978:8:5","nodeType":"FunctionDefinition","parameters":{"id":4113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4112,"mutability":"mutable","name":"value","nameLocation":"20994:5:5","nodeType":"VariableDeclaration","scope":4135,"src":"20987:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4111,"name":"int256","nodeType":"ElementaryTypeName","src":"20987:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"20986:14:5"},"returnParameters":{"id":4116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4115,"mutability":"mutable","name":"downcasted","nameLocation":"21031:10:5","nodeType":"VariableDeclaration","scope":4135,"src":"21024:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"},"typeName":{"id":4114,"name":"int200","nodeType":"ElementaryTypeName","src":"21024:6:5","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"visibility":"internal"}],"src":"21023:19:5"},"scope":4800,"src":"20969:224:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4160,"nodeType":"Block","src":"21590:150:5","statements":[{"expression":{"id":4148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4143,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4141,"src":"21600:10:5","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4146,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4138,"src":"21620:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4145,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21613:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int192_$","typeString":"type(int192)"},"typeName":{"id":4144,"name":"int192","nodeType":"ElementaryTypeName","src":"21613:6:5","typeDescriptions":{}}},"id":4147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21613:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"src":"21600:26:5","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"id":4149,"nodeType":"ExpressionStatement","src":"21600:26:5"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4150,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4141,"src":"21640:10:5","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4151,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4138,"src":"21654:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21640:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4159,"nodeType":"IfStatement","src":"21636:98:5","trueBody":{"id":4158,"nodeType":"Block","src":"21661:73:5","statements":[{"errorCall":{"arguments":[{"hexValue":"313932","id":4154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21712:3:5","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},{"id":4155,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4138,"src":"21717:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4153,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"21682:29:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21682:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4157,"nodeType":"RevertStatement","src":"21675:48:5"}]}}]},"documentation":{"id":4136,"nodeType":"StructuredDocumentation","src":"21199:312:5","text":" @dev Returns the downcasted int192 from int256, reverting on\n overflow (when the input is less than smallest int192 or\n greater than largest int192).\n Counterpart to Solidity's `int192` operator.\n Requirements:\n - input must fit into 192 bits"},"id":4161,"implemented":true,"kind":"function","modifiers":[],"name":"toInt192","nameLocation":"21525:8:5","nodeType":"FunctionDefinition","parameters":{"id":4139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4138,"mutability":"mutable","name":"value","nameLocation":"21541:5:5","nodeType":"VariableDeclaration","scope":4161,"src":"21534:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4137,"name":"int256","nodeType":"ElementaryTypeName","src":"21534:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"21533:14:5"},"returnParameters":{"id":4142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4141,"mutability":"mutable","name":"downcasted","nameLocation":"21578:10:5","nodeType":"VariableDeclaration","scope":4161,"src":"21571:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"},"typeName":{"id":4140,"name":"int192","nodeType":"ElementaryTypeName","src":"21571:6:5","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"visibility":"internal"}],"src":"21570:19:5"},"scope":4800,"src":"21516:224:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4186,"nodeType":"Block","src":"22137:150:5","statements":[{"expression":{"id":4174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4169,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4167,"src":"22147:10:5","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4172,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4164,"src":"22167:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4171,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22160:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int184_$","typeString":"type(int184)"},"typeName":{"id":4170,"name":"int184","nodeType":"ElementaryTypeName","src":"22160:6:5","typeDescriptions":{}}},"id":4173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22160:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"src":"22147:26:5","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"id":4175,"nodeType":"ExpressionStatement","src":"22147:26:5"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4176,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4167,"src":"22187:10:5","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4177,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4164,"src":"22201:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22187:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4185,"nodeType":"IfStatement","src":"22183:98:5","trueBody":{"id":4184,"nodeType":"Block","src":"22208:73:5","statements":[{"errorCall":{"arguments":[{"hexValue":"313834","id":4180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22259:3:5","typeDescriptions":{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},"value":"184"},{"id":4181,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4164,"src":"22264:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4179,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"22229:29:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22229:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4183,"nodeType":"RevertStatement","src":"22222:48:5"}]}}]},"documentation":{"id":4162,"nodeType":"StructuredDocumentation","src":"21746:312:5","text":" @dev Returns the downcasted int184 from int256, reverting on\n overflow (when the input is less than smallest int184 or\n greater than largest int184).\n Counterpart to Solidity's `int184` operator.\n Requirements:\n - input must fit into 184 bits"},"id":4187,"implemented":true,"kind":"function","modifiers":[],"name":"toInt184","nameLocation":"22072:8:5","nodeType":"FunctionDefinition","parameters":{"id":4165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4164,"mutability":"mutable","name":"value","nameLocation":"22088:5:5","nodeType":"VariableDeclaration","scope":4187,"src":"22081:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4163,"name":"int256","nodeType":"ElementaryTypeName","src":"22081:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"22080:14:5"},"returnParameters":{"id":4168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4167,"mutability":"mutable","name":"downcasted","nameLocation":"22125:10:5","nodeType":"VariableDeclaration","scope":4187,"src":"22118:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"},"typeName":{"id":4166,"name":"int184","nodeType":"ElementaryTypeName","src":"22118:6:5","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"visibility":"internal"}],"src":"22117:19:5"},"scope":4800,"src":"22063:224:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4212,"nodeType":"Block","src":"22684:150:5","statements":[{"expression":{"id":4200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4195,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4193,"src":"22694:10:5","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4198,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4190,"src":"22714:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4197,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22707:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int176_$","typeString":"type(int176)"},"typeName":{"id":4196,"name":"int176","nodeType":"ElementaryTypeName","src":"22707:6:5","typeDescriptions":{}}},"id":4199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22707:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"src":"22694:26:5","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"id":4201,"nodeType":"ExpressionStatement","src":"22694:26:5"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4202,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4193,"src":"22734:10:5","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4203,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4190,"src":"22748:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22734:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4211,"nodeType":"IfStatement","src":"22730:98:5","trueBody":{"id":4210,"nodeType":"Block","src":"22755:73:5","statements":[{"errorCall":{"arguments":[{"hexValue":"313736","id":4206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22806:3:5","typeDescriptions":{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},"value":"176"},{"id":4207,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4190,"src":"22811:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4205,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"22776:29:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22776:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4209,"nodeType":"RevertStatement","src":"22769:48:5"}]}}]},"documentation":{"id":4188,"nodeType":"StructuredDocumentation","src":"22293:312:5","text":" @dev Returns the downcasted int176 from int256, reverting on\n overflow (when the input is less than smallest int176 or\n greater than largest int176).\n Counterpart to Solidity's `int176` operator.\n Requirements:\n - input must fit into 176 bits"},"id":4213,"implemented":true,"kind":"function","modifiers":[],"name":"toInt176","nameLocation":"22619:8:5","nodeType":"FunctionDefinition","parameters":{"id":4191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4190,"mutability":"mutable","name":"value","nameLocation":"22635:5:5","nodeType":"VariableDeclaration","scope":4213,"src":"22628:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4189,"name":"int256","nodeType":"ElementaryTypeName","src":"22628:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"22627:14:5"},"returnParameters":{"id":4194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4193,"mutability":"mutable","name":"downcasted","nameLocation":"22672:10:5","nodeType":"VariableDeclaration","scope":4213,"src":"22665:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"},"typeName":{"id":4192,"name":"int176","nodeType":"ElementaryTypeName","src":"22665:6:5","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"visibility":"internal"}],"src":"22664:19:5"},"scope":4800,"src":"22610:224:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4238,"nodeType":"Block","src":"23231:150:5","statements":[{"expression":{"id":4226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4221,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4219,"src":"23241:10:5","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4224,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4216,"src":"23261:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4223,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23254:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int168_$","typeString":"type(int168)"},"typeName":{"id":4222,"name":"int168","nodeType":"ElementaryTypeName","src":"23254:6:5","typeDescriptions":{}}},"id":4225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23254:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"src":"23241:26:5","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"id":4227,"nodeType":"ExpressionStatement","src":"23241:26:5"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4228,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4219,"src":"23281:10:5","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4229,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4216,"src":"23295:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"23281:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4237,"nodeType":"IfStatement","src":"23277:98:5","trueBody":{"id":4236,"nodeType":"Block","src":"23302:73:5","statements":[{"errorCall":{"arguments":[{"hexValue":"313638","id":4232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23353:3:5","typeDescriptions":{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},"value":"168"},{"id":4233,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4216,"src":"23358:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4231,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"23323:29:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23323:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4235,"nodeType":"RevertStatement","src":"23316:48:5"}]}}]},"documentation":{"id":4214,"nodeType":"StructuredDocumentation","src":"22840:312:5","text":" @dev Returns the downcasted int168 from int256, reverting on\n overflow (when the input is less than smallest int168 or\n greater than largest int168).\n Counterpart to Solidity's `int168` operator.\n Requirements:\n - input must fit into 168 bits"},"id":4239,"implemented":true,"kind":"function","modifiers":[],"name":"toInt168","nameLocation":"23166:8:5","nodeType":"FunctionDefinition","parameters":{"id":4217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4216,"mutability":"mutable","name":"value","nameLocation":"23182:5:5","nodeType":"VariableDeclaration","scope":4239,"src":"23175:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4215,"name":"int256","nodeType":"ElementaryTypeName","src":"23175:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"23174:14:5"},"returnParameters":{"id":4220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4219,"mutability":"mutable","name":"downcasted","nameLocation":"23219:10:5","nodeType":"VariableDeclaration","scope":4239,"src":"23212:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"},"typeName":{"id":4218,"name":"int168","nodeType":"ElementaryTypeName","src":"23212:6:5","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"visibility":"internal"}],"src":"23211:19:5"},"scope":4800,"src":"23157:224:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4264,"nodeType":"Block","src":"23778:150:5","statements":[{"expression":{"id":4252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4247,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4245,"src":"23788:10:5","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4250,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4242,"src":"23808:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4249,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23801:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int160_$","typeString":"type(int160)"},"typeName":{"id":4248,"name":"int160","nodeType":"ElementaryTypeName","src":"23801:6:5","typeDescriptions":{}}},"id":4251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23801:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"src":"23788:26:5","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"id":4253,"nodeType":"ExpressionStatement","src":"23788:26:5"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4254,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4245,"src":"23828:10:5","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4255,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4242,"src":"23842:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"23828:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4263,"nodeType":"IfStatement","src":"23824:98:5","trueBody":{"id":4262,"nodeType":"Block","src":"23849:73:5","statements":[{"errorCall":{"arguments":[{"hexValue":"313630","id":4258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23900:3:5","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},{"id":4259,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4242,"src":"23905:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4257,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"23870:29:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4260,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23870:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4261,"nodeType":"RevertStatement","src":"23863:48:5"}]}}]},"documentation":{"id":4240,"nodeType":"StructuredDocumentation","src":"23387:312:5","text":" @dev Returns the downcasted int160 from int256, reverting on\n overflow (when the input is less than smallest int160 or\n greater than largest int160).\n Counterpart to Solidity's `int160` operator.\n Requirements:\n - input must fit into 160 bits"},"id":4265,"implemented":true,"kind":"function","modifiers":[],"name":"toInt160","nameLocation":"23713:8:5","nodeType":"FunctionDefinition","parameters":{"id":4243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4242,"mutability":"mutable","name":"value","nameLocation":"23729:5:5","nodeType":"VariableDeclaration","scope":4265,"src":"23722:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4241,"name":"int256","nodeType":"ElementaryTypeName","src":"23722:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"23721:14:5"},"returnParameters":{"id":4246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4245,"mutability":"mutable","name":"downcasted","nameLocation":"23766:10:5","nodeType":"VariableDeclaration","scope":4265,"src":"23759:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"},"typeName":{"id":4244,"name":"int160","nodeType":"ElementaryTypeName","src":"23759:6:5","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"visibility":"internal"}],"src":"23758:19:5"},"scope":4800,"src":"23704:224:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4290,"nodeType":"Block","src":"24325:150:5","statements":[{"expression":{"id":4278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4273,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4271,"src":"24335:10:5","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4276,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4268,"src":"24355:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4275,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24348:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int152_$","typeString":"type(int152)"},"typeName":{"id":4274,"name":"int152","nodeType":"ElementaryTypeName","src":"24348:6:5","typeDescriptions":{}}},"id":4277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24348:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"src":"24335:26:5","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"id":4279,"nodeType":"ExpressionStatement","src":"24335:26:5"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4280,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4271,"src":"24375:10:5","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4281,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4268,"src":"24389:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"24375:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4289,"nodeType":"IfStatement","src":"24371:98:5","trueBody":{"id":4288,"nodeType":"Block","src":"24396:73:5","statements":[{"errorCall":{"arguments":[{"hexValue":"313532","id":4284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24447:3:5","typeDescriptions":{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},"value":"152"},{"id":4285,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4268,"src":"24452:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4283,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"24417:29:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24417:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4287,"nodeType":"RevertStatement","src":"24410:48:5"}]}}]},"documentation":{"id":4266,"nodeType":"StructuredDocumentation","src":"23934:312:5","text":" @dev Returns the downcasted int152 from int256, reverting on\n overflow (when the input is less than smallest int152 or\n greater than largest int152).\n Counterpart to Solidity's `int152` operator.\n Requirements:\n - input must fit into 152 bits"},"id":4291,"implemented":true,"kind":"function","modifiers":[],"name":"toInt152","nameLocation":"24260:8:5","nodeType":"FunctionDefinition","parameters":{"id":4269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4268,"mutability":"mutable","name":"value","nameLocation":"24276:5:5","nodeType":"VariableDeclaration","scope":4291,"src":"24269:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4267,"name":"int256","nodeType":"ElementaryTypeName","src":"24269:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"24268:14:5"},"returnParameters":{"id":4272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4271,"mutability":"mutable","name":"downcasted","nameLocation":"24313:10:5","nodeType":"VariableDeclaration","scope":4291,"src":"24306:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"},"typeName":{"id":4270,"name":"int152","nodeType":"ElementaryTypeName","src":"24306:6:5","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"visibility":"internal"}],"src":"24305:19:5"},"scope":4800,"src":"24251:224:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4316,"nodeType":"Block","src":"24872:150:5","statements":[{"expression":{"id":4304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4299,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4297,"src":"24882:10:5","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4302,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294,"src":"24902:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4301,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24895:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int144_$","typeString":"type(int144)"},"typeName":{"id":4300,"name":"int144","nodeType":"ElementaryTypeName","src":"24895:6:5","typeDescriptions":{}}},"id":4303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24895:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"src":"24882:26:5","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"id":4305,"nodeType":"ExpressionStatement","src":"24882:26:5"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4306,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4297,"src":"24922:10:5","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4307,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294,"src":"24936:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"24922:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4315,"nodeType":"IfStatement","src":"24918:98:5","trueBody":{"id":4314,"nodeType":"Block","src":"24943:73:5","statements":[{"errorCall":{"arguments":[{"hexValue":"313434","id":4310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24994:3:5","typeDescriptions":{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},"value":"144"},{"id":4311,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294,"src":"24999:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4309,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"24964:29:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24964:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4313,"nodeType":"RevertStatement","src":"24957:48:5"}]}}]},"documentation":{"id":4292,"nodeType":"StructuredDocumentation","src":"24481:312:5","text":" @dev Returns the downcasted int144 from int256, reverting on\n overflow (when the input is less than smallest int144 or\n greater than largest int144).\n Counterpart to Solidity's `int144` operator.\n Requirements:\n - input must fit into 144 bits"},"id":4317,"implemented":true,"kind":"function","modifiers":[],"name":"toInt144","nameLocation":"24807:8:5","nodeType":"FunctionDefinition","parameters":{"id":4295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4294,"mutability":"mutable","name":"value","nameLocation":"24823:5:5","nodeType":"VariableDeclaration","scope":4317,"src":"24816:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4293,"name":"int256","nodeType":"ElementaryTypeName","src":"24816:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"24815:14:5"},"returnParameters":{"id":4298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4297,"mutability":"mutable","name":"downcasted","nameLocation":"24860:10:5","nodeType":"VariableDeclaration","scope":4317,"src":"24853:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"},"typeName":{"id":4296,"name":"int144","nodeType":"ElementaryTypeName","src":"24853:6:5","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"visibility":"internal"}],"src":"24852:19:5"},"scope":4800,"src":"24798:224:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4342,"nodeType":"Block","src":"25419:150:5","statements":[{"expression":{"id":4330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4325,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4323,"src":"25429:10:5","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4328,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4320,"src":"25449:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4327,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25442:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int136_$","typeString":"type(int136)"},"typeName":{"id":4326,"name":"int136","nodeType":"ElementaryTypeName","src":"25442:6:5","typeDescriptions":{}}},"id":4329,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25442:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"src":"25429:26:5","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"id":4331,"nodeType":"ExpressionStatement","src":"25429:26:5"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4332,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4323,"src":"25469:10:5","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4333,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4320,"src":"25483:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"25469:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4341,"nodeType":"IfStatement","src":"25465:98:5","trueBody":{"id":4340,"nodeType":"Block","src":"25490:73:5","statements":[{"errorCall":{"arguments":[{"hexValue":"313336","id":4336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25541:3:5","typeDescriptions":{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},"value":"136"},{"id":4337,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4320,"src":"25546:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4335,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"25511:29:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4338,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25511:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4339,"nodeType":"RevertStatement","src":"25504:48:5"}]}}]},"documentation":{"id":4318,"nodeType":"StructuredDocumentation","src":"25028:312:5","text":" @dev Returns the downcasted int136 from int256, reverting on\n overflow (when the input is less than smallest int136 or\n greater than largest int136).\n Counterpart to Solidity's `int136` operator.\n Requirements:\n - input must fit into 136 bits"},"id":4343,"implemented":true,"kind":"function","modifiers":[],"name":"toInt136","nameLocation":"25354:8:5","nodeType":"FunctionDefinition","parameters":{"id":4321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4320,"mutability":"mutable","name":"value","nameLocation":"25370:5:5","nodeType":"VariableDeclaration","scope":4343,"src":"25363:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4319,"name":"int256","nodeType":"ElementaryTypeName","src":"25363:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"25362:14:5"},"returnParameters":{"id":4324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4323,"mutability":"mutable","name":"downcasted","nameLocation":"25407:10:5","nodeType":"VariableDeclaration","scope":4343,"src":"25400:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"},"typeName":{"id":4322,"name":"int136","nodeType":"ElementaryTypeName","src":"25400:6:5","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"visibility":"internal"}],"src":"25399:19:5"},"scope":4800,"src":"25345:224:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4368,"nodeType":"Block","src":"25966:150:5","statements":[{"expression":{"id":4356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4351,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4349,"src":"25976:10:5","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4354,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4346,"src":"25996:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4353,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25989:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int128_$","typeString":"type(int128)"},"typeName":{"id":4352,"name":"int128","nodeType":"ElementaryTypeName","src":"25989:6:5","typeDescriptions":{}}},"id":4355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25989:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"src":"25976:26:5","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"id":4357,"nodeType":"ExpressionStatement","src":"25976:26:5"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4358,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4349,"src":"26016:10:5","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4359,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4346,"src":"26030:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"26016:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4367,"nodeType":"IfStatement","src":"26012:98:5","trueBody":{"id":4366,"nodeType":"Block","src":"26037:73:5","statements":[{"errorCall":{"arguments":[{"hexValue":"313238","id":4362,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26088:3:5","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},{"id":4363,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4346,"src":"26093:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4361,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"26058:29:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4364,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26058:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4365,"nodeType":"RevertStatement","src":"26051:48:5"}]}}]},"documentation":{"id":4344,"nodeType":"StructuredDocumentation","src":"25575:312:5","text":" @dev Returns the downcasted int128 from int256, reverting on\n overflow (when the input is less than smallest int128 or\n greater than largest int128).\n Counterpart to Solidity's `int128` operator.\n Requirements:\n - input must fit into 128 bits"},"id":4369,"implemented":true,"kind":"function","modifiers":[],"name":"toInt128","nameLocation":"25901:8:5","nodeType":"FunctionDefinition","parameters":{"id":4347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4346,"mutability":"mutable","name":"value","nameLocation":"25917:5:5","nodeType":"VariableDeclaration","scope":4369,"src":"25910:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4345,"name":"int256","nodeType":"ElementaryTypeName","src":"25910:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"25909:14:5"},"returnParameters":{"id":4350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4349,"mutability":"mutable","name":"downcasted","nameLocation":"25954:10:5","nodeType":"VariableDeclaration","scope":4369,"src":"25947:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"},"typeName":{"id":4348,"name":"int128","nodeType":"ElementaryTypeName","src":"25947:6:5","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"visibility":"internal"}],"src":"25946:19:5"},"scope":4800,"src":"25892:224:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4394,"nodeType":"Block","src":"26513:150:5","statements":[{"expression":{"id":4382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4377,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4375,"src":"26523:10:5","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4380,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4372,"src":"26543:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4379,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26536:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int120_$","typeString":"type(int120)"},"typeName":{"id":4378,"name":"int120","nodeType":"ElementaryTypeName","src":"26536:6:5","typeDescriptions":{}}},"id":4381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26536:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"src":"26523:26:5","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"id":4383,"nodeType":"ExpressionStatement","src":"26523:26:5"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4384,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4375,"src":"26563:10:5","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4385,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4372,"src":"26577:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"26563:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4393,"nodeType":"IfStatement","src":"26559:98:5","trueBody":{"id":4392,"nodeType":"Block","src":"26584:73:5","statements":[{"errorCall":{"arguments":[{"hexValue":"313230","id":4388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26635:3:5","typeDescriptions":{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},"value":"120"},{"id":4389,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4372,"src":"26640:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4387,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"26605:29:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26605:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4391,"nodeType":"RevertStatement","src":"26598:48:5"}]}}]},"documentation":{"id":4370,"nodeType":"StructuredDocumentation","src":"26122:312:5","text":" @dev Returns the downcasted int120 from int256, reverting on\n overflow (when the input is less than smallest int120 or\n greater than largest int120).\n Counterpart to Solidity's `int120` operator.\n Requirements:\n - input must fit into 120 bits"},"id":4395,"implemented":true,"kind":"function","modifiers":[],"name":"toInt120","nameLocation":"26448:8:5","nodeType":"FunctionDefinition","parameters":{"id":4373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4372,"mutability":"mutable","name":"value","nameLocation":"26464:5:5","nodeType":"VariableDeclaration","scope":4395,"src":"26457:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4371,"name":"int256","nodeType":"ElementaryTypeName","src":"26457:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"26456:14:5"},"returnParameters":{"id":4376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4375,"mutability":"mutable","name":"downcasted","nameLocation":"26501:10:5","nodeType":"VariableDeclaration","scope":4395,"src":"26494:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"},"typeName":{"id":4374,"name":"int120","nodeType":"ElementaryTypeName","src":"26494:6:5","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"visibility":"internal"}],"src":"26493:19:5"},"scope":4800,"src":"26439:224:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4420,"nodeType":"Block","src":"27060:150:5","statements":[{"expression":{"id":4408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4403,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4401,"src":"27070:10:5","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4406,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4398,"src":"27090:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4405,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27083:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int112_$","typeString":"type(int112)"},"typeName":{"id":4404,"name":"int112","nodeType":"ElementaryTypeName","src":"27083:6:5","typeDescriptions":{}}},"id":4407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27083:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"src":"27070:26:5","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"id":4409,"nodeType":"ExpressionStatement","src":"27070:26:5"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4410,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4401,"src":"27110:10:5","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4411,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4398,"src":"27124:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"27110:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4419,"nodeType":"IfStatement","src":"27106:98:5","trueBody":{"id":4418,"nodeType":"Block","src":"27131:73:5","statements":[{"errorCall":{"arguments":[{"hexValue":"313132","id":4414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27182:3:5","typeDescriptions":{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},"value":"112"},{"id":4415,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4398,"src":"27187:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4413,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"27152:29:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27152:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4417,"nodeType":"RevertStatement","src":"27145:48:5"}]}}]},"documentation":{"id":4396,"nodeType":"StructuredDocumentation","src":"26669:312:5","text":" @dev Returns the downcasted int112 from int256, reverting on\n overflow (when the input is less than smallest int112 or\n greater than largest int112).\n Counterpart to Solidity's `int112` operator.\n Requirements:\n - input must fit into 112 bits"},"id":4421,"implemented":true,"kind":"function","modifiers":[],"name":"toInt112","nameLocation":"26995:8:5","nodeType":"FunctionDefinition","parameters":{"id":4399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4398,"mutability":"mutable","name":"value","nameLocation":"27011:5:5","nodeType":"VariableDeclaration","scope":4421,"src":"27004:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4397,"name":"int256","nodeType":"ElementaryTypeName","src":"27004:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"27003:14:5"},"returnParameters":{"id":4402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4401,"mutability":"mutable","name":"downcasted","nameLocation":"27048:10:5","nodeType":"VariableDeclaration","scope":4421,"src":"27041:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"},"typeName":{"id":4400,"name":"int112","nodeType":"ElementaryTypeName","src":"27041:6:5","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"visibility":"internal"}],"src":"27040:19:5"},"scope":4800,"src":"26986:224:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4446,"nodeType":"Block","src":"27607:150:5","statements":[{"expression":{"id":4434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4429,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4427,"src":"27617:10:5","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4432,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4424,"src":"27637:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4431,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27630:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int104_$","typeString":"type(int104)"},"typeName":{"id":4430,"name":"int104","nodeType":"ElementaryTypeName","src":"27630:6:5","typeDescriptions":{}}},"id":4433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27630:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"src":"27617:26:5","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"id":4435,"nodeType":"ExpressionStatement","src":"27617:26:5"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4436,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4427,"src":"27657:10:5","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4437,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4424,"src":"27671:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"27657:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4445,"nodeType":"IfStatement","src":"27653:98:5","trueBody":{"id":4444,"nodeType":"Block","src":"27678:73:5","statements":[{"errorCall":{"arguments":[{"hexValue":"313034","id":4440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27729:3:5","typeDescriptions":{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},"value":"104"},{"id":4441,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4424,"src":"27734:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4439,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"27699:29:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27699:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4443,"nodeType":"RevertStatement","src":"27692:48:5"}]}}]},"documentation":{"id":4422,"nodeType":"StructuredDocumentation","src":"27216:312:5","text":" @dev Returns the downcasted int104 from int256, reverting on\n overflow (when the input is less than smallest int104 or\n greater than largest int104).\n Counterpart to Solidity's `int104` operator.\n Requirements:\n - input must fit into 104 bits"},"id":4447,"implemented":true,"kind":"function","modifiers":[],"name":"toInt104","nameLocation":"27542:8:5","nodeType":"FunctionDefinition","parameters":{"id":4425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4424,"mutability":"mutable","name":"value","nameLocation":"27558:5:5","nodeType":"VariableDeclaration","scope":4447,"src":"27551:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4423,"name":"int256","nodeType":"ElementaryTypeName","src":"27551:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"27550:14:5"},"returnParameters":{"id":4428,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4427,"mutability":"mutable","name":"downcasted","nameLocation":"27595:10:5","nodeType":"VariableDeclaration","scope":4447,"src":"27588:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"},"typeName":{"id":4426,"name":"int104","nodeType":"ElementaryTypeName","src":"27588:6:5","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"visibility":"internal"}],"src":"27587:19:5"},"scope":4800,"src":"27533:224:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4472,"nodeType":"Block","src":"28147:148:5","statements":[{"expression":{"id":4460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4455,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4453,"src":"28157:10:5","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4458,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4450,"src":"28176:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4457,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28170:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int96_$","typeString":"type(int96)"},"typeName":{"id":4456,"name":"int96","nodeType":"ElementaryTypeName","src":"28170:5:5","typeDescriptions":{}}},"id":4459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28170:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"src":"28157:25:5","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"id":4461,"nodeType":"ExpressionStatement","src":"28157:25:5"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4462,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4453,"src":"28196:10:5","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4463,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4450,"src":"28210:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"28196:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4471,"nodeType":"IfStatement","src":"28192:97:5","trueBody":{"id":4470,"nodeType":"Block","src":"28217:72:5","statements":[{"errorCall":{"arguments":[{"hexValue":"3936","id":4466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28268:2:5","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"96"},{"id":4467,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4450,"src":"28272:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4465,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"28238:29:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28238:40:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4469,"nodeType":"RevertStatement","src":"28231:47:5"}]}}]},"documentation":{"id":4448,"nodeType":"StructuredDocumentation","src":"27763:307:5","text":" @dev Returns the downcasted int96 from int256, reverting on\n overflow (when the input is less than smallest int96 or\n greater than largest int96).\n Counterpart to Solidity's `int96` operator.\n Requirements:\n - input must fit into 96 bits"},"id":4473,"implemented":true,"kind":"function","modifiers":[],"name":"toInt96","nameLocation":"28084:7:5","nodeType":"FunctionDefinition","parameters":{"id":4451,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4450,"mutability":"mutable","name":"value","nameLocation":"28099:5:5","nodeType":"VariableDeclaration","scope":4473,"src":"28092:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4449,"name":"int256","nodeType":"ElementaryTypeName","src":"28092:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"28091:14:5"},"returnParameters":{"id":4454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4453,"mutability":"mutable","name":"downcasted","nameLocation":"28135:10:5","nodeType":"VariableDeclaration","scope":4473,"src":"28129:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"},"typeName":{"id":4452,"name":"int96","nodeType":"ElementaryTypeName","src":"28129:5:5","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"visibility":"internal"}],"src":"28128:18:5"},"scope":4800,"src":"28075:220:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4498,"nodeType":"Block","src":"28685:148:5","statements":[{"expression":{"id":4486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4481,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4479,"src":"28695:10:5","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4484,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4476,"src":"28714:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4483,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28708:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int88_$","typeString":"type(int88)"},"typeName":{"id":4482,"name":"int88","nodeType":"ElementaryTypeName","src":"28708:5:5","typeDescriptions":{}}},"id":4485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28708:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"src":"28695:25:5","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"id":4487,"nodeType":"ExpressionStatement","src":"28695:25:5"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4488,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4479,"src":"28734:10:5","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4489,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4476,"src":"28748:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"28734:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4497,"nodeType":"IfStatement","src":"28730:97:5","trueBody":{"id":4496,"nodeType":"Block","src":"28755:72:5","statements":[{"errorCall":{"arguments":[{"hexValue":"3838","id":4492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28806:2:5","typeDescriptions":{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},"value":"88"},{"id":4493,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4476,"src":"28810:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4491,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"28776:29:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28776:40:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4495,"nodeType":"RevertStatement","src":"28769:47:5"}]}}]},"documentation":{"id":4474,"nodeType":"StructuredDocumentation","src":"28301:307:5","text":" @dev Returns the downcasted int88 from int256, reverting on\n overflow (when the input is less than smallest int88 or\n greater than largest int88).\n Counterpart to Solidity's `int88` operator.\n Requirements:\n - input must fit into 88 bits"},"id":4499,"implemented":true,"kind":"function","modifiers":[],"name":"toInt88","nameLocation":"28622:7:5","nodeType":"FunctionDefinition","parameters":{"id":4477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4476,"mutability":"mutable","name":"value","nameLocation":"28637:5:5","nodeType":"VariableDeclaration","scope":4499,"src":"28630:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4475,"name":"int256","nodeType":"ElementaryTypeName","src":"28630:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"28629:14:5"},"returnParameters":{"id":4480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4479,"mutability":"mutable","name":"downcasted","nameLocation":"28673:10:5","nodeType":"VariableDeclaration","scope":4499,"src":"28667:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"},"typeName":{"id":4478,"name":"int88","nodeType":"ElementaryTypeName","src":"28667:5:5","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"visibility":"internal"}],"src":"28666:18:5"},"scope":4800,"src":"28613:220:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4524,"nodeType":"Block","src":"29223:148:5","statements":[{"expression":{"id":4512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4507,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"29233:10:5","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4510,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4502,"src":"29252:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4509,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29246:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int80_$","typeString":"type(int80)"},"typeName":{"id":4508,"name":"int80","nodeType":"ElementaryTypeName","src":"29246:5:5","typeDescriptions":{}}},"id":4511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29246:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"src":"29233:25:5","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"id":4513,"nodeType":"ExpressionStatement","src":"29233:25:5"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4514,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4505,"src":"29272:10:5","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4515,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4502,"src":"29286:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"29272:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4523,"nodeType":"IfStatement","src":"29268:97:5","trueBody":{"id":4522,"nodeType":"Block","src":"29293:72:5","statements":[{"errorCall":{"arguments":[{"hexValue":"3830","id":4518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29344:2:5","typeDescriptions":{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},"value":"80"},{"id":4519,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4502,"src":"29348:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4517,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"29314:29:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29314:40:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4521,"nodeType":"RevertStatement","src":"29307:47:5"}]}}]},"documentation":{"id":4500,"nodeType":"StructuredDocumentation","src":"28839:307:5","text":" @dev Returns the downcasted int80 from int256, reverting on\n overflow (when the input is less than smallest int80 or\n greater than largest int80).\n Counterpart to Solidity's `int80` operator.\n Requirements:\n - input must fit into 80 bits"},"id":4525,"implemented":true,"kind":"function","modifiers":[],"name":"toInt80","nameLocation":"29160:7:5","nodeType":"FunctionDefinition","parameters":{"id":4503,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4502,"mutability":"mutable","name":"value","nameLocation":"29175:5:5","nodeType":"VariableDeclaration","scope":4525,"src":"29168:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4501,"name":"int256","nodeType":"ElementaryTypeName","src":"29168:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"29167:14:5"},"returnParameters":{"id":4506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4505,"mutability":"mutable","name":"downcasted","nameLocation":"29211:10:5","nodeType":"VariableDeclaration","scope":4525,"src":"29205:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"},"typeName":{"id":4504,"name":"int80","nodeType":"ElementaryTypeName","src":"29205:5:5","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"visibility":"internal"}],"src":"29204:18:5"},"scope":4800,"src":"29151:220:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4550,"nodeType":"Block","src":"29761:148:5","statements":[{"expression":{"id":4538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4533,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4531,"src":"29771:10:5","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4536,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4528,"src":"29790:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4535,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29784:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int72_$","typeString":"type(int72)"},"typeName":{"id":4534,"name":"int72","nodeType":"ElementaryTypeName","src":"29784:5:5","typeDescriptions":{}}},"id":4537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29784:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"src":"29771:25:5","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"id":4539,"nodeType":"ExpressionStatement","src":"29771:25:5"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4540,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4531,"src":"29810:10:5","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4541,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4528,"src":"29824:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"29810:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4549,"nodeType":"IfStatement","src":"29806:97:5","trueBody":{"id":4548,"nodeType":"Block","src":"29831:72:5","statements":[{"errorCall":{"arguments":[{"hexValue":"3732","id":4544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29882:2:5","typeDescriptions":{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},"value":"72"},{"id":4545,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4528,"src":"29886:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4543,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"29852:29:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29852:40:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4547,"nodeType":"RevertStatement","src":"29845:47:5"}]}}]},"documentation":{"id":4526,"nodeType":"StructuredDocumentation","src":"29377:307:5","text":" @dev Returns the downcasted int72 from int256, reverting on\n overflow (when the input is less than smallest int72 or\n greater than largest int72).\n Counterpart to Solidity's `int72` operator.\n Requirements:\n - input must fit into 72 bits"},"id":4551,"implemented":true,"kind":"function","modifiers":[],"name":"toInt72","nameLocation":"29698:7:5","nodeType":"FunctionDefinition","parameters":{"id":4529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4528,"mutability":"mutable","name":"value","nameLocation":"29713:5:5","nodeType":"VariableDeclaration","scope":4551,"src":"29706:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4527,"name":"int256","nodeType":"ElementaryTypeName","src":"29706:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"29705:14:5"},"returnParameters":{"id":4532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4531,"mutability":"mutable","name":"downcasted","nameLocation":"29749:10:5","nodeType":"VariableDeclaration","scope":4551,"src":"29743:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"},"typeName":{"id":4530,"name":"int72","nodeType":"ElementaryTypeName","src":"29743:5:5","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"visibility":"internal"}],"src":"29742:18:5"},"scope":4800,"src":"29689:220:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4576,"nodeType":"Block","src":"30299:148:5","statements":[{"expression":{"id":4564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4559,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4557,"src":"30309:10:5","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4562,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4554,"src":"30328:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4561,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30322:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int64_$","typeString":"type(int64)"},"typeName":{"id":4560,"name":"int64","nodeType":"ElementaryTypeName","src":"30322:5:5","typeDescriptions":{}}},"id":4563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30322:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"src":"30309:25:5","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"id":4565,"nodeType":"ExpressionStatement","src":"30309:25:5"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4566,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4557,"src":"30348:10:5","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4567,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4554,"src":"30362:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"30348:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4575,"nodeType":"IfStatement","src":"30344:97:5","trueBody":{"id":4574,"nodeType":"Block","src":"30369:72:5","statements":[{"errorCall":{"arguments":[{"hexValue":"3634","id":4570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30420:2:5","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},{"id":4571,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4554,"src":"30424:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4569,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"30390:29:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30390:40:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4573,"nodeType":"RevertStatement","src":"30383:47:5"}]}}]},"documentation":{"id":4552,"nodeType":"StructuredDocumentation","src":"29915:307:5","text":" @dev Returns the downcasted int64 from int256, reverting on\n overflow (when the input is less than smallest int64 or\n greater than largest int64).\n Counterpart to Solidity's `int64` operator.\n Requirements:\n - input must fit into 64 bits"},"id":4577,"implemented":true,"kind":"function","modifiers":[],"name":"toInt64","nameLocation":"30236:7:5","nodeType":"FunctionDefinition","parameters":{"id":4555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4554,"mutability":"mutable","name":"value","nameLocation":"30251:5:5","nodeType":"VariableDeclaration","scope":4577,"src":"30244:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4553,"name":"int256","nodeType":"ElementaryTypeName","src":"30244:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"30243:14:5"},"returnParameters":{"id":4558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4557,"mutability":"mutable","name":"downcasted","nameLocation":"30287:10:5","nodeType":"VariableDeclaration","scope":4577,"src":"30281:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"},"typeName":{"id":4556,"name":"int64","nodeType":"ElementaryTypeName","src":"30281:5:5","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"visibility":"internal"}],"src":"30280:18:5"},"scope":4800,"src":"30227:220:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4602,"nodeType":"Block","src":"30837:148:5","statements":[{"expression":{"id":4590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4585,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4583,"src":"30847:10:5","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4588,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4580,"src":"30866:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4587,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30860:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int56_$","typeString":"type(int56)"},"typeName":{"id":4586,"name":"int56","nodeType":"ElementaryTypeName","src":"30860:5:5","typeDescriptions":{}}},"id":4589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30860:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"src":"30847:25:5","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"id":4591,"nodeType":"ExpressionStatement","src":"30847:25:5"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4592,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4583,"src":"30886:10:5","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4593,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4580,"src":"30900:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"30886:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4601,"nodeType":"IfStatement","src":"30882:97:5","trueBody":{"id":4600,"nodeType":"Block","src":"30907:72:5","statements":[{"errorCall":{"arguments":[{"hexValue":"3536","id":4596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30958:2:5","typeDescriptions":{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},"value":"56"},{"id":4597,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4580,"src":"30962:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4595,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"30928:29:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30928:40:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4599,"nodeType":"RevertStatement","src":"30921:47:5"}]}}]},"documentation":{"id":4578,"nodeType":"StructuredDocumentation","src":"30453:307:5","text":" @dev Returns the downcasted int56 from int256, reverting on\n overflow (when the input is less than smallest int56 or\n greater than largest int56).\n Counterpart to Solidity's `int56` operator.\n Requirements:\n - input must fit into 56 bits"},"id":4603,"implemented":true,"kind":"function","modifiers":[],"name":"toInt56","nameLocation":"30774:7:5","nodeType":"FunctionDefinition","parameters":{"id":4581,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4580,"mutability":"mutable","name":"value","nameLocation":"30789:5:5","nodeType":"VariableDeclaration","scope":4603,"src":"30782:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4579,"name":"int256","nodeType":"ElementaryTypeName","src":"30782:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"30781:14:5"},"returnParameters":{"id":4584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4583,"mutability":"mutable","name":"downcasted","nameLocation":"30825:10:5","nodeType":"VariableDeclaration","scope":4603,"src":"30819:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"},"typeName":{"id":4582,"name":"int56","nodeType":"ElementaryTypeName","src":"30819:5:5","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"visibility":"internal"}],"src":"30818:18:5"},"scope":4800,"src":"30765:220:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4628,"nodeType":"Block","src":"31375:148:5","statements":[{"expression":{"id":4616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4611,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4609,"src":"31385:10:5","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4614,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4606,"src":"31404:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4613,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31398:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int48_$","typeString":"type(int48)"},"typeName":{"id":4612,"name":"int48","nodeType":"ElementaryTypeName","src":"31398:5:5","typeDescriptions":{}}},"id":4615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31398:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"src":"31385:25:5","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"id":4617,"nodeType":"ExpressionStatement","src":"31385:25:5"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4618,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4609,"src":"31424:10:5","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4619,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4606,"src":"31438:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"31424:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4627,"nodeType":"IfStatement","src":"31420:97:5","trueBody":{"id":4626,"nodeType":"Block","src":"31445:72:5","statements":[{"errorCall":{"arguments":[{"hexValue":"3438","id":4622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31496:2:5","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},{"id":4623,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4606,"src":"31500:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4621,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"31466:29:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31466:40:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4625,"nodeType":"RevertStatement","src":"31459:47:5"}]}}]},"documentation":{"id":4604,"nodeType":"StructuredDocumentation","src":"30991:307:5","text":" @dev Returns the downcasted int48 from int256, reverting on\n overflow (when the input is less than smallest int48 or\n greater than largest int48).\n Counterpart to Solidity's `int48` operator.\n Requirements:\n - input must fit into 48 bits"},"id":4629,"implemented":true,"kind":"function","modifiers":[],"name":"toInt48","nameLocation":"31312:7:5","nodeType":"FunctionDefinition","parameters":{"id":4607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4606,"mutability":"mutable","name":"value","nameLocation":"31327:5:5","nodeType":"VariableDeclaration","scope":4629,"src":"31320:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4605,"name":"int256","nodeType":"ElementaryTypeName","src":"31320:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"31319:14:5"},"returnParameters":{"id":4610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4609,"mutability":"mutable","name":"downcasted","nameLocation":"31363:10:5","nodeType":"VariableDeclaration","scope":4629,"src":"31357:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"},"typeName":{"id":4608,"name":"int48","nodeType":"ElementaryTypeName","src":"31357:5:5","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"visibility":"internal"}],"src":"31356:18:5"},"scope":4800,"src":"31303:220:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4654,"nodeType":"Block","src":"31913:148:5","statements":[{"expression":{"id":4642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4637,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4635,"src":"31923:10:5","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4640,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4632,"src":"31942:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4639,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31936:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int40_$","typeString":"type(int40)"},"typeName":{"id":4638,"name":"int40","nodeType":"ElementaryTypeName","src":"31936:5:5","typeDescriptions":{}}},"id":4641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31936:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"src":"31923:25:5","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"id":4643,"nodeType":"ExpressionStatement","src":"31923:25:5"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4644,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4635,"src":"31962:10:5","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4645,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4632,"src":"31976:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"31962:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4653,"nodeType":"IfStatement","src":"31958:97:5","trueBody":{"id":4652,"nodeType":"Block","src":"31983:72:5","statements":[{"errorCall":{"arguments":[{"hexValue":"3430","id":4648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32034:2:5","typeDescriptions":{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},"value":"40"},{"id":4649,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4632,"src":"32038:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4647,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"32004:29:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4650,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32004:40:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4651,"nodeType":"RevertStatement","src":"31997:47:5"}]}}]},"documentation":{"id":4630,"nodeType":"StructuredDocumentation","src":"31529:307:5","text":" @dev Returns the downcasted int40 from int256, reverting on\n overflow (when the input is less than smallest int40 or\n greater than largest int40).\n Counterpart to Solidity's `int40` operator.\n Requirements:\n - input must fit into 40 bits"},"id":4655,"implemented":true,"kind":"function","modifiers":[],"name":"toInt40","nameLocation":"31850:7:5","nodeType":"FunctionDefinition","parameters":{"id":4633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4632,"mutability":"mutable","name":"value","nameLocation":"31865:5:5","nodeType":"VariableDeclaration","scope":4655,"src":"31858:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4631,"name":"int256","nodeType":"ElementaryTypeName","src":"31858:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"31857:14:5"},"returnParameters":{"id":4636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4635,"mutability":"mutable","name":"downcasted","nameLocation":"31901:10:5","nodeType":"VariableDeclaration","scope":4655,"src":"31895:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"},"typeName":{"id":4634,"name":"int40","nodeType":"ElementaryTypeName","src":"31895:5:5","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"visibility":"internal"}],"src":"31894:18:5"},"scope":4800,"src":"31841:220:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4680,"nodeType":"Block","src":"32451:148:5","statements":[{"expression":{"id":4668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4663,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4661,"src":"32461:10:5","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4666,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4658,"src":"32480:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4665,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"32474:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int32_$","typeString":"type(int32)"},"typeName":{"id":4664,"name":"int32","nodeType":"ElementaryTypeName","src":"32474:5:5","typeDescriptions":{}}},"id":4667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32474:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"src":"32461:25:5","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"id":4669,"nodeType":"ExpressionStatement","src":"32461:25:5"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4670,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4661,"src":"32500:10:5","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4671,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4658,"src":"32514:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"32500:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4679,"nodeType":"IfStatement","src":"32496:97:5","trueBody":{"id":4678,"nodeType":"Block","src":"32521:72:5","statements":[{"errorCall":{"arguments":[{"hexValue":"3332","id":4674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32572:2:5","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},{"id":4675,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4658,"src":"32576:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4673,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"32542:29:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32542:40:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4677,"nodeType":"RevertStatement","src":"32535:47:5"}]}}]},"documentation":{"id":4656,"nodeType":"StructuredDocumentation","src":"32067:307:5","text":" @dev Returns the downcasted int32 from int256, reverting on\n overflow (when the input is less than smallest int32 or\n greater than largest int32).\n Counterpart to Solidity's `int32` operator.\n Requirements:\n - input must fit into 32 bits"},"id":4681,"implemented":true,"kind":"function","modifiers":[],"name":"toInt32","nameLocation":"32388:7:5","nodeType":"FunctionDefinition","parameters":{"id":4659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4658,"mutability":"mutable","name":"value","nameLocation":"32403:5:5","nodeType":"VariableDeclaration","scope":4681,"src":"32396:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4657,"name":"int256","nodeType":"ElementaryTypeName","src":"32396:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"32395:14:5"},"returnParameters":{"id":4662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4661,"mutability":"mutable","name":"downcasted","nameLocation":"32439:10:5","nodeType":"VariableDeclaration","scope":4681,"src":"32433:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"},"typeName":{"id":4660,"name":"int32","nodeType":"ElementaryTypeName","src":"32433:5:5","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"visibility":"internal"}],"src":"32432:18:5"},"scope":4800,"src":"32379:220:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4706,"nodeType":"Block","src":"32989:148:5","statements":[{"expression":{"id":4694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4689,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4687,"src":"32999:10:5","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4692,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4684,"src":"33018:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4691,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33012:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":4690,"name":"int24","nodeType":"ElementaryTypeName","src":"33012:5:5","typeDescriptions":{}}},"id":4693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33012:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"32999:25:5","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":4695,"nodeType":"ExpressionStatement","src":"32999:25:5"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4696,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4687,"src":"33038:10:5","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4697,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4684,"src":"33052:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"33038:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4705,"nodeType":"IfStatement","src":"33034:97:5","trueBody":{"id":4704,"nodeType":"Block","src":"33059:72:5","statements":[{"errorCall":{"arguments":[{"hexValue":"3234","id":4700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"33110:2:5","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},{"id":4701,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4684,"src":"33114:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4699,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"33080:29:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33080:40:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4703,"nodeType":"RevertStatement","src":"33073:47:5"}]}}]},"documentation":{"id":4682,"nodeType":"StructuredDocumentation","src":"32605:307:5","text":" @dev Returns the downcasted int24 from int256, reverting on\n overflow (when the input is less than smallest int24 or\n greater than largest int24).\n Counterpart to Solidity's `int24` operator.\n Requirements:\n - input must fit into 24 bits"},"id":4707,"implemented":true,"kind":"function","modifiers":[],"name":"toInt24","nameLocation":"32926:7:5","nodeType":"FunctionDefinition","parameters":{"id":4685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4684,"mutability":"mutable","name":"value","nameLocation":"32941:5:5","nodeType":"VariableDeclaration","scope":4707,"src":"32934:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4683,"name":"int256","nodeType":"ElementaryTypeName","src":"32934:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"32933:14:5"},"returnParameters":{"id":4688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4687,"mutability":"mutable","name":"downcasted","nameLocation":"32977:10:5","nodeType":"VariableDeclaration","scope":4707,"src":"32971:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":4686,"name":"int24","nodeType":"ElementaryTypeName","src":"32971:5:5","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"32970:18:5"},"scope":4800,"src":"32917:220:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4732,"nodeType":"Block","src":"33527:148:5","statements":[{"expression":{"id":4720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4715,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4713,"src":"33537:10:5","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4718,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4710,"src":"33556:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4717,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33550:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int16_$","typeString":"type(int16)"},"typeName":{"id":4716,"name":"int16","nodeType":"ElementaryTypeName","src":"33550:5:5","typeDescriptions":{}}},"id":4719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33550:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"src":"33537:25:5","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"id":4721,"nodeType":"ExpressionStatement","src":"33537:25:5"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4722,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4713,"src":"33576:10:5","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4723,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4710,"src":"33590:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"33576:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4731,"nodeType":"IfStatement","src":"33572:97:5","trueBody":{"id":4730,"nodeType":"Block","src":"33597:72:5","statements":[{"errorCall":{"arguments":[{"hexValue":"3136","id":4726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"33648:2:5","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},{"id":4727,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4710,"src":"33652:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4725,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"33618:29:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4728,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33618:40:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4729,"nodeType":"RevertStatement","src":"33611:47:5"}]}}]},"documentation":{"id":4708,"nodeType":"StructuredDocumentation","src":"33143:307:5","text":" @dev Returns the downcasted int16 from int256, reverting on\n overflow (when the input is less than smallest int16 or\n greater than largest int16).\n Counterpart to Solidity's `int16` operator.\n Requirements:\n - input must fit into 16 bits"},"id":4733,"implemented":true,"kind":"function","modifiers":[],"name":"toInt16","nameLocation":"33464:7:5","nodeType":"FunctionDefinition","parameters":{"id":4711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4710,"mutability":"mutable","name":"value","nameLocation":"33479:5:5","nodeType":"VariableDeclaration","scope":4733,"src":"33472:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4709,"name":"int256","nodeType":"ElementaryTypeName","src":"33472:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"33471:14:5"},"returnParameters":{"id":4714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4713,"mutability":"mutable","name":"downcasted","nameLocation":"33515:10:5","nodeType":"VariableDeclaration","scope":4733,"src":"33509:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"},"typeName":{"id":4712,"name":"int16","nodeType":"ElementaryTypeName","src":"33509:5:5","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"visibility":"internal"}],"src":"33508:18:5"},"scope":4800,"src":"33455:220:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4758,"nodeType":"Block","src":"34058:146:5","statements":[{"expression":{"id":4746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4741,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4739,"src":"34068:10:5","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4744,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4736,"src":"34086:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4743,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34081:4:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int8_$","typeString":"type(int8)"},"typeName":{"id":4742,"name":"int8","nodeType":"ElementaryTypeName","src":"34081:4:5","typeDescriptions":{}}},"id":4745,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34081:11:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"src":"34068:24:5","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"id":4747,"nodeType":"ExpressionStatement","src":"34068:24:5"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4748,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4739,"src":"34106:10:5","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4749,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4736,"src":"34120:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"34106:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4757,"nodeType":"IfStatement","src":"34102:96:5","trueBody":{"id":4756,"nodeType":"Block","src":"34127:71:5","statements":[{"errorCall":{"arguments":[{"hexValue":"38","id":4752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"34178:1:5","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},{"id":4753,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4736,"src":"34181:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4751,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"34148:29:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$_t_error_$","typeString":"function (uint8,int256) pure returns (error)"}},"id":4754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34148:39:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4755,"nodeType":"RevertStatement","src":"34141:46:5"}]}}]},"documentation":{"id":4734,"nodeType":"StructuredDocumentation","src":"33681:302:5","text":" @dev Returns the downcasted int8 from int256, reverting on\n overflow (when the input is less than smallest int8 or\n greater than largest int8).\n Counterpart to Solidity's `int8` operator.\n Requirements:\n - input must fit into 8 bits"},"id":4759,"implemented":true,"kind":"function","modifiers":[],"name":"toInt8","nameLocation":"33997:6:5","nodeType":"FunctionDefinition","parameters":{"id":4737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4736,"mutability":"mutable","name":"value","nameLocation":"34011:5:5","nodeType":"VariableDeclaration","scope":4759,"src":"34004:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4735,"name":"int256","nodeType":"ElementaryTypeName","src":"34004:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"34003:14:5"},"returnParameters":{"id":4740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4739,"mutability":"mutable","name":"downcasted","nameLocation":"34046:10:5","nodeType":"VariableDeclaration","scope":4759,"src":"34041:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"},"typeName":{"id":4738,"name":"int8","nodeType":"ElementaryTypeName","src":"34041:4:5","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"visibility":"internal"}],"src":"34040:17:5"},"scope":4800,"src":"33988:216:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4788,"nodeType":"Block","src":"34444:250:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4767,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4762,"src":"34557:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"arguments":[{"expression":{"arguments":[{"id":4772,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34578:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":4771,"name":"int256","nodeType":"ElementaryTypeName","src":"34578:6:5","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"}],"id":4770,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"34573:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34573:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int256","typeString":"type(int256)"}},"id":4774,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"34586:3:5","memberName":"max","nodeType":"MemberAccess","src":"34573:16:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4769,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34565:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4768,"name":"uint256","nodeType":"ElementaryTypeName","src":"34565:7:5","typeDescriptions":{}}},"id":4775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34565:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"34557:33:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4782,"nodeType":"IfStatement","src":"34553:105:5","trueBody":{"id":4781,"nodeType":"Block","src":"34592:66:5","statements":[{"errorCall":{"arguments":[{"id":4778,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4762,"src":"34641:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4777,"name":"SafeCastOverflowedUintToInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3062,"src":"34613:27:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$_t_error_$","typeString":"function (uint256) pure returns (error)"}},"id":4779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34613:34:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":4780,"nodeType":"RevertStatement","src":"34606:41:5"}]}},{"expression":{"arguments":[{"id":4785,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4762,"src":"34681:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4784,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34674:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":4783,"name":"int256","nodeType":"ElementaryTypeName","src":"34674:6:5","typeDescriptions":{}}},"id":4786,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34674:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4766,"id":4787,"nodeType":"Return","src":"34667:20:5"}]},"documentation":{"id":4760,"nodeType":"StructuredDocumentation","src":"34210:165:5","text":" @dev Converts an unsigned uint256 into a signed int256.\n Requirements:\n - input must be less than or equal to maxInt256."},"id":4789,"implemented":true,"kind":"function","modifiers":[],"name":"toInt256","nameLocation":"34389:8:5","nodeType":"FunctionDefinition","parameters":{"id":4763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4762,"mutability":"mutable","name":"value","nameLocation":"34406:5:5","nodeType":"VariableDeclaration","scope":4789,"src":"34398:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4761,"name":"uint256","nodeType":"ElementaryTypeName","src":"34398:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"34397:15:5"},"returnParameters":{"id":4766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4765,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4789,"src":"34436:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4764,"name":"int256","nodeType":"ElementaryTypeName","src":"34436:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"34435:8:5"},"scope":4800,"src":"34380:314:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4798,"nodeType":"Block","src":"34853:87:5","statements":[{"AST":{"nativeSrc":"34888:46:5","nodeType":"YulBlock","src":"34888:46:5","statements":[{"nativeSrc":"34902:22:5","nodeType":"YulAssignment","src":"34902:22:5","value":{"arguments":[{"arguments":[{"name":"b","nativeSrc":"34921:1:5","nodeType":"YulIdentifier","src":"34921:1:5"}],"functionName":{"name":"iszero","nativeSrc":"34914:6:5","nodeType":"YulIdentifier","src":"34914:6:5"},"nativeSrc":"34914:9:5","nodeType":"YulFunctionCall","src":"34914:9:5"}],"functionName":{"name":"iszero","nativeSrc":"34907:6:5","nodeType":"YulIdentifier","src":"34907:6:5"},"nativeSrc":"34907:17:5","nodeType":"YulFunctionCall","src":"34907:17:5"},"variableNames":[{"name":"u","nativeSrc":"34902:1:5","nodeType":"YulIdentifier","src":"34902:1:5"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4792,"isOffset":false,"isSlot":false,"src":"34921:1:5","valueSize":1},{"declaration":4795,"isOffset":false,"isSlot":false,"src":"34902:1:5","valueSize":1}],"flags":["memory-safe"],"id":4797,"nodeType":"InlineAssembly","src":"34863:71:5"}]},"documentation":{"id":4790,"nodeType":"StructuredDocumentation","src":"34700:90:5","text":" @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump."},"id":4799,"implemented":true,"kind":"function","modifiers":[],"name":"toUint","nameLocation":"34804:6:5","nodeType":"FunctionDefinition","parameters":{"id":4793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4792,"mutability":"mutable","name":"b","nameLocation":"34816:1:5","nodeType":"VariableDeclaration","scope":4799,"src":"34811:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4791,"name":"bool","nodeType":"ElementaryTypeName","src":"34811:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"34810:8:5"},"returnParameters":{"id":4796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4795,"mutability":"mutable","name":"u","nameLocation":"34850:1:5","nodeType":"VariableDeclaration","scope":4799,"src":"34842:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4794,"name":"uint256","nodeType":"ElementaryTypeName","src":"34842:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"34841:11:5"},"scope":4800,"src":"34795:145:5","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4801,"src":"769:34173:5","usedErrors":[3045,3050,3057,3062],"usedEvents":[]}],"src":"192:34751:5"},"id":5},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SafeCast":[4800],"SignedMath":[4944]},"id":4945,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4802,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:6"},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeCast.sol","file":"./SafeCast.sol","id":4804,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4945,"sourceUnit":4801,"src":"135:40:6","symbolAliases":[{"foreign":{"id":4803,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"143:8:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":4805,"nodeType":"StructuredDocumentation","src":"177:80:6","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":4944,"linearizedBaseContracts":[4944],"name":"SignedMath","nameLocation":"266:10:6","nodeType":"ContractDefinition","nodes":[{"body":{"id":4834,"nodeType":"Block","src":"746:215:6","statements":[{"id":4833,"nodeType":"UncheckedBlock","src":"756:199:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4817,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4812,"src":"894:1:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4818,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4810,"src":"900:1:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4819,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4812,"src":"904:1:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"900:5:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4821,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"899:7:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"arguments":[{"id":4826,"name":"condition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4808,"src":"932:9:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":4824,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"916:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$4800_$","typeString":"type(library SafeCast)"}},"id":4825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"925:6:6","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":4799,"src":"916:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":4827,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"916:26:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4823,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"909:6:6","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":4822,"name":"int256","nodeType":"ElementaryTypeName","src":"909:6:6","typeDescriptions":{}}},"id":4828,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"909:34:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"899:44:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4830,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"898:46:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"894:50:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4816,"id":4832,"nodeType":"Return","src":"887:57:6"}]}]},"documentation":{"id":4806,"nodeType":"StructuredDocumentation","src":"283:374:6","text":" @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n one branch when needed, making this function more expensive."},"id":4835,"implemented":true,"kind":"function","modifiers":[],"name":"ternary","nameLocation":"671:7:6","nodeType":"FunctionDefinition","parameters":{"id":4813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4808,"mutability":"mutable","name":"condition","nameLocation":"684:9:6","nodeType":"VariableDeclaration","scope":4835,"src":"679:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4807,"name":"bool","nodeType":"ElementaryTypeName","src":"679:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4810,"mutability":"mutable","name":"a","nameLocation":"702:1:6","nodeType":"VariableDeclaration","scope":4835,"src":"695:8:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4809,"name":"int256","nodeType":"ElementaryTypeName","src":"695:6:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4812,"mutability":"mutable","name":"b","nameLocation":"712:1:6","nodeType":"VariableDeclaration","scope":4835,"src":"705:8:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4811,"name":"int256","nodeType":"ElementaryTypeName","src":"705:6:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"678:36:6"},"returnParameters":{"id":4816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4815,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4835,"src":"738:6:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4814,"name":"int256","nodeType":"ElementaryTypeName","src":"738:6:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"737:8:6"},"scope":4944,"src":"662:299:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4853,"nodeType":"Block","src":"1102:44:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4846,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4838,"src":"1127:1:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4847,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4840,"src":"1131:1:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1127:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":4849,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4838,"src":"1134:1:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"id":4850,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4840,"src":"1137:1:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_int256","typeString":"int256"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4845,"name":"ternary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4835,"src":"1119:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_int256_$_t_int256_$returns$_t_int256_$","typeString":"function (bool,int256,int256) pure returns (int256)"}},"id":4851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1119:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4844,"id":4852,"nodeType":"Return","src":"1112:27:6"}]},"documentation":{"id":4836,"nodeType":"StructuredDocumentation","src":"967:66:6","text":" @dev Returns the largest of two signed numbers."},"id":4854,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"1047:3:6","nodeType":"FunctionDefinition","parameters":{"id":4841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4838,"mutability":"mutable","name":"a","nameLocation":"1058:1:6","nodeType":"VariableDeclaration","scope":4854,"src":"1051:8:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4837,"name":"int256","nodeType":"ElementaryTypeName","src":"1051:6:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4840,"mutability":"mutable","name":"b","nameLocation":"1068:1:6","nodeType":"VariableDeclaration","scope":4854,"src":"1061:8:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4839,"name":"int256","nodeType":"ElementaryTypeName","src":"1061:6:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1050:20:6"},"returnParameters":{"id":4844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4843,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4854,"src":"1094:6:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4842,"name":"int256","nodeType":"ElementaryTypeName","src":"1094:6:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1093:8:6"},"scope":4944,"src":"1038:108:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4872,"nodeType":"Block","src":"1288:44:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4865,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4857,"src":"1313:1:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4866,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4859,"src":"1317:1:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1313:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":4868,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4857,"src":"1320:1:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"id":4869,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4859,"src":"1323:1:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_int256","typeString":"int256"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4864,"name":"ternary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4835,"src":"1305:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_int256_$_t_int256_$returns$_t_int256_$","typeString":"function (bool,int256,int256) pure returns (int256)"}},"id":4870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1305:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4863,"id":4871,"nodeType":"Return","src":"1298:27:6"}]},"documentation":{"id":4855,"nodeType":"StructuredDocumentation","src":"1152:67:6","text":" @dev Returns the smallest of two signed numbers."},"id":4873,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"1233:3:6","nodeType":"FunctionDefinition","parameters":{"id":4860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4857,"mutability":"mutable","name":"a","nameLocation":"1244:1:6","nodeType":"VariableDeclaration","scope":4873,"src":"1237:8:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4856,"name":"int256","nodeType":"ElementaryTypeName","src":"1237:6:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4859,"mutability":"mutable","name":"b","nameLocation":"1254:1:6","nodeType":"VariableDeclaration","scope":4873,"src":"1247:8:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4858,"name":"int256","nodeType":"ElementaryTypeName","src":"1247:6:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1236:20:6"},"returnParameters":{"id":4863,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4862,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4873,"src":"1280:6:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4861,"name":"int256","nodeType":"ElementaryTypeName","src":"1280:6:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1279:8:6"},"scope":4944,"src":"1224:108:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4916,"nodeType":"Block","src":"1537:162:6","statements":[{"assignments":[4884],"declarations":[{"constant":false,"id":4884,"mutability":"mutable","name":"x","nameLocation":"1606:1:6","nodeType":"VariableDeclaration","scope":4916,"src":"1599:8:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4883,"name":"int256","nodeType":"ElementaryTypeName","src":"1599:6:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4897,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4885,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4876,"src":"1611:1:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4886,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4878,"src":"1615:1:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1611:5:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4888,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1610:7:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4889,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4876,"src":"1622:1:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4890,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4878,"src":"1626:1:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1622:5:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4892,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1621:7:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1632:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1621:12:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4895,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1620:14:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1610:24:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"1599:35:6"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4898,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4884,"src":"1651:1:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4903,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4884,"src":"1671:1:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4902,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1663:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4901,"name":"uint256","nodeType":"ElementaryTypeName","src":"1663:7:6","typeDescriptions":{}}},"id":4904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1663:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":4905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1677:3:6","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"1663:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4900,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1656:6:6","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":4899,"name":"int256","nodeType":"ElementaryTypeName","src":"1656:6:6","typeDescriptions":{}}},"id":4907,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1656:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4908,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4876,"src":"1685:1:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4909,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4878,"src":"1689:1:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1685:5:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4911,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1684:7:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1656:35:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4913,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1655:37:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1651:41:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4882,"id":4915,"nodeType":"Return","src":"1644:48:6"}]},"documentation":{"id":4874,"nodeType":"StructuredDocumentation","src":"1338:126:6","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":4917,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"1478:7:6","nodeType":"FunctionDefinition","parameters":{"id":4879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4876,"mutability":"mutable","name":"a","nameLocation":"1493:1:6","nodeType":"VariableDeclaration","scope":4917,"src":"1486:8:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4875,"name":"int256","nodeType":"ElementaryTypeName","src":"1486:6:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4878,"mutability":"mutable","name":"b","nameLocation":"1503:1:6","nodeType":"VariableDeclaration","scope":4917,"src":"1496:8:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4877,"name":"int256","nodeType":"ElementaryTypeName","src":"1496:6:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1485:20:6"},"returnParameters":{"id":4882,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4881,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4917,"src":"1529:6:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4880,"name":"int256","nodeType":"ElementaryTypeName","src":"1529:6:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1528:8:6"},"scope":4944,"src":"1469:230:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4942,"nodeType":"Block","src":"1843:767:6","statements":[{"id":4941,"nodeType":"UncheckedBlock","src":"1853:751:6","statements":[{"assignments":[4926],"declarations":[{"constant":false,"id":4926,"mutability":"mutable","name":"mask","nameLocation":"2424:4:6","nodeType":"VariableDeclaration","scope":4941,"src":"2417:11:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4925,"name":"int256","nodeType":"ElementaryTypeName","src":"2417:6:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4930,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4927,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4920,"src":"2431:1:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":4928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2436:3:6","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"2431:8:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"2417:22:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4933,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4920,"src":"2576:1:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4934,"name":"mask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4926,"src":"2580:4:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"2576:8:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4936,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2575:10:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4937,"name":"mask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4926,"src":"2588:4:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"2575:17:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4932,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2567:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4931,"name":"uint256","nodeType":"ElementaryTypeName","src":"2567:7:6","typeDescriptions":{}}},"id":4939,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2567:26:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4924,"id":4940,"nodeType":"Return","src":"2560:33:6"}]}]},"documentation":{"id":4918,"nodeType":"StructuredDocumentation","src":"1705:78:6","text":" @dev Returns the absolute unsigned value of a signed value."},"id":4943,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1797:3:6","nodeType":"FunctionDefinition","parameters":{"id":4921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4920,"mutability":"mutable","name":"n","nameLocation":"1808:1:6","nodeType":"VariableDeclaration","scope":4943,"src":"1801:8:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4919,"name":"int256","nodeType":"ElementaryTypeName","src":"1801:6:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1800:10:6"},"returnParameters":{"id":4924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4923,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4943,"src":"1834:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4922,"name":"uint256","nodeType":"ElementaryTypeName","src":"1834:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1833:9:6"},"scope":4944,"src":"1788:822:6","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4945,"src":"258:2354:6","usedErrors":[],"usedEvents":[]}],"src":"109:2504:6"},"id":6},"contracts/ORTBet.sol":{"ast":{"absolutePath":"contracts/ORTBet.sol","exportedSymbols":{"Context":[177],"Math":[3035],"ORTBet":[5813],"Ownable":[147],"SafeCast":[4800],"SignedMath":[4944],"Strings":[1429]},"id":5814,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":4946,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"39:24:7"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":4947,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5814,"sourceUnit":148,"src":"65:52:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"@openzeppelin/contracts/utils/Strings.sol","id":4948,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5814,"sourceUnit":1430,"src":"118:51:7","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4949,"name":"Ownable","nameLocations":["190:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"190:7:7"},"id":4950,"nodeType":"InheritanceSpecifier","src":"190:7:7"}],"canonicalName":"ORTBet","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5813,"linearizedBaseContracts":[5813,147,177],"name":"ORTBet","nameLocation":"180:6:7","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"26224c64","id":4954,"mutability":"mutable","name":"userBalances","nameLocation":"239:12:7","nodeType":"VariableDeclaration","scope":5813,"src":"204:47:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":4953,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4951,"name":"address","nodeType":"ElementaryTypeName","src":"212:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"204:27:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4952,"name":"uint256","nodeType":"ElementaryTypeName","src":"223:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"92417dc7","id":4958,"mutability":"mutable","name":"lockedStakes","nameLocation":"292:12:7","nodeType":"VariableDeclaration","scope":5813,"src":"257:47:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":4957,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4955,"name":"address","nodeType":"ElementaryTypeName","src":"265:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"257:27:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4956,"name":"uint256","nodeType":"ElementaryTypeName","src":"276:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"f579f882","id":4963,"mutability":"mutable","name":"games","nameLocation":"342:5:7","nodeType":"VariableDeclaration","scope":5813,"src":"310:37:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Game_$5052_storage_$","typeString":"mapping(bytes32 => struct ORTBet.Game)"},"typeName":{"id":4962,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4959,"name":"bytes32","nodeType":"ElementaryTypeName","src":"318:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"310:24:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Game_$5052_storage_$","typeString":"mapping(bytes32 => struct ORTBet.Game)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4961,"nodeType":"UserDefinedTypeName","pathNode":{"id":4960,"name":"Game","nameLocations":["329:4:7"],"nodeType":"IdentifierPath","referencedDeclaration":5052,"src":"329:4:7"},"referencedDeclaration":5052,"src":"329:4:7","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_storage_ptr","typeString":"struct ORTBet.Game"}}},"visibility":"public"},{"constant":false,"functionSelector":"d3856e55","id":4968,"mutability":"mutable","name":"backupAddresses","nameLocation":"390:15:7","nodeType":"VariableDeclaration","scope":5813,"src":"353:52:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[])"},"typeName":{"id":4967,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4964,"name":"address","nodeType":"ElementaryTypeName","src":"361:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"353:29:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[])"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"baseType":{"id":4965,"name":"address","nodeType":"ElementaryTypeName","src":"372:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4966,"nodeType":"ArrayTypeName","src":"372:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"visibility":"public"},{"constant":true,"functionSelector":"a001ecdd","id":4971,"mutability":"constant","name":"feePercentage","nameLocation":"435:13:7","nodeType":"VariableDeclaration","scope":5813,"src":"411:41:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4969,"name":"uint256","nodeType":"ElementaryTypeName","src":"411:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"33","id":4970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"451:1:7","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"public"},{"constant":true,"functionSelector":"ae6ba4cc","id":4974,"mutability":"constant","name":"maxBackupAddresses","nameLocation":"482:18:7","nodeType":"VariableDeclaration","scope":5813,"src":"458:46:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4972,"name":"uint256","nodeType":"ElementaryTypeName","src":"458:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"33","id":4973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"503:1:7","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"public"},{"constant":false,"functionSelector":"f071db5a","id":4976,"mutability":"mutable","name":"feesCollected","nameLocation":"525:13:7","nodeType":"VariableDeclaration","scope":5813,"src":"510:28:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4975,"name":"uint256","nodeType":"ElementaryTypeName","src":"510:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"anonymous":false,"eventSelector":"029b53808e5ee258b1acdd8061a270b641aaded1f730ef560687f44a98827bdc","id":4984,"name":"StakesDeposited","nameLocation":"551:15:7","nodeType":"EventDefinition","parameters":{"id":4983,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4978,"indexed":true,"mutability":"mutable","name":"player","nameLocation":"592:6:7","nodeType":"VariableDeclaration","scope":4984,"src":"576:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4977,"name":"address","nodeType":"ElementaryTypeName","src":"576:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4980,"indexed":true,"mutability":"mutable","name":"depositAddress","nameLocation":"624:14:7","nodeType":"VariableDeclaration","scope":4984,"src":"608:30:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4979,"name":"address","nodeType":"ElementaryTypeName","src":"608:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4982,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"656:6:7","nodeType":"VariableDeclaration","scope":4984,"src":"648:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4981,"name":"uint256","nodeType":"ElementaryTypeName","src":"648:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"566:102:7"},"src":"545:124:7"},{"anonymous":false,"eventSelector":"2ecb67032ef4329934be5b0b0c0b7277932396db57a18598adde8fcba3d92034","id":4992,"name":"StakesWithdrawn","nameLocation":"680:15:7","nodeType":"EventDefinition","parameters":{"id":4991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4986,"indexed":true,"mutability":"mutable","name":"player","nameLocation":"721:6:7","nodeType":"VariableDeclaration","scope":4992,"src":"705:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4985,"name":"address","nodeType":"ElementaryTypeName","src":"705:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4988,"indexed":true,"mutability":"mutable","name":"withdrawalAddress","nameLocation":"753:17:7","nodeType":"VariableDeclaration","scope":4992,"src":"737:33:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4987,"name":"address","nodeType":"ElementaryTypeName","src":"737:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4990,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"788:6:7","nodeType":"VariableDeclaration","scope":4992,"src":"780:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4989,"name":"uint256","nodeType":"ElementaryTypeName","src":"780:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"695:105:7"},"src":"674:127:7"},{"anonymous":false,"eventSelector":"41375446217eacab943f69f43e90965cbed73a9648b36f7c1276c8e76bb67bad","id":4998,"name":"StakesLocked","nameLocation":"812:12:7","nodeType":"EventDefinition","parameters":{"id":4997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4994,"indexed":true,"mutability":"mutable","name":"player","nameLocation":"841:6:7","nodeType":"VariableDeclaration","scope":4998,"src":"825:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4993,"name":"address","nodeType":"ElementaryTypeName","src":"825:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4996,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"857:6:7","nodeType":"VariableDeclaration","scope":4998,"src":"849:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4995,"name":"uint256","nodeType":"ElementaryTypeName","src":"849:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"824:40:7"},"src":"806:59:7"},{"anonymous":false,"eventSelector":"68510e4a026e1e6eb57d0691a8904192605ae5f5c8c1e0c878bcfd8299f56132","id":5004,"name":"StakesUnlocked","nameLocation":"876:14:7","nodeType":"EventDefinition","parameters":{"id":5003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5000,"indexed":true,"mutability":"mutable","name":"player","nameLocation":"907:6:7","nodeType":"VariableDeclaration","scope":5004,"src":"891:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4999,"name":"address","nodeType":"ElementaryTypeName","src":"891:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5002,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"923:6:7","nodeType":"VariableDeclaration","scope":5004,"src":"915:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5001,"name":"uint256","nodeType":"ElementaryTypeName","src":"915:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"890:40:7"},"src":"870:61:7"},{"anonymous":false,"eventSelector":"ca5be7d622fe97529270450062762f9bac7e27828ef7b8658af85234f44146cd","id":5014,"name":"GameStarted","nameLocation":"942:11:7","nodeType":"EventDefinition","parameters":{"id":5013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5006,"indexed":true,"mutability":"mutable","name":"gameId","nameLocation":"979:6:7","nodeType":"VariableDeclaration","scope":5014,"src":"963:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5005,"name":"bytes32","nodeType":"ElementaryTypeName","src":"963:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5008,"indexed":true,"mutability":"mutable","name":"player1","nameLocation":"1011:7:7","nodeType":"VariableDeclaration","scope":5014,"src":"995:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5007,"name":"address","nodeType":"ElementaryTypeName","src":"995:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5010,"indexed":true,"mutability":"mutable","name":"player2","nameLocation":"1044:7:7","nodeType":"VariableDeclaration","scope":5014,"src":"1028:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5009,"name":"address","nodeType":"ElementaryTypeName","src":"1028:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5012,"indexed":false,"mutability":"mutable","name":"stakeAmount","nameLocation":"1069:11:7","nodeType":"VariableDeclaration","scope":5014,"src":"1061:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5011,"name":"uint256","nodeType":"ElementaryTypeName","src":"1061:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"953:133:7"},"src":"936:151:7"},{"anonymous":false,"eventSelector":"84084530ad38987aaa9b1454bf4cbc496558210efbfe8ec98c3a6879f4e9a38a","id":5021,"name":"GameResolved","nameLocation":"1098:12:7","nodeType":"EventDefinition","parameters":{"id":5020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5016,"indexed":true,"mutability":"mutable","name":"gameId","nameLocation":"1127:6:7","nodeType":"VariableDeclaration","scope":5021,"src":"1111:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5015,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1111:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5019,"indexed":false,"mutability":"mutable","name":"result","nameLocation":"1146:6:7","nodeType":"VariableDeclaration","scope":5021,"src":"1135:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_GameResult_$5043","typeString":"enum ORTBet.GameResult"},"typeName":{"id":5018,"nodeType":"UserDefinedTypeName","pathNode":{"id":5017,"name":"GameResult","nameLocations":["1135:10:7"],"nodeType":"IdentifierPath","referencedDeclaration":5043,"src":"1135:10:7"},"referencedDeclaration":5043,"src":"1135:10:7","typeDescriptions":{"typeIdentifier":"t_enum$_GameResult_$5043","typeString":"enum ORTBet.GameResult"}},"visibility":"internal"}],"src":"1110:43:7"},"src":"1092:62:7"},{"anonymous":false,"eventSelector":"183963c107e526b4dc8ae0c8b5b960da3bddd00ae79c713ba806a69ab06ab971","id":5027,"name":"BackupAddressAdded","nameLocation":"1165:18:7","nodeType":"EventDefinition","parameters":{"id":5026,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5023,"indexed":true,"mutability":"mutable","name":"backupAddress","nameLocation":"1209:13:7","nodeType":"VariableDeclaration","scope":5027,"src":"1193:29:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5022,"name":"address","nodeType":"ElementaryTypeName","src":"1193:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5025,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"1248:5:7","nodeType":"VariableDeclaration","scope":5027,"src":"1232:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5024,"name":"address","nodeType":"ElementaryTypeName","src":"1232:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1183:76:7"},"src":"1159:101:7"},{"anonymous":false,"eventSelector":"fe51b55ea38e48cc7fb184d0d60446a88610b80da472d30aa215a65227615744","id":5033,"name":"BackupAddressRemoved","nameLocation":"1271:20:7","nodeType":"EventDefinition","parameters":{"id":5032,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5029,"indexed":true,"mutability":"mutable","name":"backupAddress","nameLocation":"1317:13:7","nodeType":"VariableDeclaration","scope":5033,"src":"1301:29:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5028,"name":"address","nodeType":"ElementaryTypeName","src":"1301:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5031,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"1356:5:7","nodeType":"VariableDeclaration","scope":5033,"src":"1340:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5030,"name":"address","nodeType":"ElementaryTypeName","src":"1340:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1291:76:7"},"src":"1265:103:7"},{"anonymous":false,"eventSelector":"c0819c13be868895eb93e40eaceb96de976442fa1d404e5c55f14bb65a8c489a","id":5039,"name":"FeesWithdrawn","nameLocation":"1379:13:7","nodeType":"EventDefinition","parameters":{"id":5038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5035,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"1409:5:7","nodeType":"VariableDeclaration","scope":5039,"src":"1393:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5034,"name":"address","nodeType":"ElementaryTypeName","src":"1393:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5037,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1424:6:7","nodeType":"VariableDeclaration","scope":5039,"src":"1416:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5036,"name":"uint256","nodeType":"ElementaryTypeName","src":"1416:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1392:39:7"},"src":"1373:59:7"},{"canonicalName":"ORTBet.GameResult","id":5043,"members":[{"id":5040,"name":"Draw","nameLocation":"1464:4:7","nodeType":"EnumValue","src":"1464:4:7"},{"id":5041,"name":"Player1Won","nameLocation":"1478:10:7","nodeType":"EnumValue","src":"1478:10:7"},{"id":5042,"name":"Player2Won","nameLocation":"1498:10:7","nodeType":"EnumValue","src":"1498:10:7"}],"name":"GameResult","nameLocation":"1443:10:7","nodeType":"EnumDefinition","src":"1438:76:7"},{"canonicalName":"ORTBet.Game","id":5052,"members":[{"constant":false,"id":5045,"mutability":"mutable","name":"player1","nameLocation":"1550:7:7","nodeType":"VariableDeclaration","scope":5052,"src":"1542:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5044,"name":"address","nodeType":"ElementaryTypeName","src":"1542:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5047,"mutability":"mutable","name":"player2","nameLocation":"1575:7:7","nodeType":"VariableDeclaration","scope":5052,"src":"1567:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5046,"name":"address","nodeType":"ElementaryTypeName","src":"1567:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5049,"mutability":"mutable","name":"stakeAmount","nameLocation":"1600:11:7","nodeType":"VariableDeclaration","scope":5052,"src":"1592:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5048,"name":"uint256","nodeType":"ElementaryTypeName","src":"1592:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5051,"mutability":"mutable","name":"ongoing","nameLocation":"1626:7:7","nodeType":"VariableDeclaration","scope":5052,"src":"1621:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5050,"name":"bool","nodeType":"ElementaryTypeName","src":"1621:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"Game","nameLocation":"1527:4:7","nodeType":"StructDefinition","scope":5813,"src":"1520:120:7","visibility":"public"},{"body":{"id":5059,"nodeType":"Block","src":"1680:2:7","statements":[]},"id":5060,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"expression":{"id":5055,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1668:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1672:6:7","memberName":"sender","nodeType":"MemberAccess","src":"1668:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5057,"kind":"baseConstructorSpecifier","modifierName":{"id":5054,"name":"Ownable","nameLocations":["1660:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"1660:7:7"},"nodeType":"ModifierInvocation","src":"1660:19:7"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5053,"nodeType":"ParameterList","parameters":[],"src":"1657:2:7"},"returnParameters":{"id":5058,"nodeType":"ParameterList","parameters":[],"src":"1680:0:7"},"scope":5813,"src":"1646:36:7","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5088,"nodeType":"Block","src":"1730:193:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5064,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1748:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1752:5:7","memberName":"value","nodeType":"MemberAccess","src":"1748:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1760:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1748:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4465706f73697420616d6f756e74206d7573742062652067726561746572207468616e20302e","id":5068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1763:40:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_428675301fd335ad7663745fad16f23e40b3d007e15c73499f8fc16797bb5be3","typeString":"literal_string \"Deposit amount must be greater than 0.\""},"value":"Deposit amount must be greater than 0."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_428675301fd335ad7663745fad16f23e40b3d007e15c73499f8fc16797bb5be3","typeString":"literal_string \"Deposit amount must be greater than 0.\""}],"id":5063,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"1740:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1740:64:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5070,"nodeType":"ExpressionStatement","src":"1740:64:7"},{"expression":{"id":5077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5071,"name":"userBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4954,"src":"1814:12:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5074,"indexExpression":{"expression":{"id":5072,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1827:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1831:6:7","memberName":"sender","nodeType":"MemberAccess","src":"1827:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1814:24:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":5075,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1842:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1846:5:7","memberName":"value","nodeType":"MemberAccess","src":"1842:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1814:37:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5078,"nodeType":"ExpressionStatement","src":"1814:37:7"},{"eventCall":{"arguments":[{"expression":{"id":5080,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1882:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1886:6:7","memberName":"sender","nodeType":"MemberAccess","src":"1882:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5082,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1894:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1898:6:7","memberName":"sender","nodeType":"MemberAccess","src":"1894:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5084,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1906:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1910:5:7","memberName":"value","nodeType":"MemberAccess","src":"1906:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5079,"name":"StakesDeposited","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4984,"src":"1866:15:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":5086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1866:50:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5087,"nodeType":"EmitStatement","src":"1861:55:7"}]},"functionSelector":"2177457d","id":5089,"implemented":true,"kind":"function","modifiers":[],"name":"depositStakes","nameLocation":"1697:13:7","nodeType":"FunctionDefinition","parameters":{"id":5061,"nodeType":"ParameterList","parameters":[],"src":"1710:2:7"},"returnParameters":{"id":5062,"nodeType":"ParameterList","parameters":[],"src":"1730:0:7"},"scope":5813,"src":"1688:235:7","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":5120,"nodeType":"Block","src":"2037:198:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5098,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2055:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2059:5:7","memberName":"value","nodeType":"MemberAccess","src":"2055:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2067:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2055:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4465706f73697420616d6f756e74206d7573742062652067726561746572207468616e20302e","id":5102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2070:40:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_428675301fd335ad7663745fad16f23e40b3d007e15c73499f8fc16797bb5be3","typeString":"literal_string \"Deposit amount must be greater than 0.\""},"value":"Deposit amount must be greater than 0."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_428675301fd335ad7663745fad16f23e40b3d007e15c73499f8fc16797bb5be3","typeString":"literal_string \"Deposit amount must be greater than 0.\""}],"id":5097,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2047:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2047:64:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5104,"nodeType":"ExpressionStatement","src":"2047:64:7"},{"expression":{"id":5110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5105,"name":"userBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4954,"src":"2122:12:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5107,"indexExpression":{"id":5106,"name":"_mainAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5091,"src":"2135:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2122:26:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":5108,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2152:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2156:5:7","memberName":"value","nodeType":"MemberAccess","src":"2152:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2122:39:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5111,"nodeType":"ExpressionStatement","src":"2122:39:7"},{"eventCall":{"arguments":[{"id":5113,"name":"_mainAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5091,"src":"2192:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5114,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2206:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2210:6:7","memberName":"sender","nodeType":"MemberAccess","src":"2206:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5116,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2218:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2222:5:7","memberName":"value","nodeType":"MemberAccess","src":"2218:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5112,"name":"StakesDeposited","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4984,"src":"2176:15:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":5118,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2176:52:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5119,"nodeType":"EmitStatement","src":"2171:57:7"}]},"functionSelector":"a105e149","id":5121,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5094,"name":"_mainAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5091,"src":"2023:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5095,"kind":"modifierInvocation","modifierName":{"id":5093,"name":"onlyBackupAddress","nameLocations":["2005:17:7"],"nodeType":"IdentifierPath","referencedDeclaration":5812,"src":"2005:17:7"},"nodeType":"ModifierInvocation","src":"2005:31:7"}],"name":"depositStakes","nameLocation":"1938:13:7","nodeType":"FunctionDefinition","parameters":{"id":5092,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5091,"mutability":"mutable","name":"_mainAddress","nameLocation":"1969:12:7","nodeType":"VariableDeclaration","scope":5121,"src":"1961:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5090,"name":"address","nodeType":"ElementaryTypeName","src":"1961:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1951:36:7"},"returnParameters":{"id":5096,"nodeType":"ParameterList","parameters":[],"src":"2037:0:7"},"scope":5813,"src":"1929:306:7","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":5167,"nodeType":"Block","src":"2291:361:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5127,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5123,"src":"2309:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2319:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2309:11:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5769746864726177616c20616d6f756e74206d7573742062652067726561746572207468616e20302e","id":5130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2322:43:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_ddb92dca1b14b7f86de22eb952ec5692b5d32ff7d579451d25c03288285572d1","typeString":"literal_string \"Withdrawal amount must be greater than 0.\""},"value":"Withdrawal amount must be greater than 0."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ddb92dca1b14b7f86de22eb952ec5692b5d32ff7d579451d25c03288285572d1","typeString":"literal_string \"Withdrawal amount must be greater than 0.\""}],"id":5126,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2301:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2301:65:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5132,"nodeType":"ExpressionStatement","src":"2301:65:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5134,"name":"userBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4954,"src":"2397:12:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5137,"indexExpression":{"expression":{"id":5135,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2410:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2414:6:7","memberName":"sender","nodeType":"MemberAccess","src":"2410:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2397:24:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":5138,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5123,"src":"2425:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2397:35:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e742066756e647320746f2077697468647261772e","id":5140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2446:33:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_a1f811b878a206abc1b2ab57b5c43ceee3594f84b9fd983a59ec653d7b970398","typeString":"literal_string \"Insufficient funds to withdraw.\""},"value":"Insufficient funds to withdraw."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a1f811b878a206abc1b2ab57b5c43ceee3594f84b9fd983a59ec653d7b970398","typeString":"literal_string \"Insufficient funds to withdraw.\""}],"id":5133,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2376:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2376:113:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5142,"nodeType":"ExpressionStatement","src":"2376:113:7"},{"expression":{"id":5148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5143,"name":"userBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4954,"src":"2500:12:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5146,"indexExpression":{"expression":{"id":5144,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2513:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2517:6:7","memberName":"sender","nodeType":"MemberAccess","src":"2513:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2500:24:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":5147,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5123,"src":"2528:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2500:35:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5149,"nodeType":"ExpressionStatement","src":"2500:35:7"},{"expression":{"arguments":[{"id":5156,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5123,"src":"2574:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":5152,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2553:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2557:6:7","memberName":"sender","nodeType":"MemberAccess","src":"2553:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5151,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2545:8:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":5150,"name":"address","nodeType":"ElementaryTypeName","src":"2545:8:7","stateMutability":"payable","typeDescriptions":{}}},"id":5154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2545:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":5155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2565:8:7","memberName":"transfer","nodeType":"MemberAccess","src":"2545:28:7","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2545:37:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5158,"nodeType":"ExpressionStatement","src":"2545:37:7"},{"eventCall":{"arguments":[{"expression":{"id":5160,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2613:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2617:6:7","memberName":"sender","nodeType":"MemberAccess","src":"2613:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5162,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2625:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2629:6:7","memberName":"sender","nodeType":"MemberAccess","src":"2625:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5164,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5123,"src":"2637:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5159,"name":"StakesWithdrawn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4992,"src":"2597:15:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":5165,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2597:48:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5166,"nodeType":"EmitStatement","src":"2592:53:7"}]},"functionSelector":"410390ec","id":5168,"implemented":true,"kind":"function","modifiers":[],"name":"withdrawStakes","nameLocation":"2250:14:7","nodeType":"FunctionDefinition","parameters":{"id":5124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5123,"mutability":"mutable","name":"_amount","nameLocation":"2273:7:7","nodeType":"VariableDeclaration","scope":5168,"src":"2265:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5122,"name":"uint256","nodeType":"ElementaryTypeName","src":"2265:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2264:17:7"},"returnParameters":{"id":5125,"nodeType":"ParameterList","parameters":[],"src":"2291:0:7"},"scope":5813,"src":"2241:411:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5216,"nodeType":"Block","src":"2784:367:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5179,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5170,"src":"2802:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2812:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2802:11:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5769746864726177616c20616d6f756e74206d7573742062652067726561746572207468616e20302e","id":5182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2815:43:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_ddb92dca1b14b7f86de22eb952ec5692b5d32ff7d579451d25c03288285572d1","typeString":"literal_string \"Withdrawal amount must be greater than 0.\""},"value":"Withdrawal amount must be greater than 0."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ddb92dca1b14b7f86de22eb952ec5692b5d32ff7d579451d25c03288285572d1","typeString":"literal_string \"Withdrawal amount must be greater than 0.\""}],"id":5178,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2794:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2794:65:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5184,"nodeType":"ExpressionStatement","src":"2794:65:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5186,"name":"userBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4954,"src":"2890:12:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5188,"indexExpression":{"id":5187,"name":"_mainAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5172,"src":"2903:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2890:26:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":5189,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5170,"src":"2920:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2890:37:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e742066756e647320746f2077697468647261772e","id":5191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2941:33:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_a1f811b878a206abc1b2ab57b5c43ceee3594f84b9fd983a59ec653d7b970398","typeString":"literal_string \"Insufficient funds to withdraw.\""},"value":"Insufficient funds to withdraw."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a1f811b878a206abc1b2ab57b5c43ceee3594f84b9fd983a59ec653d7b970398","typeString":"literal_string \"Insufficient funds to withdraw.\""}],"id":5185,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2869:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2869:115:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5193,"nodeType":"ExpressionStatement","src":"2869:115:7"},{"expression":{"id":5198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5194,"name":"userBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4954,"src":"2995:12:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5196,"indexExpression":{"id":5195,"name":"_mainAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5172,"src":"3008:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2995:26:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":5197,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5170,"src":"3025:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2995:37:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5199,"nodeType":"ExpressionStatement","src":"2995:37:7"},{"expression":{"arguments":[{"id":5206,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5170,"src":"3071:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":5202,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3050:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3054:6:7","memberName":"sender","nodeType":"MemberAccess","src":"3050:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5201,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3042:8:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":5200,"name":"address","nodeType":"ElementaryTypeName","src":"3042:8:7","stateMutability":"payable","typeDescriptions":{}}},"id":5204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3042:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":5205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3062:8:7","memberName":"transfer","nodeType":"MemberAccess","src":"3042:28:7","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3042:37:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5208,"nodeType":"ExpressionStatement","src":"3042:37:7"},{"eventCall":{"arguments":[{"id":5210,"name":"_mainAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5172,"src":"3110:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5211,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3124:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3128:6:7","memberName":"sender","nodeType":"MemberAccess","src":"3124:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5213,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5170,"src":"3136:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5209,"name":"StakesWithdrawn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4992,"src":"3094:15:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":5214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3094:50:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5215,"nodeType":"EmitStatement","src":"3089:55:7"}]},"functionSelector":"5aaccf69","id":5217,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5175,"name":"_mainAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5172,"src":"2770:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5176,"kind":"modifierInvocation","modifierName":{"id":5174,"name":"onlyBackupAddress","nameLocations":["2752:17:7"],"nodeType":"IdentifierPath","referencedDeclaration":5812,"src":"2752:17:7"},"nodeType":"ModifierInvocation","src":"2752:31:7"}],"name":"withdrawStakes","nameLocation":"2667:14:7","nodeType":"FunctionDefinition","parameters":{"id":5173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5170,"mutability":"mutable","name":"_amount","nameLocation":"2699:7:7","nodeType":"VariableDeclaration","scope":5217,"src":"2691:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5169,"name":"uint256","nodeType":"ElementaryTypeName","src":"2691:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5172,"mutability":"mutable","name":"_mainAddress","nameLocation":"2724:12:7","nodeType":"VariableDeclaration","scope":5217,"src":"2716:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5171,"name":"address","nodeType":"ElementaryTypeName","src":"2716:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2681:61:7"},"returnParameters":{"id":5177,"nodeType":"ParameterList","parameters":[],"src":"2784:0:7"},"scope":5813,"src":"2658:493:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5363,"nodeType":"Block","src":"3316:1555:7","statements":[{"assignments":[5231],"declarations":[{"constant":false,"id":5231,"mutability":"mutable","name":"gameIdHash","nameLocation":"3334:10:7","nodeType":"VariableDeclaration","scope":5363,"src":"3326:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5230,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3326:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5238,"initialValue":{"arguments":[{"arguments":[{"id":5235,"name":"_gameId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5219,"src":"3374:7:7","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"expression":{"id":5233,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3357:3:7","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5234,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3361:12:7","memberName":"encodePacked","nodeType":"MemberAccess","src":"3357:16:7","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3357:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5232,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3347:9:7","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3347:36:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3326:57:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":5240,"name":"games","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4963,"src":"3481:5:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Game_$5052_storage_$","typeString":"mapping(bytes32 => struct ORTBet.Game storage ref)"}},"id":5242,"indexExpression":{"id":5241,"name":"gameIdHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5231,"src":"3487:10:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3481:17:7","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_storage","typeString":"struct ORTBet.Game storage ref"}},"id":5243,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3499:11:7","memberName":"stakeAmount","nodeType":"MemberAccess","referencedDeclaration":5049,"src":"3481:29:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3514:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3481:34:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"47616d6520494420616c7265616479206578697374732e","id":5246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3517:25:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc691903107a0912eff42becc72be6ba9923b8e686b6174029fe086e98b843bc","typeString":"literal_string \"Game ID already exists.\""},"value":"Game ID already exists."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc691903107a0912eff42becc72be6ba9923b8e686b6174029fe086e98b843bc","typeString":"literal_string \"Game ID already exists.\""}],"id":5239,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"3473:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3473:70:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5248,"nodeType":"ExpressionStatement","src":"3473:70:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5250,"name":"_player1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5221,"src":"3574:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3594:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5252,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3586:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5251,"name":"address","nodeType":"ElementaryTypeName","src":"3586:7:7","typeDescriptions":{}}},"id":5254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3586:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3574:22:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5256,"name":"_player2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5223,"src":"3600:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3620:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5258,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3612:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5257,"name":"address","nodeType":"ElementaryTypeName","src":"3612:7:7","typeDescriptions":{}}},"id":5260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3612:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3600:22:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3574:48:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696420706c6179657220616464726573732e","id":5263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3636:25:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_6ed80a384a99508c50f304d0fc1fa01e87e8a7c1e23fd87bb26b3eec42b37996","typeString":"literal_string \"Invalid player address.\""},"value":"Invalid player address."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6ed80a384a99508c50f304d0fc1fa01e87e8a7c1e23fd87bb26b3eec42b37996","typeString":"literal_string \"Invalid player address.\""}],"id":5249,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"3553:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3553:118:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5265,"nodeType":"ExpressionStatement","src":"3553:118:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5267,"name":"_stakeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5225,"src":"3689:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3704:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3689:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5f7374616b65416d6f756e74206d7573742062652067726561746572207468616e20302e","id":5270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3707:38:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_b8014dcd6b9b8825f36ce51acf04a3476cb0a60d3bf9b8d1fab82e12f1cf4345","typeString":"literal_string \"_stakeAmount must be greater than 0.\""},"value":"_stakeAmount must be greater than 0."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b8014dcd6b9b8825f36ce51acf04a3476cb0a60d3bf9b8d1fab82e12f1cf4345","typeString":"literal_string \"_stakeAmount must be greater than 0.\""}],"id":5266,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"3681:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5271,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3681:65:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5272,"nodeType":"ExpressionStatement","src":"3681:65:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5274,"name":"userBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4954,"src":"3777:12:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5276,"indexExpression":{"id":5275,"name":"_player1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5221,"src":"3790:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3777:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":5277,"name":"_stakeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5225,"src":"3803:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3777:38:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"506c61796572312068617320696e73756666696369656e742066756e64732e","id":5279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3829:33:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_2da5768ab6f4a6792842d32845b8d6e6c010a05c2db3bc139b5272f28565fb71","typeString":"literal_string \"Player1 has insufficient funds.\""},"value":"Player1 has insufficient funds."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2da5768ab6f4a6792842d32845b8d6e6c010a05c2db3bc139b5272f28565fb71","typeString":"literal_string \"Player1 has insufficient funds.\""}],"id":5273,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"3756:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5280,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3756:116:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5281,"nodeType":"ExpressionStatement","src":"3756:116:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5283,"name":"userBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4954,"src":"3903:12:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5285,"indexExpression":{"id":5284,"name":"_player2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5223,"src":"3916:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3903:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":5286,"name":"_stakeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5225,"src":"3929:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3903:38:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"506c61796572322068617320696e73756666696369656e742066756e64732e","id":5288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3955:33:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_547c3876eae61b1efa83e1f9d0d2c672e99c0104b959b6bba9216deb297083a1","typeString":"literal_string \"Player2 has insufficient funds.\""},"value":"Player2 has insufficient funds."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_547c3876eae61b1efa83e1f9d0d2c672e99c0104b959b6bba9216deb297083a1","typeString":"literal_string \"Player2 has insufficient funds.\""}],"id":5282,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"3882:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3882:116:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5290,"nodeType":"ExpressionStatement","src":"3882:116:7"},{"assignments":[5292],"declarations":[{"constant":false,"id":5292,"mutability":"mutable","name":"feeFromEachPlayer","nameLocation":"4056:17:7","nodeType":"VariableDeclaration","scope":5363,"src":"4048:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5291,"name":"uint256","nodeType":"ElementaryTypeName","src":"4048:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5298,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5294,"name":"_stakeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5225,"src":"4089:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5293,"name":"calculateFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5707,"src":"4076:12:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":5295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4076:26:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":5296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4105:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4076:30:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4048:58:7"},{"assignments":[5300],"declarations":[{"constant":false,"id":5300,"mutability":"mutable","name":"stakeAfterFeeDeduction","nameLocation":"4124:22:7","nodeType":"VariableDeclaration","scope":5363,"src":"4116:30:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5299,"name":"uint256","nodeType":"ElementaryTypeName","src":"4116:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5304,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5301,"name":"_stakeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5225,"src":"4149:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":5302,"name":"feeFromEachPlayer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5292,"src":"4164:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4149:32:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4116:65:7"},{"expression":{"id":5309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5305,"name":"userBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4954,"src":"4214:12:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5307,"indexExpression":{"id":5306,"name":"_player1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5221,"src":"4227:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4214:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":5308,"name":"stakeAfterFeeDeduction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5300,"src":"4240:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4214:48:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5310,"nodeType":"ExpressionStatement","src":"4214:48:7"},{"expression":{"id":5315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5311,"name":"userBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4954,"src":"4272:12:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5313,"indexExpression":{"id":5312,"name":"_player2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5223,"src":"4285:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4272:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":5314,"name":"stakeAfterFeeDeduction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5300,"src":"4298:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4272:48:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5316,"nodeType":"ExpressionStatement","src":"4272:48:7"},{"expression":{"id":5321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5317,"name":"lockedStakes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4958,"src":"4330:12:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5319,"indexExpression":{"id":5318,"name":"_player1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5221,"src":"4343:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4330:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":5320,"name":"stakeAfterFeeDeduction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5300,"src":"4356:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4330:48:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5322,"nodeType":"ExpressionStatement","src":"4330:48:7"},{"expression":{"id":5327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5323,"name":"lockedStakes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4958,"src":"4388:12:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5325,"indexExpression":{"id":5324,"name":"_player2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5223,"src":"4401:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4388:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":5326,"name":"stakeAfterFeeDeduction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5300,"src":"4414:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4388:48:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5328,"nodeType":"ExpressionStatement","src":"4388:48:7"},{"expression":{"id":5333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5329,"name":"feesCollected","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4976,"src":"4446:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5330,"name":"feeFromEachPlayer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5292,"src":"4463:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":5331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4483:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4463:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4446:38:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5334,"nodeType":"ExpressionStatement","src":"4446:38:7"},{"expression":{"id":5344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5335,"name":"games","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4963,"src":"4495:5:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Game_$5052_storage_$","typeString":"mapping(bytes32 => struct ORTBet.Game storage ref)"}},"id":5337,"indexExpression":{"id":5336,"name":"gameIdHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5231,"src":"4501:10:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4495:17:7","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_storage","typeString":"struct ORTBet.Game storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5339,"name":"_player1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5221,"src":"4543:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5340,"name":"_player2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5223,"src":"4574:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5341,"name":"stakeAfterFeeDeduction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5300,"src":"4609:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":5342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4654:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5338,"name":"Game","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5052,"src":"4515:4:7","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Game_$5052_storage_ptr_$","typeString":"type(struct ORTBet.Game storage pointer)"}},"id":5343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["4534:7:7","4565:7:7","4596:11:7","4645:7:7"],"names":["player1","player2","stakeAmount","ongoing"],"nodeType":"FunctionCall","src":"4515:154:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_memory_ptr","typeString":"struct ORTBet.Game memory"}},"src":"4495:174:7","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_storage","typeString":"struct ORTBet.Game storage ref"}},"id":5345,"nodeType":"ExpressionStatement","src":"4495:174:7"},{"eventCall":{"arguments":[{"id":5347,"name":"_player1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5221,"src":"4698:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5348,"name":"stakeAfterFeeDeduction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5300,"src":"4708:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5346,"name":"StakesLocked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4998,"src":"4685:12:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":5349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4685:46:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5350,"nodeType":"EmitStatement","src":"4680:51:7"},{"eventCall":{"arguments":[{"id":5352,"name":"_player2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5223,"src":"4759:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5353,"name":"stakeAfterFeeDeduction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5300,"src":"4769:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5351,"name":"StakesLocked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4998,"src":"4746:12:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":5354,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4746:46:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5355,"nodeType":"EmitStatement","src":"4741:51:7"},{"eventCall":{"arguments":[{"id":5357,"name":"gameIdHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5231,"src":"4819:10:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5358,"name":"_player1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5221,"src":"4831:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5359,"name":"_player2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5223,"src":"4841:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5360,"name":"_stakeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5225,"src":"4851:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5356,"name":"GameStarted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5014,"src":"4807:11:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,address,uint256)"}},"id":5361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4807:57:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5362,"nodeType":"EmitStatement","src":"4802:62:7"}]},"functionSelector":"2f78808c","id":5364,"implemented":true,"kind":"function","modifiers":[{"id":5228,"kind":"modifierInvocation","modifierName":{"id":5227,"name":"onlyOwner","nameLocations":["3306:9:7"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"3306:9:7"},"nodeType":"ModifierInvocation","src":"3306:9:7"}],"name":"startGame","nameLocation":"3166:9:7","nodeType":"FunctionDefinition","parameters":{"id":5226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5219,"mutability":"mutable","name":"_gameId","nameLocation":"3201:7:7","nodeType":"VariableDeclaration","scope":5364,"src":"3185:23:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":5218,"name":"string","nodeType":"ElementaryTypeName","src":"3185:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5221,"mutability":"mutable","name":"_player1","nameLocation":"3226:8:7","nodeType":"VariableDeclaration","scope":5364,"src":"3218:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5220,"name":"address","nodeType":"ElementaryTypeName","src":"3218:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5223,"mutability":"mutable","name":"_player2","nameLocation":"3252:8:7","nodeType":"VariableDeclaration","scope":5364,"src":"3244:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5222,"name":"address","nodeType":"ElementaryTypeName","src":"3244:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5225,"mutability":"mutable","name":"_stakeAmount","nameLocation":"3278:12:7","nodeType":"VariableDeclaration","scope":5364,"src":"3270:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5224,"name":"uint256","nodeType":"ElementaryTypeName","src":"3270:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3175:121:7"},"returnParameters":{"id":5229,"nodeType":"ParameterList","parameters":[],"src":"3316:0:7"},"scope":5813,"src":"3157:1714:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5502,"nodeType":"Block","src":"4976:1207:7","statements":[{"expression":{"arguments":[{"expression":{"baseExpression":{"id":5375,"name":"games","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4963,"src":"5007:5:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Game_$5052_storage_$","typeString":"mapping(bytes32 => struct ORTBet.Game storage ref)"}},"id":5377,"indexExpression":{"id":5376,"name":"_gameId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5366,"src":"5013:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5007:14:7","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_storage","typeString":"struct ORTBet.Game storage ref"}},"id":5378,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5022:7:7","memberName":"ongoing","nodeType":"MemberAccess","referencedDeclaration":5051,"src":"5007:22:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"47616d6520656974686572206e6f742063726561746564206f7220697320616c72656164792066696e69736865642e","id":5379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5043:49:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_fadc0c8263f5d683f72a361984185a741a0b39b31acffee50958c78362b4d60e","typeString":"literal_string \"Game either not created or is already finished.\""},"value":"Game either not created or is already finished."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fadc0c8263f5d683f72a361984185a741a0b39b31acffee50958c78362b4d60e","typeString":"literal_string \"Game either not created or is already finished.\""}],"id":5374,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"4986:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4986:116:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5381,"nodeType":"ExpressionStatement","src":"4986:116:7"},{"assignments":[5384],"declarations":[{"constant":false,"id":5384,"mutability":"mutable","name":"game","nameLocation":"5125:4:7","nodeType":"VariableDeclaration","scope":5502,"src":"5112:17:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_storage_ptr","typeString":"struct ORTBet.Game"},"typeName":{"id":5383,"nodeType":"UserDefinedTypeName","pathNode":{"id":5382,"name":"Game","nameLocations":["5112:4:7"],"nodeType":"IdentifierPath","referencedDeclaration":5052,"src":"5112:4:7"},"referencedDeclaration":5052,"src":"5112:4:7","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_storage_ptr","typeString":"struct ORTBet.Game"}},"visibility":"internal"}],"id":5388,"initialValue":{"baseExpression":{"id":5385,"name":"games","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4963,"src":"5132:5:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Game_$5052_storage_$","typeString":"mapping(bytes32 => struct ORTBet.Game storage ref)"}},"id":5387,"indexExpression":{"id":5386,"name":"_gameId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5366,"src":"5138:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5132:14:7","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_storage","typeString":"struct ORTBet.Game storage ref"}},"nodeType":"VariableDeclarationStatement","src":"5112:34:7"},{"expression":{"id":5395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5389,"name":"lockedStakes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4958,"src":"5157:12:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5392,"indexExpression":{"expression":{"id":5390,"name":"game","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5384,"src":"5170:4:7","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_storage_ptr","typeString":"struct ORTBet.Game storage pointer"}},"id":5391,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5175:7:7","memberName":"player1","nodeType":"MemberAccess","referencedDeclaration":5045,"src":"5170:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5157:26:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"expression":{"id":5393,"name":"game","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5384,"src":"5187:4:7","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_storage_ptr","typeString":"struct ORTBet.Game storage pointer"}},"id":5394,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5192:11:7","memberName":"stakeAmount","nodeType":"MemberAccess","referencedDeclaration":5049,"src":"5187:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:46:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5396,"nodeType":"ExpressionStatement","src":"5157:46:7"},{"expression":{"id":5403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5397,"name":"lockedStakes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4958,"src":"5213:12:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5400,"indexExpression":{"expression":{"id":5398,"name":"game","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5384,"src":"5226:4:7","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_storage_ptr","typeString":"struct ORTBet.Game storage pointer"}},"id":5399,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5231:7:7","memberName":"player2","nodeType":"MemberAccess","referencedDeclaration":5047,"src":"5226:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5213:26:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"expression":{"id":5401,"name":"game","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5384,"src":"5243:4:7","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_storage_ptr","typeString":"struct ORTBet.Game storage pointer"}},"id":5402,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5248:11:7","memberName":"stakeAmount","nodeType":"MemberAccess","referencedDeclaration":5049,"src":"5243:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5213:46:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5404,"nodeType":"ExpressionStatement","src":"5213:46:7"},{"condition":{"commonType":{"typeIdentifier":"t_enum$_GameResult_$5043","typeString":"enum ORTBet.GameResult"},"id":5408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5405,"name":"_result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5369,"src":"5274:7:7","typeDescriptions":{"typeIdentifier":"t_enum$_GameResult_$5043","typeString":"enum ORTBet.GameResult"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5406,"name":"GameResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5043,"src":"5285:10:7","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_GameResult_$5043_$","typeString":"type(enum ORTBet.GameResult)"}},"id":5407,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5296:10:7","memberName":"Player1Won","nodeType":"MemberAccess","referencedDeclaration":5041,"src":"5285:21:7","typeDescriptions":{"typeIdentifier":"t_enum$_GameResult_$5043","typeString":"enum ORTBet.GameResult"}},"src":"5274:32:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_GameResult_$5043","typeString":"enum ORTBet.GameResult"},"id":5432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5429,"name":"_result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5369,"src":"5505:7:7","typeDescriptions":{"typeIdentifier":"t_enum$_GameResult_$5043","typeString":"enum ORTBet.GameResult"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5430,"name":"GameResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5043,"src":"5516:10:7","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_GameResult_$5043_$","typeString":"type(enum ORTBet.GameResult)"}},"id":5431,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5527:10:7","memberName":"Player2Won","nodeType":"MemberAccess","referencedDeclaration":5042,"src":"5516:21:7","typeDescriptions":{"typeIdentifier":"t_enum$_GameResult_$5043","typeString":"enum ORTBet.GameResult"}},"src":"5505:32:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_GameResult_$5043","typeString":"enum ORTBet.GameResult"},"id":5456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5453,"name":"_result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5369,"src":"5736:7:7","typeDescriptions":{"typeIdentifier":"t_enum$_GameResult_$5043","typeString":"enum ORTBet.GameResult"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5454,"name":"GameResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5043,"src":"5747:10:7","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_GameResult_$5043_$","typeString":"type(enum ORTBet.GameResult)"}},"id":5455,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5758:4:7","memberName":"Draw","nodeType":"MemberAccess","referencedDeclaration":5040,"src":"5747:15:7","typeDescriptions":{"typeIdentifier":"t_enum$_GameResult_$5043","typeString":"enum ORTBet.GameResult"}},"src":"5736:26:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5488,"nodeType":"IfStatement","src":"5732:328:7","trueBody":{"id":5487,"nodeType":"Block","src":"5764:296:7","statements":[{"expression":{"id":5463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5457,"name":"userBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4954,"src":"5813:12:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5460,"indexExpression":{"expression":{"id":5458,"name":"game","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5384,"src":"5826:4:7","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_storage_ptr","typeString":"struct ORTBet.Game storage pointer"}},"id":5459,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5831:7:7","memberName":"player1","nodeType":"MemberAccess","referencedDeclaration":5045,"src":"5826:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5813:26:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":5461,"name":"game","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5384,"src":"5843:4:7","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_storage_ptr","typeString":"struct ORTBet.Game storage pointer"}},"id":5462,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5848:11:7","memberName":"stakeAmount","nodeType":"MemberAccess","referencedDeclaration":5049,"src":"5843:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5813:46:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5464,"nodeType":"ExpressionStatement","src":"5813:46:7"},{"expression":{"id":5471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5465,"name":"userBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4954,"src":"5873:12:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5468,"indexExpression":{"expression":{"id":5466,"name":"game","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5384,"src":"5886:4:7","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_storage_ptr","typeString":"struct ORTBet.Game storage pointer"}},"id":5467,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5891:7:7","memberName":"player2","nodeType":"MemberAccess","referencedDeclaration":5047,"src":"5886:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5873:26:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":5469,"name":"game","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5384,"src":"5903:4:7","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_storage_ptr","typeString":"struct ORTBet.Game storage pointer"}},"id":5470,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5908:11:7","memberName":"stakeAmount","nodeType":"MemberAccess","referencedDeclaration":5049,"src":"5903:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5873:46:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5472,"nodeType":"ExpressionStatement","src":"5873:46:7"},{"eventCall":{"arguments":[{"expression":{"id":5474,"name":"game","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5384,"src":"5953:4:7","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_storage_ptr","typeString":"struct ORTBet.Game storage pointer"}},"id":5475,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5958:7:7","memberName":"player1","nodeType":"MemberAccess","referencedDeclaration":5045,"src":"5953:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5476,"name":"game","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5384,"src":"5967:4:7","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_storage_ptr","typeString":"struct ORTBet.Game storage pointer"}},"id":5477,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5972:11:7","memberName":"stakeAmount","nodeType":"MemberAccess","referencedDeclaration":5049,"src":"5967:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5473,"name":"StakesUnlocked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5004,"src":"5938:14:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":5478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5938:46:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5479,"nodeType":"EmitStatement","src":"5933:51:7"},{"eventCall":{"arguments":[{"expression":{"id":5481,"name":"game","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5384,"src":"6018:4:7","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_storage_ptr","typeString":"struct ORTBet.Game storage pointer"}},"id":5482,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6023:7:7","memberName":"player2","nodeType":"MemberAccess","referencedDeclaration":5047,"src":"6018:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5483,"name":"game","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5384,"src":"6032:4:7","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_storage_ptr","typeString":"struct ORTBet.Game storage pointer"}},"id":5484,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6037:11:7","memberName":"stakeAmount","nodeType":"MemberAccess","referencedDeclaration":5049,"src":"6032:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5480,"name":"StakesUnlocked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5004,"src":"6003:14:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":5485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6003:46:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5486,"nodeType":"EmitStatement","src":"5998:51:7"}]}},"id":5489,"nodeType":"IfStatement","src":"5501:559:7","trueBody":{"id":5452,"nodeType":"Block","src":"5539:187:7","statements":[{"expression":{"id":5441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5433,"name":"userBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4954,"src":"5596:12:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5436,"indexExpression":{"expression":{"id":5434,"name":"game","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5384,"src":"5609:4:7","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_storage_ptr","typeString":"struct ORTBet.Game storage pointer"}},"id":5435,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5614:7:7","memberName":"player2","nodeType":"MemberAccess","referencedDeclaration":5047,"src":"5609:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5596:26:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5437,"name":"game","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5384,"src":"5626:4:7","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_storage_ptr","typeString":"struct ORTBet.Game storage pointer"}},"id":5438,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5631:11:7","memberName":"stakeAmount","nodeType":"MemberAccess","referencedDeclaration":5049,"src":"5626:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":5439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5645:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"5626:20:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5596:50:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5442,"nodeType":"ExpressionStatement","src":"5596:50:7"},{"eventCall":{"arguments":[{"expression":{"id":5444,"name":"game","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5384,"src":"5680:4:7","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_storage_ptr","typeString":"struct ORTBet.Game storage pointer"}},"id":5445,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5685:7:7","memberName":"player2","nodeType":"MemberAccess","referencedDeclaration":5047,"src":"5680:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5446,"name":"game","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5384,"src":"5694:4:7","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_storage_ptr","typeString":"struct ORTBet.Game storage pointer"}},"id":5447,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5699:11:7","memberName":"stakeAmount","nodeType":"MemberAccess","referencedDeclaration":5049,"src":"5694:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":5448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5713:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"5694:20:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5443,"name":"StakesUnlocked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5004,"src":"5665:14:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":5450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5665:50:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5451,"nodeType":"EmitStatement","src":"5660:55:7"}]}},"id":5490,"nodeType":"IfStatement","src":"5270:790:7","trueBody":{"id":5428,"nodeType":"Block","src":"5308:187:7","statements":[{"expression":{"id":5417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5409,"name":"userBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4954,"src":"5365:12:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5412,"indexExpression":{"expression":{"id":5410,"name":"game","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5384,"src":"5378:4:7","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_storage_ptr","typeString":"struct ORTBet.Game storage pointer"}},"id":5411,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5383:7:7","memberName":"player1","nodeType":"MemberAccess","referencedDeclaration":5045,"src":"5378:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5365:26:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5413,"name":"game","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5384,"src":"5395:4:7","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_storage_ptr","typeString":"struct ORTBet.Game storage pointer"}},"id":5414,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5400:11:7","memberName":"stakeAmount","nodeType":"MemberAccess","referencedDeclaration":5049,"src":"5395:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":5415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5414:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"5395:20:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5365:50:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5418,"nodeType":"ExpressionStatement","src":"5365:50:7"},{"eventCall":{"arguments":[{"expression":{"id":5420,"name":"game","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5384,"src":"5449:4:7","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_storage_ptr","typeString":"struct ORTBet.Game storage pointer"}},"id":5421,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5454:7:7","memberName":"player1","nodeType":"MemberAccess","referencedDeclaration":5045,"src":"5449:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5422,"name":"game","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5384,"src":"5463:4:7","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_storage_ptr","typeString":"struct ORTBet.Game storage pointer"}},"id":5423,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5468:11:7","memberName":"stakeAmount","nodeType":"MemberAccess","referencedDeclaration":5049,"src":"5463:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":5424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5482:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"5463:20:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5419,"name":"StakesUnlocked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5004,"src":"5434:14:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":5426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5434:50:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5427,"nodeType":"EmitStatement","src":"5429:55:7"}]}},{"expression":{"id":5495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5491,"name":"game","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5384,"src":"6070:4:7","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_storage_ptr","typeString":"struct ORTBet.Game storage pointer"}},"id":5493,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6075:7:7","memberName":"ongoing","nodeType":"MemberAccess","referencedDeclaration":5051,"src":"6070:12:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":5494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6085:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"6070:20:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5496,"nodeType":"ExpressionStatement","src":"6070:20:7"},{"eventCall":{"arguments":[{"id":5498,"name":"_gameId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5366,"src":"6159:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5499,"name":"_result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5369,"src":"6168:7:7","typeDescriptions":{"typeIdentifier":"t_enum$_GameResult_$5043","typeString":"enum ORTBet.GameResult"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_enum$_GameResult_$5043","typeString":"enum ORTBet.GameResult"}],"id":5497,"name":"GameResolved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5021,"src":"6146:12:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_enum$_GameResult_$5043_$returns$__$","typeString":"function (bytes32,enum ORTBet.GameResult)"}},"id":5500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6146:30:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5501,"nodeType":"EmitStatement","src":"6141:35:7"}]},"functionSelector":"e703dd54","id":5503,"implemented":true,"kind":"function","modifiers":[{"id":5372,"kind":"modifierInvocation","modifierName":{"id":5371,"name":"onlyOwner","nameLocations":["4966:9:7"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"4966:9:7"},"nodeType":"ModifierInvocation","src":"4966:9:7"}],"name":"resolveGame","nameLocation":"4886:11:7","nodeType":"FunctionDefinition","parameters":{"id":5370,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5366,"mutability":"mutable","name":"_gameId","nameLocation":"4915:7:7","nodeType":"VariableDeclaration","scope":5503,"src":"4907:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5365,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4907:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5369,"mutability":"mutable","name":"_result","nameLocation":"4943:7:7","nodeType":"VariableDeclaration","scope":5503,"src":"4932:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_GameResult_$5043","typeString":"enum ORTBet.GameResult"},"typeName":{"id":5368,"nodeType":"UserDefinedTypeName","pathNode":{"id":5367,"name":"GameResult","nameLocations":["4932:10:7"],"nodeType":"IdentifierPath","referencedDeclaration":5043,"src":"4932:10:7"},"referencedDeclaration":5043,"src":"4932:10:7","typeDescriptions":{"typeIdentifier":"t_enum$_GameResult_$5043","typeString":"enum ORTBet.GameResult"}},"visibility":"internal"}],"src":"4897:59:7"},"returnParameters":{"id":5373,"nodeType":"ParameterList","parameters":[],"src":"4976:0:7"},"scope":5813,"src":"4877:1306:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5574,"nodeType":"Block","src":"6248:836:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":5509,"name":"backupAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4968,"src":"6279:15:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[] storage ref)"}},"id":5512,"indexExpression":{"expression":{"id":5510,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6295:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6299:6:7","memberName":"sender","nodeType":"MemberAccess","src":"6295:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6279:27:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":5513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6307:6:7","memberName":"length","nodeType":"MemberAccess","src":"6279:34:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5514,"name":"maxBackupAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4974,"src":"6316:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6279:55:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"arguments":[{"hexValue":"43616e6e6f7420616464206d6f7265207468616e20","id":5520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6410:23:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_3efd2dbfc081bf37c652dbe090d1d361e93212eb46913a51487fbe20b70e6e65","typeString":"literal_string \"Cannot add more than \""},"value":"Cannot add more than "},{"arguments":[{"id":5523,"name":"maxBackupAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4974,"src":"6472:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5521,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1429,"src":"6455:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$1429_$","typeString":"type(library Strings)"}},"id":5522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6463:8:7","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":307,"src":"6455:16:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":5524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6455:36:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"206261636b7570206164647265737365732e","id":5525,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6513:20:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_eba76674054ad90018b9921ec8f09d9917e7625b39e3256f7826b772df7db756","typeString":"literal_string \" backup addresses.\""},"value":" backup addresses."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_3efd2dbfc081bf37c652dbe090d1d361e93212eb46913a51487fbe20b70e6e65","typeString":"literal_string \"Cannot add more than \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_eba76674054ad90018b9921ec8f09d9917e7625b39e3256f7826b772df7db756","typeString":"literal_string \" backup addresses.\""}],"expression":{"id":5518,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6372:3:7","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5519,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6376:12:7","memberName":"encodePacked","nodeType":"MemberAccess","src":"6372:16:7","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6372:179:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5517,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6348:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":5516,"name":"string","nodeType":"ElementaryTypeName","src":"6348:6:7","typeDescriptions":{}}},"id":5527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6348:217:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5508,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"6258:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6258:317:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5529,"nodeType":"ExpressionStatement","src":"6258:317:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5531,"name":"_backupAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5505,"src":"6606:14:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6632:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5533,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6624:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5532,"name":"address","nodeType":"ElementaryTypeName","src":"6624:7:7","typeDescriptions":{}}},"id":5535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6624:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6606:28:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4261636b757020616464726573732063616e6e6f74206265207a65726f20616464726573732e","id":5537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6648:40:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_2085cb31c0c1e8224075d75f458578f54365aa05647251b48bb68bb0bf07fb3c","typeString":"literal_string \"Backup address cannot be zero address.\""},"value":"Backup address cannot be zero address."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2085cb31c0c1e8224075d75f458578f54365aa05647251b48bb68bb0bf07fb3c","typeString":"literal_string \"Backup address cannot be zero address.\""}],"id":5530,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"6585:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6585:113:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5539,"nodeType":"ExpressionStatement","src":"6585:113:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5541,"name":"_backupAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5505,"src":"6729:14:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":5542,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6747:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6751:6:7","memberName":"sender","nodeType":"MemberAccess","src":"6747:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6729:28:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616e6e6f74207365742073656c66206173206261636b757020616464726573732e","id":5545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6771:36:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_24004c7e147cbd7bbd3a293bdde95728aaaa014cfa5a2cce5b68611170522f61","typeString":"literal_string \"Cannot set self as backup address.\""},"value":"Cannot set self as backup address."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_24004c7e147cbd7bbd3a293bdde95728aaaa014cfa5a2cce5b68611170522f61","typeString":"literal_string \"Cannot set self as backup address.\""}],"id":5540,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"6708:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6708:109:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5547,"nodeType":"ExpressionStatement","src":"6708:109:7"},{"expression":{"arguments":[{"id":5556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6848:54:7","subExpression":{"arguments":[{"baseExpression":{"id":5550,"name":"backupAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4968,"src":"6858:15:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[] storage ref)"}},"id":5553,"indexExpression":{"expression":{"id":5551,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6874:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6878:6:7","memberName":"sender","nodeType":"MemberAccess","src":"6874:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6858:27:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},{"id":5554,"name":"_backupAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5505,"src":"6887:14:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5549,"name":"contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5795,"src":"6849:8:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$_t_bool_$","typeString":"function (address[] storage pointer,address) view returns (bool)"}},"id":5555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6849:53:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4261636b7570206164647265737320616c72656164792061646465642e","id":5557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6916:31:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_6ecbafa02a72b5d1804f10440d0ac97efc6479f5ef05e0935766c1bfaff28139","typeString":"literal_string \"Backup address already added.\""},"value":"Backup address already added."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6ecbafa02a72b5d1804f10440d0ac97efc6479f5ef05e0935766c1bfaff28139","typeString":"literal_string \"Backup address already added.\""}],"id":5548,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"6827:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6827:130:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5559,"nodeType":"ExpressionStatement","src":"6827:130:7"},{"expression":{"arguments":[{"id":5565,"name":"_backupAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5505,"src":"7001:14:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":5560,"name":"backupAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4968,"src":"6968:15:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[] storage ref)"}},"id":5563,"indexExpression":{"expression":{"id":5561,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6984:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6988:6:7","memberName":"sender","nodeType":"MemberAccess","src":"6984:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6968:27:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":5564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6996:4:7","memberName":"push","nodeType":"MemberAccess","src":"6968:32:7","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$","typeString":"function (address[] storage pointer,address)"}},"id":5566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6968:48:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5567,"nodeType":"ExpressionStatement","src":"6968:48:7"},{"eventCall":{"arguments":[{"id":5569,"name":"_backupAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5505,"src":"7050:14:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5570,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7066:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7070:6:7","memberName":"sender","nodeType":"MemberAccess","src":"7066:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5568,"name":"BackupAddressAdded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5027,"src":"7031:18:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":5572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7031:46:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5573,"nodeType":"EmitStatement","src":"7026:51:7"}]},"functionSelector":"08db7f85","id":5575,"implemented":true,"kind":"function","modifiers":[],"name":"addBackupAddress","nameLocation":"6198:16:7","nodeType":"FunctionDefinition","parameters":{"id":5506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5505,"mutability":"mutable","name":"_backupAddress","nameLocation":"6223:14:7","nodeType":"VariableDeclaration","scope":5575,"src":"6215:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5504,"name":"address","nodeType":"ElementaryTypeName","src":"6215:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6214:24:7"},"returnParameters":{"id":5507,"nodeType":"ParameterList","parameters":[],"src":"6248:0:7"},"scope":5813,"src":"6189:895:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5644,"nodeType":"Block","src":"7152:538:7","statements":[{"expression":{"arguments":[{"arguments":[{"baseExpression":{"id":5582,"name":"backupAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4968,"src":"7192:15:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[] storage ref)"}},"id":5585,"indexExpression":{"expression":{"id":5583,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7208:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7212:6:7","memberName":"sender","nodeType":"MemberAccess","src":"7208:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7192:27:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},{"id":5586,"name":"_backupAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5577,"src":"7221:14:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5581,"name":"contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5795,"src":"7183:8:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$_t_bool_$","typeString":"function (address[] storage pointer,address) view returns (bool)"}},"id":5587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7183:53:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f7420617574686f72697a656420746f2072656d6f76652074686973207265636f7665727920616464726573732e","id":5588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7250:49:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_cdf63a127d275dc7fb43022f13aa5adb46231f2519f921c4c26be0d00a369386","typeString":"literal_string \"Not authorized to remove this recovery address.\""},"value":"Not authorized to remove this recovery address."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cdf63a127d275dc7fb43022f13aa5adb46231f2519f921c4c26be0d00a369386","typeString":"literal_string \"Not authorized to remove this recovery address.\""}],"id":5580,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"7162:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7162:147:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5590,"nodeType":"ExpressionStatement","src":"7162:147:7"},{"assignments":[5595],"declarations":[{"constant":false,"id":5595,"mutability":"mutable","name":"backups","nameLocation":"7338:7:7","nodeType":"VariableDeclaration","scope":5644,"src":"7320:25:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":5593,"name":"address","nodeType":"ElementaryTypeName","src":"7320:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5594,"nodeType":"ArrayTypeName","src":"7320:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":5600,"initialValue":{"baseExpression":{"id":5596,"name":"backupAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4968,"src":"7348:15:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[] storage ref)"}},"id":5599,"indexExpression":{"expression":{"id":5597,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7364:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7368:6:7","memberName":"sender","nodeType":"MemberAccess","src":"7364:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7348:27:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"nodeType":"VariableDeclarationStatement","src":"7320:55:7"},{"body":{"id":5642,"nodeType":"Block","src":"7427:257:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5612,"name":"backups","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5595,"src":"7445:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[] storage pointer"}},"id":5614,"indexExpression":{"id":5613,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5602,"src":"7453:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7445:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5615,"name":"_backupAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5577,"src":"7459:14:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7445:28:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5641,"nodeType":"IfStatement","src":"7441:233:7","trueBody":{"id":5640,"nodeType":"Block","src":"7475:199:7","statements":[{"expression":{"id":5626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5617,"name":"backups","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5595,"src":"7493:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[] storage pointer"}},"id":5619,"indexExpression":{"id":5618,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5602,"src":"7501:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7493:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":5620,"name":"backups","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5595,"src":"7506:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[] storage pointer"}},"id":5625,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5621,"name":"backups","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5595,"src":"7514:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[] storage pointer"}},"id":5622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7522:6:7","memberName":"length","nodeType":"MemberAccess","src":"7514:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":5623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7531:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7514:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7506:27:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7493:40:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5627,"nodeType":"ExpressionStatement","src":"7493:40:7"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5628,"name":"backups","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5595,"src":"7551:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[] storage pointer"}},"id":5630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7559:3:7","memberName":"pop","nodeType":"MemberAccess","src":"7551:11:7","typeDescriptions":{"typeIdentifier":"t_function_arraypop_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$","typeString":"function (address[] storage pointer)"}},"id":5631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7551:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5632,"nodeType":"ExpressionStatement","src":"7551:13:7"},{"eventCall":{"arguments":[{"id":5634,"name":"_backupAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5577,"src":"7608:14:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5635,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7624:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7628:6:7","memberName":"sender","nodeType":"MemberAccess","src":"7624:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5633,"name":"BackupAddressRemoved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5033,"src":"7587:20:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":5637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7587:48:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5638,"nodeType":"EmitStatement","src":"7582:53:7"},{"functionReturnParameters":5579,"id":5639,"nodeType":"Return","src":"7653:7:7"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5605,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5602,"src":"7402:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5606,"name":"backups","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5595,"src":"7406:7:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[] storage pointer"}},"id":5607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7414:6:7","memberName":"length","nodeType":"MemberAccess","src":"7406:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7402:18:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5643,"initializationExpression":{"assignments":[5602],"declarations":[{"constant":false,"id":5602,"mutability":"mutable","name":"i","nameLocation":"7395:1:7","nodeType":"VariableDeclaration","scope":5643,"src":"7390:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5601,"name":"uint","nodeType":"ElementaryTypeName","src":"7390:4:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5604,"initialValue":{"hexValue":"30","id":5603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7399:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7390:10:7"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":5610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"7422:3:7","subExpression":{"id":5609,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5602,"src":"7422:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5611,"nodeType":"ExpressionStatement","src":"7422:3:7"},"nodeType":"ForStatement","src":"7385:299:7"}]},"functionSelector":"cfce8913","id":5645,"implemented":true,"kind":"function","modifiers":[],"name":"removeBackupAddress","nameLocation":"7099:19:7","nodeType":"FunctionDefinition","parameters":{"id":5578,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5577,"mutability":"mutable","name":"_backupAddress","nameLocation":"7127:14:7","nodeType":"VariableDeclaration","scope":5645,"src":"7119:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5576,"name":"address","nodeType":"ElementaryTypeName","src":"7119:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7118:24:7"},"returnParameters":{"id":5579,"nodeType":"ParameterList","parameters":[],"src":"7152:0:7"},"scope":5813,"src":"7090:600:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5657,"nodeType":"Block","src":"7801:53:7","statements":[{"expression":{"baseExpression":{"id":5653,"name":"backupAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4968,"src":"7818:15:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[] storage ref)"}},"id":5655,"indexExpression":{"id":5654,"name":"_mainAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5647,"src":"7834:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7818:29:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"functionReturnParameters":5652,"id":5656,"nodeType":"Return","src":"7811:36:7"}]},"functionSelector":"4ac5c559","id":5658,"implemented":true,"kind":"function","modifiers":[],"name":"getBackupAddresses","nameLocation":"7705:18:7","nodeType":"FunctionDefinition","parameters":{"id":5648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5647,"mutability":"mutable","name":"_mainAddress","nameLocation":"7741:12:7","nodeType":"VariableDeclaration","scope":5658,"src":"7733:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5646,"name":"address","nodeType":"ElementaryTypeName","src":"7733:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7723:36:7"},"returnParameters":{"id":5652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5651,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5658,"src":"7783:16:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":5649,"name":"address","nodeType":"ElementaryTypeName","src":"7783:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5650,"nodeType":"ArrayTypeName","src":"7783:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"7782:18:7"},"scope":5813,"src":"7696:158:7","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5691,"nodeType":"Block","src":"7918:213:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5666,"name":"feesCollected","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4976,"src":"7936:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":5667,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5660,"src":"7953:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7936:24:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e74206665657320636f6c6c65637465642e","id":5669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7962:30:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_29940d1dcde580d400bfd918827344f04d3b90b6d8b8716df5b5822db0156f4c","typeString":"literal_string \"Insufficient fees collected.\""},"value":"Insufficient fees collected."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_29940d1dcde580d400bfd918827344f04d3b90b6d8b8716df5b5822db0156f4c","typeString":"literal_string \"Insufficient fees collected.\""}],"id":5665,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"7928:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7928:65:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5671,"nodeType":"ExpressionStatement","src":"7928:65:7"},{"expression":{"id":5674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5672,"name":"feesCollected","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4976,"src":"8004:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":5673,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5660,"src":"8021:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8004:24:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5675,"nodeType":"ExpressionStatement","src":"8004:24:7"},{"expression":{"arguments":[{"id":5682,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5660,"src":"8067:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":5678,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8046:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8050:6:7","memberName":"sender","nodeType":"MemberAccess","src":"8046:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5677,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8038:8:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":5676,"name":"address","nodeType":"ElementaryTypeName","src":"8038:8:7","stateMutability":"payable","typeDescriptions":{}}},"id":5680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8038:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":5681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8058:8:7","memberName":"transfer","nodeType":"MemberAccess","src":"8038:28:7","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8038:37:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5684,"nodeType":"ExpressionStatement","src":"8038:37:7"},{"eventCall":{"arguments":[{"expression":{"id":5686,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8104:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8108:6:7","memberName":"sender","nodeType":"MemberAccess","src":"8104:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5688,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5660,"src":"8116:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5685,"name":"FeesWithdrawn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5039,"src":"8090:13:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":5689,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8090:34:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5690,"nodeType":"EmitStatement","src":"8085:39:7"}]},"functionSelector":"5e318e07","id":5692,"implemented":true,"kind":"function","modifiers":[{"id":5663,"kind":"modifierInvocation","modifierName":{"id":5662,"name":"onlyOwner","nameLocations":["7908:9:7"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"7908:9:7"},"nodeType":"ModifierInvocation","src":"7908:9:7"}],"name":"withdrawFees","nameLocation":"7869:12:7","nodeType":"FunctionDefinition","parameters":{"id":5661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5660,"mutability":"mutable","name":"_amount","nameLocation":"7890:7:7","nodeType":"VariableDeclaration","scope":5692,"src":"7882:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5659,"name":"uint256","nodeType":"ElementaryTypeName","src":"7882:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7881:17:7"},"returnParameters":{"id":5664,"nodeType":"ParameterList","parameters":[],"src":"7918:0:7"},"scope":5813,"src":"7860:271:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5706,"nodeType":"Block","src":"8206:55:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5699,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5694,"src":"8224:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5700,"name":"feePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4971,"src":"8234:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8224:23:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5702,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8223:25:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"313030","id":5703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8251:3:7","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"8223:31:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5698,"id":5705,"nodeType":"Return","src":"8216:38:7"}]},"functionSelector":"99a5d747","id":5707,"implemented":true,"kind":"function","modifiers":[],"name":"calculateFee","nameLocation":"8146:12:7","nodeType":"FunctionDefinition","parameters":{"id":5695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5694,"mutability":"mutable","name":"_amount","nameLocation":"8167:7:7","nodeType":"VariableDeclaration","scope":5707,"src":"8159:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5693,"name":"uint256","nodeType":"ElementaryTypeName","src":"8159:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8158:17:7"},"returnParameters":{"id":5698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5697,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5707,"src":"8197:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5696,"name":"uint256","nodeType":"ElementaryTypeName","src":"8197:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8196:9:7"},"scope":5813,"src":"8137:124:7","stateMutability":"pure","virtual":false,"visibility":"public"},{"body":{"id":5714,"nodeType":"Block","src":"8294:55:7","statements":[{"expression":{"arguments":[{"hexValue":"446972656374206465706f73697473206e6f7420616c6c6f7765642e","id":5711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8311:30:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb8b20e2c42377c47b5226ffeb741e823d4c5c68ace99d08fb1ac301efb651e5","typeString":"literal_string \"Direct deposits not allowed.\""},"value":"Direct deposits not allowed."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_cb8b20e2c42377c47b5226ffeb741e823d4c5c68ace99d08fb1ac301efb651e5","typeString":"literal_string \"Direct deposits not allowed.\""}],"id":5710,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"8304:6:7","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":5712,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8304:38:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5713,"nodeType":"ExpressionStatement","src":"8304:38:7"}]},"id":5715,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5708,"nodeType":"ParameterList","parameters":[],"src":"8274:2:7"},"returnParameters":{"id":5709,"nodeType":"ParameterList","parameters":[],"src":"8294:0:7"},"scope":5813,"src":"8267:82:7","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":5722,"nodeType":"Block","src":"8383:51:7","statements":[{"expression":{"arguments":[{"hexValue":"46756e6374696f6e20646f6573206e6f742065786973742e","id":5719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8400:26:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_0fa78a13653e06ad99b0fd069a1f00be9aaee42e8019fef06fc5450b72e1b65e","typeString":"literal_string \"Function does not exist.\""},"value":"Function does not exist."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_0fa78a13653e06ad99b0fd069a1f00be9aaee42e8019fef06fc5450b72e1b65e","typeString":"literal_string \"Function does not exist.\""}],"id":5718,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"8393:6:7","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":5720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8393:34:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5721,"nodeType":"ExpressionStatement","src":"8393:34:7"}]},"id":5723,"implemented":true,"kind":"fallback","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5716,"nodeType":"ParameterList","parameters":[],"src":"8363:2:7"},"returnParameters":{"id":5717,"nodeType":"ParameterList","parameters":[],"src":"8383:0:7"},"scope":5813,"src":"8355:79:7","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":5734,"nodeType":"Block","src":"8514:50:7","statements":[{"expression":{"baseExpression":{"id":5730,"name":"userBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4954,"src":"8531:12:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5732,"indexExpression":{"id":5731,"name":"_userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5725,"src":"8544:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8531:26:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5729,"id":5733,"nodeType":"Return","src":"8524:33:7"}]},"functionSelector":"f8b2cb4f","id":5735,"implemented":true,"kind":"function","modifiers":[],"name":"getBalance","nameLocation":"8449:10:7","nodeType":"FunctionDefinition","parameters":{"id":5726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5725,"mutability":"mutable","name":"_userAddress","nameLocation":"8468:12:7","nodeType":"VariableDeclaration","scope":5735,"src":"8460:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5724,"name":"address","nodeType":"ElementaryTypeName","src":"8460:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8459:22:7"},"returnParameters":{"id":5729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5728,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5735,"src":"8505:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5727,"name":"uint256","nodeType":"ElementaryTypeName","src":"8505:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8504:9:7"},"scope":5813,"src":"8440:124:7","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5746,"nodeType":"Block","src":"8662:50:7","statements":[{"expression":{"baseExpression":{"id":5742,"name":"lockedStakes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4958,"src":"8679:12:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5744,"indexExpression":{"id":5743,"name":"_userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5737,"src":"8692:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8679:26:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5741,"id":5745,"nodeType":"Return","src":"8672:33:7"}]},"functionSelector":"9e2c63da","id":5747,"implemented":true,"kind":"function","modifiers":[],"name":"getLockedStake","nameLocation":"8579:14:7","nodeType":"FunctionDefinition","parameters":{"id":5738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5737,"mutability":"mutable","name":"_userAddress","nameLocation":"8611:12:7","nodeType":"VariableDeclaration","scope":5747,"src":"8603:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5736,"name":"address","nodeType":"ElementaryTypeName","src":"8603:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8593:36:7"},"returnParameters":{"id":5741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5740,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5747,"src":"8653:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5739,"name":"uint256","nodeType":"ElementaryTypeName","src":"8653:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8652:9:7"},"scope":5813,"src":"8570:142:7","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5759,"nodeType":"Block","src":"8788:38:7","statements":[{"expression":{"baseExpression":{"id":5755,"name":"games","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4963,"src":"8805:5:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Game_$5052_storage_$","typeString":"mapping(bytes32 => struct ORTBet.Game storage ref)"}},"id":5757,"indexExpression":{"id":5756,"name":"_gameId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"8811:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8805:14:7","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_storage","typeString":"struct ORTBet.Game storage ref"}},"functionReturnParameters":5754,"id":5758,"nodeType":"Return","src":"8798:21:7"}]},"functionSelector":"73931bbf","id":5760,"implemented":true,"kind":"function","modifiers":[],"name":"getGame","nameLocation":"8727:7:7","nodeType":"FunctionDefinition","parameters":{"id":5750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5749,"mutability":"mutable","name":"_gameId","nameLocation":"8743:7:7","nodeType":"VariableDeclaration","scope":5760,"src":"8735:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5748,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8735:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8734:17:7"},"returnParameters":{"id":5754,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5753,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5760,"src":"8775:11:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_memory_ptr","typeString":"struct ORTBet.Game"},"typeName":{"id":5752,"nodeType":"UserDefinedTypeName","pathNode":{"id":5751,"name":"Game","nameLocations":["8775:4:7"],"nodeType":"IdentifierPath","referencedDeclaration":5052,"src":"8775:4:7"},"referencedDeclaration":5052,"src":"8775:4:7","typeDescriptions":{"typeIdentifier":"t_struct$_Game_$5052_storage_ptr","typeString":"struct ORTBet.Game"}},"visibility":"internal"}],"src":"8774:13:7"},"scope":5813,"src":"8718:108:7","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5794,"nodeType":"Block","src":"8943:171:7","statements":[{"body":{"id":5790,"nodeType":"Block","src":"8993:93:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5781,"name":"_list","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5763,"src":"9011:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[] storage pointer"}},"id":5783,"indexExpression":{"id":5782,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5771,"src":"9017:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9011:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5784,"name":"_target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5765,"src":"9023:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9011:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5789,"nodeType":"IfStatement","src":"9007:69:7","trueBody":{"id":5788,"nodeType":"Block","src":"9032:44:7","statements":[{"expression":{"hexValue":"74727565","id":5786,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9057:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":5769,"id":5787,"nodeType":"Return","src":"9050:11:7"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5774,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5771,"src":"8970:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5775,"name":"_list","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5763,"src":"8974:5:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[] storage pointer"}},"id":5776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8980:6:7","memberName":"length","nodeType":"MemberAccess","src":"8974:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8970:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5791,"initializationExpression":{"assignments":[5771],"declarations":[{"constant":false,"id":5771,"mutability":"mutable","name":"i","nameLocation":"8963:1:7","nodeType":"VariableDeclaration","scope":5791,"src":"8958:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5770,"name":"uint","nodeType":"ElementaryTypeName","src":"8958:4:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5773,"initialValue":{"hexValue":"30","id":5772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8967:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8958:10:7"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":5779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8988:3:7","subExpression":{"id":5778,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5771,"src":"8988:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5780,"nodeType":"ExpressionStatement","src":"8988:3:7"},"nodeType":"ForStatement","src":"8953:133:7"},{"expression":{"hexValue":"66616c7365","id":5792,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9102:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":5769,"id":5793,"nodeType":"Return","src":"9095:12:7"}]},"id":5795,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"8841:8:7","nodeType":"FunctionDefinition","parameters":{"id":5766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5763,"mutability":"mutable","name":"_list","nameLocation":"8877:5:7","nodeType":"VariableDeclaration","scope":5795,"src":"8859:23:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":5761,"name":"address","nodeType":"ElementaryTypeName","src":"8859:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5762,"nodeType":"ArrayTypeName","src":"8859:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":5765,"mutability":"mutable","name":"_target","nameLocation":"8900:7:7","nodeType":"VariableDeclaration","scope":5795,"src":"8892:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5764,"name":"address","nodeType":"ElementaryTypeName","src":"8892:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8849:64:7"},"returnParameters":{"id":5769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5768,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5795,"src":"8937:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5767,"name":"bool","nodeType":"ElementaryTypeName","src":"8937:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8936:6:7"},"scope":5813,"src":"8832:282:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5811,"nodeType":"Block","src":"9169:169:7","statements":[{"expression":{"arguments":[{"arguments":[{"baseExpression":{"id":5801,"name":"backupAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4968,"src":"9209:15:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[] storage ref)"}},"id":5803,"indexExpression":{"id":5802,"name":"_mainAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5797,"src":"9225:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9209:29:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},{"expression":{"id":5804,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9240:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9244:6:7","memberName":"sender","nodeType":"MemberAccess","src":"9240:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5800,"name":"contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5795,"src":"9200:8:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$_t_bool_$","typeString":"function (address[] storage pointer,address) view returns (bool)"}},"id":5806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9200:51:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616c6c6572206973206e6f7420612072656769737465726564206261636b757020616464726573732e","id":5807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9265:44:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_87055f61685ba488261bfa7add3cec59d88745ad3c44d9b55ad8388c453ca9aa","typeString":"literal_string \"Caller is not a registered backup address.\""},"value":"Caller is not a registered backup address."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_87055f61685ba488261bfa7add3cec59d88745ad3c44d9b55ad8388c453ca9aa","typeString":"literal_string \"Caller is not a registered backup address.\""}],"id":5799,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"9179:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9179:140:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5809,"nodeType":"ExpressionStatement","src":"9179:140:7"},{"id":5810,"nodeType":"PlaceholderStatement","src":"9330:1:7"}]},"id":5812,"name":"onlyBackupAddress","nameLocation":"9129:17:7","nodeType":"ModifierDefinition","parameters":{"id":5798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5797,"mutability":"mutable","name":"_mainAddress","nameLocation":"9155:12:7","nodeType":"VariableDeclaration","scope":5812,"src":"9147:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5796,"name":"address","nodeType":"ElementaryTypeName","src":"9147:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9146:22:7"},"src":"9120:218:7","virtual":false,"visibility":"internal"}],"scope":5814,"src":"171:9169:7","usedErrors":[13,18],"usedEvents":[24,4984,4992,4998,5004,5014,5021,5027,5033,5039]}],"src":"39:9302:7"},"id":7}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","errors":{"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the address provided by the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":8,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Panic.sol":{"Panic":{"abi":[],"devdoc":{"details":"Helper library for emitting standardized panic codes. ```solidity contract Example {      using Panic for uint256;      // Use any of the declared internal constants      function foo() { Panic.GENERIC.panic(); }      // Alternatively      function foo() { Panic.panic(Panic.GENERIC); } } ``` Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil]. _Available since v5.1._","kind":"dev","methods":{},"stateVariables":{"ARRAY_OUT_OF_BOUNDS":{"details":"array out of bounds access"},"ASSERT":{"details":"used by the assert() builtin"},"DIVISION_BY_ZERO":{"details":"division or modulo by zero"},"EMPTY_ARRAY_POP":{"details":"empty array pop"},"ENUM_CONVERSION_ERROR":{"details":"enum conversion error"},"GENERIC":{"details":"generic / unspecified error"},"INVALID_INTERNAL_FUNCTION":{"details":"calling invalid internal function"},"RESOURCE_ERROR":{"details":"resource error (too large allocation or too large array)"},"STORAGE_ENCODING_ERROR":{"details":"invalid encoding in storage"},"UNDER_OVERFLOW":{"details":"arithmetic underflow or overflow"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122072366e5bf91f5918234cb22767972057fdb06de86bfc4df537d32d6c71a27cd064736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH19 0x366E5BF91F5918234CB22767972057FDB06DE8 PUSH12 0xFC4DF537D32D6C71A27CD064 PUSH20 0x6F6C634300081C00330000000000000000000000 ","sourceMap":"657:1315:2:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;657:1315:2;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122072366e5bf91f5918234cb22767972057fdb06de86bfc4df537d32d6c71a27cd064736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH19 0x366E5BF91F5918234CB22767972057FDB06DE8 PUSH12 0xFC4DF537D32D6C71A27CD064 PUSH20 0x6F6C634300081C00330000000000000000000000 ","sourceMap":"657:1315:2:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"panic(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Helper library for emitting standardized panic codes. ```solidity contract Example {      using Panic for uint256;      // Use any of the declared internal constants      function foo() { Panic.GENERIC.panic(); }      // Alternatively      function foo() { Panic.panic(Panic.GENERIC); } } ``` Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil]. _Available since v5.1._\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"ARRAY_OUT_OF_BOUNDS\":{\"details\":\"array out of bounds access\"},\"ASSERT\":{\"details\":\"used by the assert() builtin\"},\"DIVISION_BY_ZERO\":{\"details\":\"division or modulo by zero\"},\"EMPTY_ARRAY_POP\":{\"details\":\"empty array pop\"},\"ENUM_CONVERSION_ERROR\":{\"details\":\"enum conversion error\"},\"GENERIC\":{\"details\":\"generic / unspecified error\"},\"INVALID_INTERNAL_FUNCTION\":{\"details\":\"calling invalid internal function\"},\"RESOURCE_ERROR\":{\"details\":\"resource error (too large allocation or too large array)\"},\"STORAGE_ENCODING_ERROR\":{\"details\":\"invalid encoding in storage\"},\"UNDER_OVERFLOW\":{\"details\":\"arithmetic underflow or overflow\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Panic.sol\":\"Panic\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"length","type":"uint256"}],"name":"StringsInsufficientHexLength","type":"error"},{"inputs":[],"name":"StringsInvalidAddressFormat","type":"error"},{"inputs":[],"name":"StringsInvalidChar","type":"error"}],"devdoc":{"details":"String operations.","errors":{"StringsInsufficientHexLength(uint256,uint256)":[{"details":"The `value` string doesn't fit in the specified `length`."}],"StringsInvalidAddressFormat()":[{"details":"The string being parsed is not a properly formatted address."}],"StringsInvalidChar()":[{"details":"The string being parsed contains characters that are not in scope of the given base."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220251cc3a2d18a45538ecb55bc2a5e9570c19d99955f052c5a8bf297d13700696a64736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x25 SHR 0xC3 LOG2 0xD1 DUP11 GASLIMIT MSTORE8 DUP15 0xCB SSTORE 0xBC 0x2A MCOPY SWAP6 PUSH17 0xC19D99955F052C5A8BF297D13700696A64 PUSH20 0x6F6C634300081C00330000000000000000000000 ","sourceMap":"297:16541:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;297:16541:3;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220251cc3a2d18a45538ecb55bc2a5e9570c19d99955f052c5a8bf297d13700696a64736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x25 SHR 0xC3 LOG2 0xD1 DUP11 GASLIMIT MSTORE8 DUP15 0xCB SSTORE 0xBC 0x2A MCOPY SWAP6 PUSH17 0xC19D99955F052C5A8BF297D13700696A64 PUSH20 0x6F6C634300081C00330000000000000000000000 ","sourceMap":"297:16541:3:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_tryParseChr(bytes1)":"infinite","_tryParseHexUintUncheckedBounds(string memory,uint256,uint256)":"infinite","_tryParseIntUncheckedBounds(string memory,uint256,uint256)":"infinite","_tryParseUintUncheckedBounds(string memory,uint256,uint256)":"infinite","_unsafeReadBytesOffset(bytes memory,uint256)":"infinite","equal(string memory,string memory)":"infinite","parseAddress(string memory)":"infinite","parseAddress(string memory,uint256,uint256)":"infinite","parseHexUint(string memory)":"infinite","parseHexUint(string memory,uint256,uint256)":"infinite","parseInt(string memory)":"infinite","parseInt(string memory,uint256,uint256)":"infinite","parseUint(string memory)":"infinite","parseUint(string memory,uint256,uint256)":"infinite","toChecksumHexString(address)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite","toStringSigned(int256)":"infinite","tryParseAddress(string memory)":"infinite","tryParseAddress(string memory,uint256,uint256)":"infinite","tryParseHexUint(string memory)":"infinite","tryParseHexUint(string memory,uint256,uint256)":"infinite","tryParseInt(string memory)":"infinite","tryParseInt(string memory,uint256,uint256)":"infinite","tryParseUint(string memory)":"infinite","tryParseUint(string memory,uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StringsInvalidAddressFormat\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StringsInvalidChar\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"String operations.\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}],\"StringsInvalidAddressFormat()\":[{\"details\":\"The string being parsed is not a properly formatted address.\"}],\"StringsInvalidChar()\":[{\"details\":\"The string being parsed contains characters that are not in scope of the given base.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    using SafeCast for *;\\n\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\n     */\\n    error StringsInvalidChar();\\n\\n    /**\\n     * @dev The string being parsed is not a properly formatted address.\\n     */\\n    error StringsInvalidAddressFormat();\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input) internal pure returns (uint256) {\\n        return parseUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseUint} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 9) return (false, 0);\\n            result *= 10;\\n            result += chr;\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input) internal pure returns (int256) {\\n        return parseInt(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\n     * the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\n\\n    /**\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character or if the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, int256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseInt} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseIntUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, int256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // Check presence of a negative sign.\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\n\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\n\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\n            return (true, type(int256).min);\\n        } else return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\n        return parseHexUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\n     * invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseHexUint} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseHexUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // skip 0x prefix if present\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 offset = hasPrefix.toUint() * 2;\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin + offset; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 15) return (false, 0);\\n            result *= 16;\\n            unchecked {\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\n                // This guaratees that adding a value < 16 will not cause an overflow, hence the unchecked.\\n                result += chr;\\n            }\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input) internal pure returns (address) {\\n        return parseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\n        if (!success) revert StringsInvalidAddressFormat();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\n     * formatted address. See {parseAddress} requirements.\\n     */\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\n        return tryParseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\n     * formatted address. See {parseAddress} requirements.\\n     */\\n    function tryParseAddress(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, address value) {\\n        if (end > bytes(input).length || begin > end) return (false, address(0));\\n\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\n\\n        // check that input is the correct length\\n        if (end - begin == expectedLength) {\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\n            return (s, address(uint160(v)));\\n        } else {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\n        uint8 value = uint8(chr);\\n\\n        // Try to parse `chr`:\\n        // - Case 1: [0-9]\\n        // - Case 2: [a-f]\\n        // - Case 3: [A-F]\\n        // - otherwise not supported\\n        unchecked {\\n            if (value > 47 && value < 58) value -= 48;\\n            else if (value > 96 && value < 103) value -= 87;\\n            else if (value > 64 && value < 71) value -= 55;\\n            else return type(uint8).max;\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\n     *\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n     * assembly block as such would prevent some optimizations.\\n     */\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n        assembly (\\\"memory-safe\\\") {\\n            value := mload(add(buffer, add(0x20, offset)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x44f87e91783e88415bde66f1a63f6c7f0076f2d511548820407d5c95643ac56c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2\\u00b2\\u2075\\u2076 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d05a251ca0d19797161ae49de5407d9f508e15363fcced34863557601550fe5264736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD0 GAS 0x25 SHR LOG0 0xD1 SWAP8 SWAP8 AND BYTE 0xE4 SWAP14 0xE5 BLOCKHASH PUSH30 0x9F508E15363FCCED34863557601550FE5264736F6C634300081C00330000 ","sourceMap":"281:28026:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;281:28026:4;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d05a251ca0d19797161ae49de5407d9f508e15363fcced34863557601550fe5264736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD0 GAS 0x25 SHR LOG0 0xD1 SWAP8 SWAP8 AND BYTE 0xE4 SWAP14 0xE5 BLOCKHASH PUSH30 0x9F508E15363FCCED34863557601550FE5264736F6C634300081C00330000 ","sourceMap":"281:28026:4:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_zeroBytes(bytes memory)":"infinite","average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","invMod(uint256,uint256)":"infinite","invModPrime(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","modExp(bytes memory,bytes memory,bytes memory)":"infinite","modExp(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite","ternary(bool,uint256,uint256)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryModExp(bytes memory,bytes memory,bytes memory)":"infinite","tryModExp(uint256,uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite","unsignedRoundsUp(enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2\\u00b2\\u2075\\u2076 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"SafeCast":{"abi":[{"inputs":[{"internalType":"uint8","name":"bits","type":"uint8"},{"internalType":"int256","name":"value","type":"int256"}],"name":"SafeCastOverflowedIntDowncast","type":"error"},{"inputs":[{"internalType":"int256","name":"value","type":"int256"}],"name":"SafeCastOverflowedIntToUint","type":"error"},{"inputs":[{"internalType":"uint8","name":"bits","type":"uint8"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeCastOverflowedUintDowncast","type":"error"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeCastOverflowedUintToInt","type":"error"}],"devdoc":{"details":"Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow checks. Downcasting from uint256/int256 in Solidity does not revert on overflow. This can easily result in undesired exploitation or bugs, since developers usually assume that overflows raise errors. `SafeCast` restores this intuition by reverting the transaction when such an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.","errors":{"SafeCastOverflowedIntDowncast(uint8,int256)":[{"details":"Value doesn't fit in an int of `bits` size."}],"SafeCastOverflowedIntToUint(int256)":[{"details":"An int value doesn't fit in an uint of `bits` size."}],"SafeCastOverflowedUintDowncast(uint8,uint256)":[{"details":"Value doesn't fit in an uint of `bits` size."}],"SafeCastOverflowedUintToInt(uint256)":[{"details":"An uint value doesn't fit in an int of `bits` size."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200a691a2a551a3f6da20fe43694e0367b64bd2fb03193ff627c4c5c750380170264736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXP PUSH10 0x1A2A551A3F6DA20FE436 SWAP5 0xE0 CALLDATASIZE PUSH28 0x64BD2FB03193FF627C4C5C750380170264736F6C634300081C003300 ","sourceMap":"769:34173:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;769:34173:5;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200a691a2a551a3f6da20fe43694e0367b64bd2fb03193ff627c4c5c750380170264736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXP PUSH10 0x1A2A551A3F6DA20FE436 SWAP5 0xE0 CALLDATASIZE PUSH28 0x64BD2FB03193FF627C4C5C750380170264736F6C634300081C003300 ","sourceMap":"769:34173:5:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"toInt104(int256)":"infinite","toInt112(int256)":"infinite","toInt120(int256)":"infinite","toInt128(int256)":"infinite","toInt136(int256)":"infinite","toInt144(int256)":"infinite","toInt152(int256)":"infinite","toInt16(int256)":"infinite","toInt160(int256)":"infinite","toInt168(int256)":"infinite","toInt176(int256)":"infinite","toInt184(int256)":"infinite","toInt192(int256)":"infinite","toInt200(int256)":"infinite","toInt208(int256)":"infinite","toInt216(int256)":"infinite","toInt224(int256)":"infinite","toInt232(int256)":"infinite","toInt24(int256)":"infinite","toInt240(int256)":"infinite","toInt248(int256)":"infinite","toInt256(uint256)":"infinite","toInt32(int256)":"infinite","toInt40(int256)":"infinite","toInt48(int256)":"infinite","toInt56(int256)":"infinite","toInt64(int256)":"infinite","toInt72(int256)":"infinite","toInt8(int256)":"infinite","toInt80(int256)":"infinite","toInt88(int256)":"infinite","toInt96(int256)":"infinite","toUint(bool)":"infinite","toUint104(uint256)":"infinite","toUint112(uint256)":"infinite","toUint120(uint256)":"infinite","toUint128(uint256)":"infinite","toUint136(uint256)":"infinite","toUint144(uint256)":"infinite","toUint152(uint256)":"infinite","toUint16(uint256)":"infinite","toUint160(uint256)":"infinite","toUint168(uint256)":"infinite","toUint176(uint256)":"infinite","toUint184(uint256)":"infinite","toUint192(uint256)":"infinite","toUint200(uint256)":"infinite","toUint208(uint256)":"infinite","toUint216(uint256)":"infinite","toUint224(uint256)":"infinite","toUint232(uint256)":"infinite","toUint24(uint256)":"infinite","toUint240(uint256)":"infinite","toUint248(uint256)":"infinite","toUint256(int256)":"infinite","toUint32(uint256)":"infinite","toUint40(uint256)":"infinite","toUint48(uint256)":"infinite","toUint56(uint256)":"infinite","toUint64(uint256)":"infinite","toUint72(uint256)":"infinite","toUint8(uint256)":"infinite","toUint80(uint256)":"infinite","toUint88(uint256)":"infinite","toUint96(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"SafeCastOverflowedIntDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"SafeCastOverflowedIntToUint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintToInt\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow checks. Downcasting from uint256/int256 in Solidity does not revert on overflow. This can easily result in undesired exploitation or bugs, since developers usually assume that overflows raise errors. `SafeCast` restores this intuition by reverting the transaction when such an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"errors\":{\"SafeCastOverflowedIntDowncast(uint8,int256)\":[{\"details\":\"Value doesn't fit in an int of `bits` size.\"}],\"SafeCastOverflowedIntToUint(int256)\":[{\"details\":\"An int value doesn't fit in an uint of `bits` size.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}],\"SafeCastOverflowedUintToInt(uint256)\":[{\"details\":\"An uint value doesn't fit in an int of `bits` size.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeCast.sol\":\"SafeCast\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220dd9b2a79efd6349818d2e3a0e4b9f9d0441e837f87ff15655bb759d65a3cfc4964736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDD SWAP12 0x2A PUSH26 0xEFD6349818D2E3A0E4B9F9D0441E837F87FF15655BB759D65A3C 0xFC BLOBHASH PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"258:2354:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;258:2354:6;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220dd9b2a79efd6349818d2e3a0e4b9f9d0441e837f87ff15655bb759d65a3cfc4964736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDD SWAP12 0x2A PUSH26 0xEFD6349818D2E3A0E4B9F9D0441E837F87FF15655BB759D65A3C 0xFC BLOBHASH PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"258:2354:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite","ternary(bool,int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ORTBet.sol":{"ORTBet":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"backupAddress","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"BackupAddressAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"backupAddress","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"BackupAddressRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"FeesWithdrawn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"gameId","type":"bytes32"},{"indexed":false,"internalType":"enum ORTBet.GameResult","name":"result","type":"uint8"}],"name":"GameResolved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"gameId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"player1","type":"address"},{"indexed":true,"internalType":"address","name":"player2","type":"address"},{"indexed":false,"internalType":"uint256","name":"stakeAmount","type":"uint256"}],"name":"GameStarted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"player","type":"address"},{"indexed":true,"internalType":"address","name":"depositAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"StakesDeposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"player","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"StakesLocked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"player","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"StakesUnlocked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"player","type":"address"},{"indexed":true,"internalType":"address","name":"withdrawalAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"StakesWithdrawn","type":"event"},{"stateMutability":"payable","type":"fallback"},{"inputs":[{"internalType":"address","name":"_backupAddress","type":"address"}],"name":"addBackupAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"backupAddresses","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"calculateFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"depositStakes","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_mainAddress","type":"address"}],"name":"depositStakes","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"feePercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feesCollected","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"games","outputs":[{"internalType":"address","name":"player1","type":"address"},{"internalType":"address","name":"player2","type":"address"},{"internalType":"uint256","name":"stakeAmount","type":"uint256"},{"internalType":"bool","name":"ongoing","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_mainAddress","type":"address"}],"name":"getBackupAddresses","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"}],"name":"getBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_gameId","type":"bytes32"}],"name":"getGame","outputs":[{"components":[{"internalType":"address","name":"player1","type":"address"},{"internalType":"address","name":"player2","type":"address"},{"internalType":"uint256","name":"stakeAmount","type":"uint256"},{"internalType":"bool","name":"ongoing","type":"bool"}],"internalType":"struct ORTBet.Game","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_userAddress","type":"address"}],"name":"getLockedStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"lockedStakes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxBackupAddresses","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_backupAddress","type":"address"}],"name":"removeBackupAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_gameId","type":"bytes32"},{"internalType":"enum ORTBet.GameResult","name":"_result","type":"uint8"}],"name":"resolveGame","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_gameId","type":"string"},{"internalType":"address","name":"_player1","type":"address"},{"internalType":"address","name":"_player2","type":"address"},{"internalType":"uint256","name":"_stakeAmount","type":"uint256"}],"name":"startGame","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"userBalances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdrawFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdrawStakes","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"address","name":"_mainAddress","type":"address"}],"name":"withdrawStakes","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"errors":{"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_50":{"entryPoint":null,"id":50,"parameterSlots":1,"returnSlots":0},"@_5060":{"entryPoint":null,"id":5060,"parameterSlots":0,"returnSlots":0},"@_transferOwnership_146":{"entryPoint":65,"id":146,"parameterSlots":1,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:219:8","nodeType":"YulBlock","src":"0:219:8","statements":[{"nativeSrc":"6:3:8","nodeType":"YulBlock","src":"6:3:8","statements":[]},{"body":{"nativeSrc":"115:102:8","nodeType":"YulBlock","src":"115:102:8","statements":[{"nativeSrc":"125:26:8","nodeType":"YulAssignment","src":"125:26:8","value":{"arguments":[{"name":"headStart","nativeSrc":"137:9:8","nodeType":"YulIdentifier","src":"137:9:8"},{"kind":"number","nativeSrc":"148:2:8","nodeType":"YulLiteral","src":"148:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"133:3:8","nodeType":"YulIdentifier","src":"133:3:8"},"nativeSrc":"133:18:8","nodeType":"YulFunctionCall","src":"133:18:8"},"variableNames":[{"name":"tail","nativeSrc":"125:4:8","nodeType":"YulIdentifier","src":"125:4:8"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"167:9:8","nodeType":"YulIdentifier","src":"167:9:8"},{"arguments":[{"name":"value0","nativeSrc":"182:6:8","nodeType":"YulIdentifier","src":"182:6:8"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"198:3:8","nodeType":"YulLiteral","src":"198:3:8","type":"","value":"160"},{"kind":"number","nativeSrc":"203:1:8","nodeType":"YulLiteral","src":"203:1:8","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"194:3:8","nodeType":"YulIdentifier","src":"194:3:8"},"nativeSrc":"194:11:8","nodeType":"YulFunctionCall","src":"194:11:8"},{"kind":"number","nativeSrc":"207:1:8","nodeType":"YulLiteral","src":"207:1:8","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"190:3:8","nodeType":"YulIdentifier","src":"190:3:8"},"nativeSrc":"190:19:8","nodeType":"YulFunctionCall","src":"190:19:8"}],"functionName":{"name":"and","nativeSrc":"178:3:8","nodeType":"YulIdentifier","src":"178:3:8"},"nativeSrc":"178:32:8","nodeType":"YulFunctionCall","src":"178:32:8"}],"functionName":{"name":"mstore","nativeSrc":"160:6:8","nodeType":"YulIdentifier","src":"160:6:8"},"nativeSrc":"160:51:8","nodeType":"YulFunctionCall","src":"160:51:8"},"nativeSrc":"160:51:8","nodeType":"YulExpressionStatement","src":"160:51:8"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"14:203:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"84:9:8","nodeType":"YulTypedName","src":"84:9:8","type":""},{"name":"value0","nativeSrc":"95:6:8","nodeType":"YulTypedName","src":"95:6:8","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"106:4:8","nodeType":"YulTypedName","src":"106:4:8","type":""}],"src":"14:203:8"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n}","id":8,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6080604052348015600f57600080fd5b503380603557604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b603c816041565b506091565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611e5d806100a06000396000f3fe60806040526004361061014f5760003560e01c806399a5d747116100b6578063d3856e551161006f578063d3856e55146104e7578063e703dd5414610507578063f071db5a14610527578063f2fde38b1461053d578063f579f8821461055d578063f8b2cb4f146105de576101a1565b806399a5d747146104495780639e2c63da14610469578063a001ecdd1461049f578063a105e149146104b4578063ae6ba4cc1461049f578063cfce8913146104c7576101a1565b80635aaccf69116101085780635aaccf69146102c05780635e318e07146102e0578063715018a61461030057806373931bbf146103155780638da5cb5b146103ea57806392417dc71461041c576101a1565b806308db7f85146101e95780632177457d1461020b57806326224c64146102135780632f78808c14610253578063410390ec146102735780634ac5c55914610293576101a1565b366101a15760405162461bcd60e51b815260206004820152601c60248201527f446972656374206465706f73697473206e6f7420616c6c6f7765642e0000000060448201526064015b60405180910390fd5b60405162461bcd60e51b815260206004820152601860248201527f46756e6374696f6e20646f6573206e6f742065786973742e00000000000000006044820152606401610198565b3480156101f557600080fd5b506102096102043660046119cc565b610614565b005b610209610808565b34801561021f57600080fd5b5061024061022e3660046119cc565b60016020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561025f57600080fd5b5061020961026e3660046119ee565b610885565b34801561027f57600080fd5b5061020961028e366004611a8a565b610d0d565b34801561029f57600080fd5b506102b36102ae3660046119cc565b610e18565b60405161024a9190611aa3565b3480156102cc57600080fd5b506102096102db366004611aef565b610e8e565b3480156102ec57600080fd5b506102096102fb366004611a8a565b610ff6565b34801561030c57600080fd5b506102096110cd565b34801561032157600080fd5b506103a7610330366004611a8a565b60408051608081018252600080825260208201819052918101829052606081019190915250600090815260036020818152604092839020835160808101855281546001600160a01b0390811682526001830154169281019290925260028101549382019390935291015460ff161515606082015290565b60405161024a919081516001600160a01b039081168252602080840151909116908201526040808301519082015260609182015115159181019190915260800190565b3480156103f657600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161024a565b34801561042857600080fd5b506102406104373660046119cc565b60026020526000908152604090205481565b34801561045557600080fd5b50610240610464366004611a8a565b6110e1565b34801561047557600080fd5b506102406104843660046119cc565b6001600160a01b031660009081526002602052604090205490565b3480156104ab57600080fd5b50610240600381565b6102096104c23660046119cc565b611100565b3480156104d357600080fd5b506102096104e23660046119cc565b6111d1565b3480156104f357600080fd5b50610404610502366004611b1b565b611397565b34801561051357600080fd5b50610209610522366004611b45565b6113cf565b34801561053357600080fd5b5061024060055481565b34801561054957600080fd5b506102096105583660046119cc565b61172b565b34801561056957600080fd5b506105b1610578366004611a8a565b600360208190526000918252604090912080546001820154600283015492909301546001600160a01b0391821693909116919060ff1684565b604080516001600160a01b039586168152949093166020850152918301521515606082015260800161024a565b3480156105ea57600080fd5b506102406105f93660046119cc565b6001600160a01b031660009081526001602052604090205490565b3360009081526004602052604090205460039081119061063390611769565b6040516020016106439190611b9d565b604051602081830303815290604052906106705760405162461bcd60e51b81526004016101989190611bf6565b506001600160a01b0381166106d65760405162461bcd60e51b815260206004820152602660248201527f4261636b757020616464726573732063616e6e6f74206265207a65726f206164604482015265323932b9b99760d11b6064820152608401610198565b336001600160a01b038216036107395760405162461bcd60e51b815260206004820152602260248201527f43616e6e6f74207365742073656c66206173206261636b757020616464726573604482015261399760f11b6064820152608401610198565b33600090815260046020526040902061075290826117fc565b1561079f5760405162461bcd60e51b815260206004820152601d60248201527f4261636b7570206164647265737320616c72656164792061646465642e0000006044820152606401610198565b336000818152600460209081526040808320805460018101825590845291832090910180546001600160a01b0319166001600160a01b038616908117909155905190917f183963c107e526b4dc8ae0c8b5b960da3bddd00ae79c713ba806a69ab06ab97191a350565b600034116108285760405162461bcd60e51b815260040161019890611c29565b3360009081526001602052604081208054349290610847908490611c85565b9091555050604051348152339081907f029b53808e5ee258b1acdd8061a270b641aaded1f730ef560687f44a98827bdc9060200160405180910390a3565b61088d61185b565b600085856040516020016108a2929190611c98565b60408051601f198184030181529181528151602092830120600081815260039093529120600201549091501561091a5760405162461bcd60e51b815260206004820152601760248201527f47616d6520494420616c7265616479206578697374732e0000000000000000006044820152606401610198565b6001600160a01b0384161580159061093a57506001600160a01b03831615155b6109865760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420706c6179657220616464726573732e0000000000000000006044820152606401610198565b600082116109e25760405162461bcd60e51b8152602060048201526024808201527f5f7374616b65416d6f756e74206d7573742062652067726561746572207468616044820152633710181760e11b6064820152608401610198565b6001600160a01b038416600090815260016020526040902054821115610a4a5760405162461bcd60e51b815260206004820152601f60248201527f506c61796572312068617320696e73756666696369656e742066756e64732e006044820152606401610198565b6001600160a01b038316600090815260016020526040902054821115610ab25760405162461bcd60e51b815260206004820152601f60248201527f506c61796572322068617320696e73756666696369656e742066756e64732e006044820152606401610198565b60006002610abf846110e1565b610ac99190611ca8565b90506000610ad78285611cca565b6001600160a01b038716600090815260016020526040812080549293508392909190610b04908490611cca565b90915550506001600160a01b03851660009081526001602052604081208054839290610b31908490611cca565b90915550506001600160a01b03861660009081526002602052604081208054839290610b5e908490611c85565b90915550506001600160a01b03851660009081526002602052604081208054839290610b8b908490611c85565b90915550610b9c9050826002611cdd565b60056000828254610bad9190611c85565b9091555050604080516080810182526001600160a01b03808916808352888216602080850191825284860187815260016060870181815260008c8152600394859052899020975188549088166001600160a01b031991821617895594519188018054929097169190941617909455925160028501555192909101805492151560ff199093169290921790915590517f41375446217eacab943f69f43e90965cbed73a9648b36f7c1276c8e76bb67bad90610c6a9084815260200190565b60405180910390a2846001600160a01b03167f41375446217eacab943f69f43e90965cbed73a9648b36f7c1276c8e76bb67bad82604051610cad91815260200190565b60405180910390a2846001600160a01b0316866001600160a01b0316847fca5be7d622fe97529270450062762f9bac7e27828ef7b8658af85234f44146cd87604051610cfb91815260200190565b60405180910390a45050505050505050565b60008111610d2d5760405162461bcd60e51b815260040161019890611cf4565b33600090815260016020526040902054811115610d8c5760405162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e742066756e647320746f2077697468647261772e006044820152606401610198565b3360009081526001602052604081208054839290610dab908490611cca565b9091555050604051339082156108fc029083906000818181858888f19350505050158015610ddd573d6000803e3d6000fd5b50604051818152339081907f2ecb67032ef4329934be5b0b0c0b7277932396db57a18598adde8fcba3d920349060200160405180910390a350565b6001600160a01b038116600090815260046020908152604091829020805483518184028101840190945280845260609392830182828015610e8257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e64575b50505050509050919050565b6001600160a01b03811660009081526004602052604090208190610eb290336117fc565b610ece5760405162461bcd60e51b815260040161019890611d3d565b60008311610eee5760405162461bcd60e51b815260040161019890611cf4565b6001600160a01b038216600090815260016020526040902054831115610f565760405162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e742066756e647320746f2077697468647261772e006044820152606401610198565b6001600160a01b03821660009081526001602052604081208054859290610f7e908490611cca565b9091555050604051339084156108fc029085906000818181858888f19350505050158015610fb0573d6000803e3d6000fd5b5060405183815233906001600160a01b038416907f2ecb67032ef4329934be5b0b0c0b7277932396db57a18598adde8fcba3d920349060200160405180910390a3505050565b610ffe61185b565b8060055410156110505760405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e74206665657320636f6c6c65637465642e000000006044820152606401610198565b80600560008282546110629190611cca565b9091555050604051339082156108fc029083906000818181858888f19350505050158015611094573d6000803e3d6000fd5b5060405181815233907fc0819c13be868895eb93e40eaceb96de976442fa1d404e5c55f14bb65a8c489a9060200160405180910390a250565b6110d561185b565b6110df6000611888565b565b600060646110f0600384611cdd565b6110fa9190611ca8565b92915050565b6001600160a01b0381166000908152600460205260409020819061112490336117fc565b6111405760405162461bcd60e51b815260040161019890611d3d565b600034116111605760405162461bcd60e51b815260040161019890611c29565b6001600160a01b03821660009081526001602052604081208054349290611188908490611c85565b909155505060405134815233906001600160a01b038416907f029b53808e5ee258b1acdd8061a270b641aaded1f730ef560687f44a98827bdc9060200160405180910390a35050565b3360009081526004602052604090206111ea90826117fc565b61124e5760405162461bcd60e51b815260206004820152602f60248201527f4e6f7420617574686f72697a656420746f2072656d6f7665207468697320726560448201526e31b7bb32b93c9030b2323932b9b99760891b6064820152608401610198565b336000908152600460205260408120905b815481101561139257826001600160a01b031682828154811061128457611284611d87565b6000918252602090912001546001600160a01b03160361138a57815482906112ae90600190611cca565b815481106112be576112be611d87565b9060005260206000200160009054906101000a90046001600160a01b03168282815481106112ee576112ee611d87565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508180548061132c5761132c611d9d565b600082815260208120820160001990810180546001600160a01b031916905590910190915560405133916001600160a01b038616917ffe51b55ea38e48cc7fb184d0d60446a88610b80da472d30aa215a652276157449190a3505050565b60010161125f565b505050565b600460205281600052604060002081815481106113b357600080fd5b6000918252602090912001546001600160a01b03169150829050565b6113d761185b565b6000828152600360208190526040909120015460ff166114515760405162461bcd60e51b815260206004820152602f60248201527f47616d6520656974686572206e6f742063726561746564206f7220697320616c60448201526e3932b0b23c903334b734b9b432b21760891b6064820152608401610198565b600082815260036020908152604080832060028082015482546001600160a01b03168652935290832080549193909161148b908490611cca565b909155505060028082015460018301546001600160a01b03166000908152602092909252604082208054919290916114c4908490611cca565b90915550600190508260028111156114de576114de611db3565b03611564576002808201546114f291611cdd565b81546001600160a01b03166000908152600160205260408120805490919061151b908490611c85565b909155505080546002808301546001600160a01b0390921691600080516020611e088339815191529161154e9190611cdd565b60405190815260200160405180910390a26116e0565b600282600281111561157857611578611db3565b036115f05760028082015461158c91611cdd565b6001828101546001600160a01b031660009081526020919091526040812080549091906115ba908490611c85565b909155505060018101546002808301546001600160a01b0390921691600080516020611e088339815191529161154e9190611cdd565b600082600281111561160457611604611db3565b036116e057600281015481546001600160a01b031660009081526001602052604081208054909190611637908490611c85565b909155505060028101546001808301546001600160a01b0316600090815260209190915260408120805490919061166f908490611c85565b9091555050805460028201546040519081526001600160a01b0390911690600080516020611e088339815191529060200160405180910390a2600181015460028201546040519081526001600160a01b0390911690600080516020611e088339815191529060200160405180910390a25b60038101805460ff1916905560405183907f84084530ad38987aaa9b1454bf4cbc496558210efbfe8ec98c3a6879f4e9a38a9061171e908590611dc9565b60405180910390a2505050565b61173361185b565b6001600160a01b03811661175d57604051631e4fbdf760e01b815260006004820152602401610198565b61176681611888565b50565b60606000611776836118d8565b600101905060008167ffffffffffffffff81111561179657611796611df1565b6040519080825280601f01601f1916602001820160405280156117c0576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846117ca57509392505050565b6000805b835481101561185157826001600160a01b031684828154811061182557611825611d87565b6000918252602090912001546001600160a01b0316036118495760019150506110fa565b600101611800565b5060009392505050565b6000546001600160a01b031633146110df5760405163118cdaa760e01b8152336004820152602401610198565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106119175772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611943576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061196157662386f26fc10000830492506010015b6305f5e1008310611979576305f5e100830492506008015b612710831061198d57612710830492506004015b6064831061199f576064830492506002015b600a83106110fa5760010192915050565b80356001600160a01b03811681146119c757600080fd5b919050565b6000602082840312156119de57600080fd5b6119e7826119b0565b9392505050565b600080600080600060808688031215611a0657600080fd5b853567ffffffffffffffff811115611a1d57600080fd5b8601601f81018813611a2e57600080fd5b803567ffffffffffffffff811115611a4557600080fd5b886020828401011115611a5757600080fd5b602091820196509450611a6b9087016119b0565b9250611a79604087016119b0565b949793965091946060013592915050565b600060208284031215611a9c57600080fd5b5035919050565b602080825282518282018190526000918401906040840190835b81811015611ae45783516001600160a01b0316835260209384019390920191600101611abd565b509095945050505050565b60008060408385031215611b0257600080fd5b82359150611b12602084016119b0565b90509250929050565b60008060408385031215611b2e57600080fd5b611b37836119b0565b946020939093013593505050565b60008060408385031215611b5857600080fd5b82359150602083013560038110611b6e57600080fd5b809150509250929050565b60005b83811015611b94578181015183820152602001611b7c565b50506000910152565b74021b0b73737ba1030b2321036b7b932903a3430b71605d1b815260008251611bcd816015850160208701611b79565b71103130b1b5bab81030b2323932b9b9b2b99760711b6015939091019283015250602701919050565b6020815260008251806020840152611c15816040850160208701611b79565b601f01601f19169190910160400192915050565b60208082526026908201527f4465706f73697420616d6f756e74206d757374206265206772656174657220746040820152653430b710181760d11b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b808201808211156110fa576110fa611c6f565b8183823760009101908152919050565b600082611cc557634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156110fa576110fa611c6f565b80820281158282048414176110fa576110fa611c6f565b60208082526029908201527f5769746864726177616c20616d6f756e74206d7573742062652067726561746560408201526839103a3430b710181760b91b606082015260800190565b6020808252602a908201527f43616c6c6572206973206e6f7420612072656769737465726564206261636b75604082015269381030b2323932b9b99760b11b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b6020810160038310611deb57634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fdfe68510e4a026e1e6eb57d0691a8904192605ae5f5c8c1e0c878bcfd8299f56132a2646970667358221220dc873dec30bf1f1638b9e647931d346f9d8abdafc5645608c162f15ab074fdfc64736f6c634300081c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLER DUP1 PUSH1 0x35 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3C DUP2 PUSH1 0x41 JUMP JUMPDEST POP PUSH1 0x91 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x1E5D DUP1 PUSH2 0xA0 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x14F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x99A5D747 GT PUSH2 0xB6 JUMPI DUP1 PUSH4 0xD3856E55 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xD3856E55 EQ PUSH2 0x4E7 JUMPI DUP1 PUSH4 0xE703DD54 EQ PUSH2 0x507 JUMPI DUP1 PUSH4 0xF071DB5A EQ PUSH2 0x527 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x53D JUMPI DUP1 PUSH4 0xF579F882 EQ PUSH2 0x55D JUMPI DUP1 PUSH4 0xF8B2CB4F EQ PUSH2 0x5DE JUMPI PUSH2 0x1A1 JUMP JUMPDEST DUP1 PUSH4 0x99A5D747 EQ PUSH2 0x449 JUMPI DUP1 PUSH4 0x9E2C63DA EQ PUSH2 0x469 JUMPI DUP1 PUSH4 0xA001ECDD EQ PUSH2 0x49F JUMPI DUP1 PUSH4 0xA105E149 EQ PUSH2 0x4B4 JUMPI DUP1 PUSH4 0xAE6BA4CC EQ PUSH2 0x49F JUMPI DUP1 PUSH4 0xCFCE8913 EQ PUSH2 0x4C7 JUMPI PUSH2 0x1A1 JUMP JUMPDEST DUP1 PUSH4 0x5AACCF69 GT PUSH2 0x108 JUMPI DUP1 PUSH4 0x5AACCF69 EQ PUSH2 0x2C0 JUMPI DUP1 PUSH4 0x5E318E07 EQ PUSH2 0x2E0 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x300 JUMPI DUP1 PUSH4 0x73931BBF EQ PUSH2 0x315 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3EA JUMPI DUP1 PUSH4 0x92417DC7 EQ PUSH2 0x41C JUMPI PUSH2 0x1A1 JUMP JUMPDEST DUP1 PUSH4 0x8DB7F85 EQ PUSH2 0x1E9 JUMPI DUP1 PUSH4 0x2177457D EQ PUSH2 0x20B JUMPI DUP1 PUSH4 0x26224C64 EQ PUSH2 0x213 JUMPI DUP1 PUSH4 0x2F78808C EQ PUSH2 0x253 JUMPI DUP1 PUSH4 0x410390EC EQ PUSH2 0x273 JUMPI DUP1 PUSH4 0x4AC5C559 EQ PUSH2 0x293 JUMPI PUSH2 0x1A1 JUMP JUMPDEST CALLDATASIZE PUSH2 0x1A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x446972656374206465706F73697473206E6F7420616C6C6F7765642E00000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E20646F6573206E6F742065786973742E0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x198 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x204 CALLDATASIZE PUSH1 0x4 PUSH2 0x19CC JUMP JUMPDEST PUSH2 0x614 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x209 PUSH2 0x808 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x240 PUSH2 0x22E CALLDATASIZE PUSH1 0x4 PUSH2 0x19CC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x26E CALLDATASIZE PUSH1 0x4 PUSH2 0x19EE JUMP JUMPDEST PUSH2 0x885 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x28E CALLDATASIZE PUSH1 0x4 PUSH2 0x1A8A JUMP JUMPDEST PUSH2 0xD0D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B3 PUSH2 0x2AE CALLDATASIZE PUSH1 0x4 PUSH2 0x19CC JUMP JUMPDEST PUSH2 0xE18 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24A SWAP2 SWAP1 PUSH2 0x1AA3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x2DB CALLDATASIZE PUSH1 0x4 PUSH2 0x1AEF JUMP JUMPDEST PUSH2 0xE8E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x2FB CALLDATASIZE PUSH1 0x4 PUSH2 0x1A8A JUMP JUMPDEST PUSH2 0xFF6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x10CD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x321 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3A7 PUSH2 0x330 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A8A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0x80 DUP2 ADD DUP6 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 ADD SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x60 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24A SWAP2 SWAP1 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x60 SWAP2 DUP3 ADD MLOAD ISZERO ISZERO SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x24A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x428 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x240 PUSH2 0x437 CALLDATASIZE PUSH1 0x4 PUSH2 0x19CC JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x455 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x240 PUSH2 0x464 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A8A JUMP JUMPDEST PUSH2 0x10E1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x475 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x240 PUSH2 0x484 CALLDATASIZE PUSH1 0x4 PUSH2 0x19CC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x240 PUSH1 0x3 DUP2 JUMP JUMPDEST PUSH2 0x209 PUSH2 0x4C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x19CC JUMP JUMPDEST PUSH2 0x1100 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x4E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x19CC JUMP JUMPDEST PUSH2 0x11D1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x404 PUSH2 0x502 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B1B JUMP JUMPDEST PUSH2 0x1397 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x513 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x522 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B45 JUMP JUMPDEST PUSH2 0x13CF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x533 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x240 PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x549 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x558 CALLDATASIZE PUSH1 0x4 PUSH2 0x19CC JUMP JUMPDEST PUSH2 0x172B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x569 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5B1 PUSH2 0x578 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A8A JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD SWAP3 SWAP1 SWAP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP4 SWAP1 SWAP2 AND SWAP2 SWAP1 PUSH1 0xFF AND DUP5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND DUP2 MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0x24A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x240 PUSH2 0x5F9 CALLDATASIZE PUSH1 0x4 PUSH2 0x19CC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x3 SWAP1 DUP2 GT SWAP1 PUSH2 0x633 SWAP1 PUSH2 0x1769 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x643 SWAP2 SWAP1 PUSH2 0x1B9D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH2 0x670 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x198 SWAP2 SWAP1 PUSH2 0x1BF6 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x6D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4261636B757020616464726573732063616E6E6F74206265207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x323932B9B997 PUSH1 0xD1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x198 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0x739 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207365742073656C66206173206261636B757020616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x3997 PUSH1 0xF1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x198 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x752 SWAP1 DUP3 PUSH2 0x17FC JUMP JUMPDEST ISZERO PUSH2 0x79F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4261636B7570206164647265737320616C72656164792061646465642E000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x198 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP1 DUP5 MSTORE SWAP2 DUP4 KECCAK256 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 SWAP2 PUSH32 0x183963C107E526B4DC8AE0C8B5B960DA3BDDD00AE79C713BA806A69AB06AB971 SWAP2 LOG3 POP JUMP JUMPDEST PUSH1 0x0 CALLVALUE GT PUSH2 0x828 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x198 SWAP1 PUSH2 0x1C29 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD CALLVALUE SWAP3 SWAP1 PUSH2 0x847 SWAP1 DUP5 SWAP1 PUSH2 0x1C85 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD CALLVALUE DUP2 MSTORE CALLER SWAP1 DUP2 SWAP1 PUSH32 0x29B53808E5EE258B1ACDD8061A270B641AADED1F730EF560687F44A98827BDC SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMP JUMPDEST PUSH2 0x88D PUSH2 0x185B JUMP JUMPDEST PUSH1 0x0 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8A2 SWAP3 SWAP2 SWAP1 PUSH2 0x1C98 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 SWAP1 SWAP4 MSTORE SWAP2 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x91A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x47616D6520494420616C7265616479206578697374732E000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x198 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x93A JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO ISZERO JUMPDEST PUSH2 0x986 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420706C6179657220616464726573732E000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x198 JUMP JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x9E2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x5F7374616B65416D6F756E74206D757374206265206772656174657220746861 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x37101817 PUSH1 0xE1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x198 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0xA4A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C61796572312068617320696E73756666696369656E742066756E64732E00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x198 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0xAB2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C61796572322068617320696E73756666696369656E742066756E64732E00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x198 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH2 0xABF DUP5 PUSH2 0x10E1 JUMP JUMPDEST PUSH2 0xAC9 SWAP2 SWAP1 PUSH2 0x1CA8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xAD7 DUP3 DUP6 PUSH2 0x1CCA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP3 SWAP4 POP DUP4 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0xB04 SWAP1 DUP5 SWAP1 PUSH2 0x1CCA JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xB31 SWAP1 DUP5 SWAP1 PUSH2 0x1CCA JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xB5E SWAP1 DUP5 SWAP1 PUSH2 0x1C85 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xB8B SWAP1 DUP5 SWAP1 PUSH2 0x1C85 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xB9C SWAP1 POP DUP3 PUSH1 0x2 PUSH2 0x1CDD JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xBAD SWAP2 SWAP1 PUSH2 0x1C85 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND DUP1 DUP4 MSTORE DUP9 DUP3 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE DUP5 DUP7 ADD DUP8 DUP2 MSTORE PUSH1 0x1 PUSH1 0x60 DUP8 ADD DUP2 DUP2 MSTORE PUSH1 0x0 DUP13 DUP2 MSTORE PUSH1 0x3 SWAP5 DUP6 SWAP1 MSTORE DUP10 SWAP1 KECCAK256 SWAP8 MLOAD DUP9 SLOAD SWAP1 DUP9 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR DUP10 SSTORE SWAP5 MLOAD SWAP2 DUP9 ADD DUP1 SLOAD SWAP3 SWAP1 SWAP8 AND SWAP2 SWAP1 SWAP5 AND OR SWAP1 SWAP5 SSTORE SWAP3 MLOAD PUSH1 0x2 DUP6 ADD SSTORE MLOAD SWAP3 SWAP1 SWAP2 ADD DUP1 SLOAD SWAP3 ISZERO ISZERO PUSH1 0xFF NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD PUSH32 0x41375446217EACAB943F69F43E90965CBED73A9648B36F7C1276C8E76BB67BAD SWAP1 PUSH2 0xC6A SWAP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x41375446217EACAB943F69F43E90965CBED73A9648B36F7C1276C8E76BB67BAD DUP3 PUSH1 0x40 MLOAD PUSH2 0xCAD SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH32 0xCA5BE7D622FE97529270450062762F9BAC7E27828EF7B8658AF85234F44146CD DUP8 PUSH1 0x40 MLOAD PUSH2 0xCFB SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0xD2D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x198 SWAP1 PUSH2 0x1CF4 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 GT ISZERO PUSH2 0xD8C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E742066756E647320746F2077697468647261772E00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x198 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xDAB SWAP1 DUP5 SWAP1 PUSH2 0x1CCA JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD CALLER SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xDDD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE CALLER SWAP1 DUP2 SWAP1 PUSH32 0x2ECB67032EF4329934BE5B0B0C0B7277932396DB57A18598ADDE8FCBA3D92034 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD DUP4 MLOAD DUP2 DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE PUSH1 0x60 SWAP4 SWAP3 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0xE82 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xE64 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 PUSH2 0xEB2 SWAP1 CALLER PUSH2 0x17FC JUMP JUMPDEST PUSH2 0xECE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x198 SWAP1 PUSH2 0x1D3D JUMP JUMPDEST PUSH1 0x0 DUP4 GT PUSH2 0xEEE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x198 SWAP1 PUSH2 0x1CF4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP4 GT ISZERO PUSH2 0xF56 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E742066756E647320746F2077697468647261772E00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x198 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP6 SWAP3 SWAP1 PUSH2 0xF7E SWAP1 DUP5 SWAP1 PUSH2 0x1CCA JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD CALLER SWAP1 DUP5 ISZERO PUSH2 0x8FC MUL SWAP1 DUP6 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xFB0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP4 DUP2 MSTORE CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH32 0x2ECB67032EF4329934BE5B0B0C0B7277932396DB57A18598ADDE8FCBA3D92034 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xFFE PUSH2 0x185B JUMP JUMPDEST DUP1 PUSH1 0x5 SLOAD LT ISZERO PUSH2 0x1050 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E74206665657320636F6C6C65637465642E00000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x198 JUMP JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1062 SWAP2 SWAP1 PUSH2 0x1CCA JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD CALLER SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1094 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE CALLER SWAP1 PUSH32 0xC0819C13BE868895EB93E40EACEB96DE976442FA1D404E5C55F14BB65A8C489A SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x10D5 PUSH2 0x185B JUMP JUMPDEST PUSH2 0x10DF PUSH1 0x0 PUSH2 0x1888 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x64 PUSH2 0x10F0 PUSH1 0x3 DUP5 PUSH2 0x1CDD JUMP JUMPDEST PUSH2 0x10FA SWAP2 SWAP1 PUSH2 0x1CA8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 PUSH2 0x1124 SWAP1 CALLER PUSH2 0x17FC JUMP JUMPDEST PUSH2 0x1140 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x198 SWAP1 PUSH2 0x1D3D JUMP JUMPDEST PUSH1 0x0 CALLVALUE GT PUSH2 0x1160 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x198 SWAP1 PUSH2 0x1C29 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD CALLVALUE SWAP3 SWAP1 PUSH2 0x1188 SWAP1 DUP5 SWAP1 PUSH2 0x1C85 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD CALLVALUE DUP2 MSTORE CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH32 0x29B53808E5EE258B1ACDD8061A270B641AADED1F730EF560687F44A98827BDC SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x11EA SWAP1 DUP3 PUSH2 0x17FC JUMP JUMPDEST PUSH2 0x124E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420617574686F72697A656420746F2072656D6F76652074686973207265 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x31B7BB32B93C9030B2323932B9B997 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x198 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 LT ISZERO PUSH2 0x1392 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1284 JUMPI PUSH2 0x1284 PUSH2 0x1D87 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x138A JUMPI DUP2 SLOAD DUP3 SWAP1 PUSH2 0x12AE SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x1CCA JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x12BE JUMPI PUSH2 0x12BE PUSH2 0x1D87 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x12EE JUMPI PUSH2 0x12EE PUSH2 0x1D87 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP DUP2 DUP1 SLOAD DUP1 PUSH2 0x132C JUMPI PUSH2 0x132C PUSH2 0x1D9D JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 DUP3 ADD PUSH1 0x0 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE SWAP1 SWAP2 ADD SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD CALLER SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH32 0xFE51B55EA38E48CC7FB184D0D60446A88610B80DA472D30AA215A65227615744 SWAP2 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x125F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x13B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 POP DUP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x13D7 PUSH2 0x185B JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0xFF AND PUSH2 0x1451 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x47616D6520656974686572206E6F742063726561746564206F7220697320616C PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x3932B0B23C903334B734B9B432B217 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x198 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x2 DUP1 DUP3 ADD SLOAD DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 MSTORE SWAP4 MSTORE SWAP1 DUP4 KECCAK256 DUP1 SLOAD SWAP2 SWAP4 SWAP1 SWAP2 PUSH2 0x148B SWAP1 DUP5 SWAP1 PUSH2 0x1CCA JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x2 DUP1 DUP3 ADD SLOAD PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP3 KECCAK256 DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x14C4 SWAP1 DUP5 SWAP1 PUSH2 0x1CCA JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH1 0x1 SWAP1 POP DUP3 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x14DE JUMPI PUSH2 0x14DE PUSH2 0x1DB3 JUMP JUMPDEST SUB PUSH2 0x1564 JUMPI PUSH1 0x2 DUP1 DUP3 ADD SLOAD PUSH2 0x14F2 SWAP2 PUSH2 0x1CDD JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x151B SWAP1 DUP5 SWAP1 PUSH2 0x1C85 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP DUP1 SLOAD PUSH1 0x2 DUP1 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1E08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH2 0x154E SWAP2 SWAP1 PUSH2 0x1CDD JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0x16E0 JUMP JUMPDEST PUSH1 0x2 DUP3 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1578 JUMPI PUSH2 0x1578 PUSH2 0x1DB3 JUMP JUMPDEST SUB PUSH2 0x15F0 JUMPI PUSH1 0x2 DUP1 DUP3 ADD SLOAD PUSH2 0x158C SWAP2 PUSH2 0x1CDD JUMP JUMPDEST PUSH1 0x1 DUP3 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x15BA SWAP1 DUP5 SWAP1 PUSH2 0x1C85 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x2 DUP1 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1E08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH2 0x154E SWAP2 SWAP1 PUSH2 0x1CDD JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1604 JUMPI PUSH2 0x1604 PUSH2 0x1DB3 JUMP JUMPDEST SUB PUSH2 0x16E0 JUMPI PUSH1 0x2 DUP2 ADD SLOAD DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x1637 SWAP1 DUP5 SWAP1 PUSH2 0x1C85 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x1 DUP1 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x166F SWAP1 DUP5 SWAP1 PUSH2 0x1C85 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP DUP1 SLOAD PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1E08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1E08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST PUSH1 0x3 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD DUP4 SWAP1 PUSH32 0x84084530AD38987AAA9B1454BF4CBC496558210EFBFE8EC98C3A6879F4E9A38A SWAP1 PUSH2 0x171E SWAP1 DUP6 SWAP1 PUSH2 0x1DC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH2 0x1733 PUSH2 0x185B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x175D JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x198 JUMP JUMPDEST PUSH2 0x1766 DUP2 PUSH2 0x1888 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1776 DUP4 PUSH2 0x18D8 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1796 JUMPI PUSH2 0x1796 PUSH2 0x1DF1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x17C0 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x17CA JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP4 SLOAD DUP2 LT ISZERO PUSH2 0x1851 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1825 JUMPI PUSH2 0x1825 PUSH2 0x1D87 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x1849 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x10FA JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1800 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x10DF JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x198 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x1917 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x1943 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1961 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1979 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x198D JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x199F JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x10FA JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x19C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19E7 DUP3 PUSH2 0x19B0 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1A06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1A1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 ADD PUSH1 0x1F DUP2 ADD DUP9 SGT PUSH2 0x1A2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1A45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP5 ADD ADD GT ISZERO PUSH2 0x1A57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP2 DUP3 ADD SWAP7 POP SWAP5 POP PUSH2 0x1A6B SWAP1 DUP8 ADD PUSH2 0x19B0 JUMP JUMPDEST SWAP3 POP PUSH2 0x1A79 PUSH1 0x40 DUP8 ADD PUSH2 0x19B0 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP2 SWAP5 PUSH1 0x60 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP5 ADD SWAP1 PUSH1 0x40 DUP5 ADD SWAP1 DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1AE4 JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1ABD JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1B12 PUSH1 0x20 DUP5 ADD PUSH2 0x19B0 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B37 DUP4 PUSH2 0x19B0 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x3 DUP2 LT PUSH2 0x1B6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1B94 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1B7C JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH21 0x21B0B73737BA1030B2321036B7B932903A3430B71 PUSH1 0x5D SHL DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x1BCD DUP2 PUSH1 0x15 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1B79 JUMP JUMPDEST PUSH18 0x103130B1B5BAB81030B2323932B9B9B2B997 PUSH1 0x71 SHL PUSH1 0x15 SWAP4 SWAP1 SWAP2 ADD SWAP3 DUP4 ADD MSTORE POP PUSH1 0x27 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1C15 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1B79 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x4465706F73697420616D6F756E74206D75737420626520677265617465722074 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x3430B7101817 PUSH1 0xD1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x10FA JUMPI PUSH2 0x10FA PUSH2 0x1C6F JUMP JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1CC5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x10FA JUMPI PUSH2 0x10FA PUSH2 0x1C6F JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x10FA JUMPI PUSH2 0x10FA PUSH2 0x1C6F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x29 SWAP1 DUP3 ADD MSTORE PUSH32 0x5769746864726177616C20616D6F756E74206D75737420626520677265617465 PUSH1 0x40 DUP3 ADD MSTORE PUSH9 0x39103A3430B7101817 PUSH1 0xB9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x43616C6C6572206973206E6F7420612072656769737465726564206261636B75 PUSH1 0x40 DUP3 ADD MSTORE PUSH10 0x381030B2323932B9B997 PUSH1 0xB1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x3 DUP4 LT PUSH2 0x1DEB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID PUSH9 0x510E4A026E1E6EB57D MOD SWAP2 0xA8 SWAP1 COINBASE SWAP3 PUSH1 0x5A 0xE5 CREATE2 0xC8 0xC1 0xE0 0xC8 PUSH25 0xBCFD8299F56132A2646970667358221220DC873DEC30BF1F16 CODESIZE 0xB9 0xE6 SELFBALANCE SWAP4 SAR CALLVALUE PUSH16 0x9D8ABDAFC5645608C162F15AB074FDFC PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"171:9169:7:-:0;;;1646:36;;;;;;;;;-1:-1:-1;1668:10:7;;1269:95:0;;1322:31;;-1:-1:-1;;;1322:31:0;;1350:1;1322:31;;;160:51:8;133:18;;1322:31:0;;;;;;;1269:95;1373:32;1392:12;1373:18;:32::i;:::-;1225:187;171:9169:7;;2912:187:0;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;;;;;3020:17:0;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;14:203:8:-;171:9169:7;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_5715":{"entryPoint":null,"id":5715,"parameterSlots":0,"returnSlots":0},"@_5723":{"entryPoint":null,"id":5723,"parameterSlots":0,"returnSlots":0},"@_checkOwner_84":{"entryPoint":6235,"id":84,"parameterSlots":0,"returnSlots":0},"@_msgSender_159":{"entryPoint":null,"id":159,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_146":{"entryPoint":6280,"id":146,"parameterSlots":1,"returnSlots":0},"@addBackupAddress_5575":{"entryPoint":1556,"id":5575,"parameterSlots":1,"returnSlots":0},"@backupAddresses_4968":{"entryPoint":5015,"id":4968,"parameterSlots":0,"returnSlots":0},"@calculateFee_5707":{"entryPoint":4321,"id":5707,"parameterSlots":1,"returnSlots":1},"@contains_5795":{"entryPoint":6140,"id":5795,"parameterSlots":2,"returnSlots":1},"@depositStakes_5089":{"entryPoint":2056,"id":5089,"parameterSlots":0,"returnSlots":0},"@depositStakes_5121":{"entryPoint":4352,"id":5121,"parameterSlots":1,"returnSlots":0},"@feePercentage_4971":{"entryPoint":null,"id":4971,"parameterSlots":0,"returnSlots":0},"@feesCollected_4976":{"entryPoint":null,"id":4976,"parameterSlots":0,"returnSlots":0},"@games_4963":{"entryPoint":null,"id":4963,"parameterSlots":0,"returnSlots":0},"@getBackupAddresses_5658":{"entryPoint":3608,"id":5658,"parameterSlots":1,"returnSlots":1},"@getBalance_5735":{"entryPoint":null,"id":5735,"parameterSlots":1,"returnSlots":1},"@getGame_5760":{"entryPoint":null,"id":5760,"parameterSlots":1,"returnSlots":1},"@getLockedStake_5747":{"entryPoint":null,"id":5747,"parameterSlots":1,"returnSlots":1},"@lockedStakes_4958":{"entryPoint":null,"id":4958,"parameterSlots":0,"returnSlots":0},"@log10_2807":{"entryPoint":6360,"id":2807,"parameterSlots":1,"returnSlots":1},"@maxBackupAddresses_4974":{"entryPoint":null,"id":4974,"parameterSlots":0,"returnSlots":0},"@owner_67":{"entryPoint":null,"id":67,"parameterSlots":0,"returnSlots":1},"@removeBackupAddress_5645":{"entryPoint":4561,"id":5645,"parameterSlots":1,"returnSlots":0},"@renounceOwnership_98":{"entryPoint":4301,"id":98,"parameterSlots":0,"returnSlots":0},"@resolveGame_5503":{"entryPoint":5071,"id":5503,"parameterSlots":2,"returnSlots":0},"@startGame_5364":{"entryPoint":2181,"id":5364,"parameterSlots":5,"returnSlots":0},"@toString_307":{"entryPoint":5993,"id":307,"parameterSlots":1,"returnSlots":1},"@transferOwnership_126":{"entryPoint":5931,"id":126,"parameterSlots":1,"returnSlots":0},"@userBalances_4954":{"entryPoint":null,"id":4954,"parameterSlots":0,"returnSlots":0},"@withdrawFees_5692":{"entryPoint":4086,"id":5692,"parameterSlots":1,"returnSlots":0},"@withdrawStakes_5168":{"entryPoint":3341,"id":5168,"parameterSlots":1,"returnSlots":0},"@withdrawStakes_5217":{"entryPoint":3726,"id":5217,"parameterSlots":2,"returnSlots":0},"abi_decode_address":{"entryPoint":6576,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":6604,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":6939,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_enum$_GameResult_$5043":{"entryPoint":6981,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_string_calldata_ptrt_addresst_addresst_uint256":{"entryPoint":6638,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_uint256":{"entryPoint":6794,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_address":{"entryPoint":6895,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_packed_t_string_calldata_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":7320,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_3efd2dbfc081bf37c652dbe090d1d361e93212eb46913a51487fbe20b70e6e65_t_string_memory_ptr_t_stringliteral_eba76674054ad90018b9921ec8f09d9917e7625b39e3256f7826b772df7db756__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":7069,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bool__to_t_address_t_address_t_uint256_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":6819,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_enum$_GameResult_$5043__to_t_uint8__fromStack_reversed":{"entryPoint":7625,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7158,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0fa78a13653e06ad99b0fd069a1f00be9aaee42e8019fef06fc5450b72e1b65e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2085cb31c0c1e8224075d75f458578f54365aa05647251b48bb68bb0bf07fb3c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24004c7e147cbd7bbd3a293bdde95728aaaa014cfa5a2cce5b68611170522f61__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_29940d1dcde580d400bfd918827344f04d3b90b6d8b8716df5b5822db0156f4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2da5768ab6f4a6792842d32845b8d6e6c010a05c2db3bc139b5272f28565fb71__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_428675301fd335ad7663745fad16f23e40b3d007e15c73499f8fc16797bb5be3__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7209,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_547c3876eae61b1efa83e1f9d0d2c672e99c0104b959b6bba9216deb297083a1__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6ecbafa02a72b5d1804f10440d0ac97efc6479f5ef05e0935766c1bfaff28139__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6ed80a384a99508c50f304d0fc1fa01e87e8a7c1e23fd87bb26b3eec42b37996__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_87055f61685ba488261bfa7add3cec59d88745ad3c44d9b55ad8388c453ca9aa__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7485,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a1f811b878a206abc1b2ab57b5c43ceee3594f84b9fd983a59ec653d7b970398__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b8014dcd6b9b8825f36ce51acf04a3476cb0a60d3bf9b8d1fab82e12f1cf4345__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cb8b20e2c42377c47b5226ffeb741e823d4c5c68ace99d08fb1ac301efb651e5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc691903107a0912eff42becc72be6ba9923b8e686b6174029fe086e98b843bc__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cdf63a127d275dc7fb43022f13aa5adb46231f2519f921c4c26be0d00a369386__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ddb92dca1b14b7f86de22eb952ec5692b5d32ff7d579451d25c03288285572d1__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7412,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fadc0c8263f5d683f72a361984185a741a0b39b31acffee50958c78362b4d60e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_struct$_Game_$5052_memory_ptr__to_t_struct$_Game_$5052_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":7301,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":7336,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":7389,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":7370,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":7033,"id":null,"parameterSlots":3,"returnSlots":0},"panic_error_0x11":{"entryPoint":7279,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":7603,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x31":{"entryPoint":7581,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":7559,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":7665,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:14536:8","nodeType":"YulBlock","src":"0:14536:8","statements":[{"nativeSrc":"6:3:8","nodeType":"YulBlock","src":"6:3:8","statements":[]},{"body":{"nativeSrc":"188:178:8","nodeType":"YulBlock","src":"188:178:8","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"205:9:8","nodeType":"YulIdentifier","src":"205:9:8"},{"kind":"number","nativeSrc":"216:2:8","nodeType":"YulLiteral","src":"216:2:8","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"198:6:8","nodeType":"YulIdentifier","src":"198:6:8"},"nativeSrc":"198:21:8","nodeType":"YulFunctionCall","src":"198:21:8"},"nativeSrc":"198:21:8","nodeType":"YulExpressionStatement","src":"198:21:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"239:9:8","nodeType":"YulIdentifier","src":"239:9:8"},{"kind":"number","nativeSrc":"250:2:8","nodeType":"YulLiteral","src":"250:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"235:3:8","nodeType":"YulIdentifier","src":"235:3:8"},"nativeSrc":"235:18:8","nodeType":"YulFunctionCall","src":"235:18:8"},{"kind":"number","nativeSrc":"255:2:8","nodeType":"YulLiteral","src":"255:2:8","type":"","value":"28"}],"functionName":{"name":"mstore","nativeSrc":"228:6:8","nodeType":"YulIdentifier","src":"228:6:8"},"nativeSrc":"228:30:8","nodeType":"YulFunctionCall","src":"228:30:8"},"nativeSrc":"228:30:8","nodeType":"YulExpressionStatement","src":"228:30:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"278:9:8","nodeType":"YulIdentifier","src":"278:9:8"},{"kind":"number","nativeSrc":"289:2:8","nodeType":"YulLiteral","src":"289:2:8","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"274:3:8","nodeType":"YulIdentifier","src":"274:3:8"},"nativeSrc":"274:18:8","nodeType":"YulFunctionCall","src":"274:18:8"},{"hexValue":"446972656374206465706f73697473206e6f7420616c6c6f7765642e","kind":"string","nativeSrc":"294:30:8","nodeType":"YulLiteral","src":"294:30:8","type":"","value":"Direct deposits not allowed."}],"functionName":{"name":"mstore","nativeSrc":"267:6:8","nodeType":"YulIdentifier","src":"267:6:8"},"nativeSrc":"267:58:8","nodeType":"YulFunctionCall","src":"267:58:8"},"nativeSrc":"267:58:8","nodeType":"YulExpressionStatement","src":"267:58:8"},{"nativeSrc":"334:26:8","nodeType":"YulAssignment","src":"334:26:8","value":{"arguments":[{"name":"headStart","nativeSrc":"346:9:8","nodeType":"YulIdentifier","src":"346:9:8"},{"kind":"number","nativeSrc":"357:2:8","nodeType":"YulLiteral","src":"357:2:8","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"342:3:8","nodeType":"YulIdentifier","src":"342:3:8"},"nativeSrc":"342:18:8","nodeType":"YulFunctionCall","src":"342:18:8"},"variableNames":[{"name":"tail","nativeSrc":"334:4:8","nodeType":"YulIdentifier","src":"334:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_cb8b20e2c42377c47b5226ffeb741e823d4c5c68ace99d08fb1ac301efb651e5__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"14:352:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"165:9:8","nodeType":"YulTypedName","src":"165:9:8","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"179:4:8","nodeType":"YulTypedName","src":"179:4:8","type":""}],"src":"14:352:8"},{"body":{"nativeSrc":"545:174:8","nodeType":"YulBlock","src":"545:174:8","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"562:9:8","nodeType":"YulIdentifier","src":"562:9:8"},{"kind":"number","nativeSrc":"573:2:8","nodeType":"YulLiteral","src":"573:2:8","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"555:6:8","nodeType":"YulIdentifier","src":"555:6:8"},"nativeSrc":"555:21:8","nodeType":"YulFunctionCall","src":"555:21:8"},"nativeSrc":"555:21:8","nodeType":"YulExpressionStatement","src":"555:21:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"596:9:8","nodeType":"YulIdentifier","src":"596:9:8"},{"kind":"number","nativeSrc":"607:2:8","nodeType":"YulLiteral","src":"607:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"592:3:8","nodeType":"YulIdentifier","src":"592:3:8"},"nativeSrc":"592:18:8","nodeType":"YulFunctionCall","src":"592:18:8"},{"kind":"number","nativeSrc":"612:2:8","nodeType":"YulLiteral","src":"612:2:8","type":"","value":"24"}],"functionName":{"name":"mstore","nativeSrc":"585:6:8","nodeType":"YulIdentifier","src":"585:6:8"},"nativeSrc":"585:30:8","nodeType":"YulFunctionCall","src":"585:30:8"},"nativeSrc":"585:30:8","nodeType":"YulExpressionStatement","src":"585:30:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"635:9:8","nodeType":"YulIdentifier","src":"635:9:8"},{"kind":"number","nativeSrc":"646:2:8","nodeType":"YulLiteral","src":"646:2:8","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"631:3:8","nodeType":"YulIdentifier","src":"631:3:8"},"nativeSrc":"631:18:8","nodeType":"YulFunctionCall","src":"631:18:8"},{"hexValue":"46756e6374696f6e20646f6573206e6f742065786973742e","kind":"string","nativeSrc":"651:26:8","nodeType":"YulLiteral","src":"651:26:8","type":"","value":"Function does not exist."}],"functionName":{"name":"mstore","nativeSrc":"624:6:8","nodeType":"YulIdentifier","src":"624:6:8"},"nativeSrc":"624:54:8","nodeType":"YulFunctionCall","src":"624:54:8"},"nativeSrc":"624:54:8","nodeType":"YulExpressionStatement","src":"624:54:8"},{"nativeSrc":"687:26:8","nodeType":"YulAssignment","src":"687:26:8","value":{"arguments":[{"name":"headStart","nativeSrc":"699:9:8","nodeType":"YulIdentifier","src":"699:9:8"},{"kind":"number","nativeSrc":"710:2:8","nodeType":"YulLiteral","src":"710:2:8","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"695:3:8","nodeType":"YulIdentifier","src":"695:3:8"},"nativeSrc":"695:18:8","nodeType":"YulFunctionCall","src":"695:18:8"},"variableNames":[{"name":"tail","nativeSrc":"687:4:8","nodeType":"YulIdentifier","src":"687:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_0fa78a13653e06ad99b0fd069a1f00be9aaee42e8019fef06fc5450b72e1b65e__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"371:348:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"522:9:8","nodeType":"YulTypedName","src":"522:9:8","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"536:4:8","nodeType":"YulTypedName","src":"536:4:8","type":""}],"src":"371:348:8"},{"body":{"nativeSrc":"773:124:8","nodeType":"YulBlock","src":"773:124:8","statements":[{"nativeSrc":"783:29:8","nodeType":"YulAssignment","src":"783:29:8","value":{"arguments":[{"name":"offset","nativeSrc":"805:6:8","nodeType":"YulIdentifier","src":"805:6:8"}],"functionName":{"name":"calldataload","nativeSrc":"792:12:8","nodeType":"YulIdentifier","src":"792:12:8"},"nativeSrc":"792:20:8","nodeType":"YulFunctionCall","src":"792:20:8"},"variableNames":[{"name":"value","nativeSrc":"783:5:8","nodeType":"YulIdentifier","src":"783:5:8"}]},{"body":{"nativeSrc":"875:16:8","nodeType":"YulBlock","src":"875:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"884:1:8","nodeType":"YulLiteral","src":"884:1:8","type":"","value":"0"},{"kind":"number","nativeSrc":"887:1:8","nodeType":"YulLiteral","src":"887:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"877:6:8","nodeType":"YulIdentifier","src":"877:6:8"},"nativeSrc":"877:12:8","nodeType":"YulFunctionCall","src":"877:12:8"},"nativeSrc":"877:12:8","nodeType":"YulExpressionStatement","src":"877:12:8"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"834:5:8","nodeType":"YulIdentifier","src":"834:5:8"},{"arguments":[{"name":"value","nativeSrc":"845:5:8","nodeType":"YulIdentifier","src":"845:5:8"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"860:3:8","nodeType":"YulLiteral","src":"860:3:8","type":"","value":"160"},{"kind":"number","nativeSrc":"865:1:8","nodeType":"YulLiteral","src":"865:1:8","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"856:3:8","nodeType":"YulIdentifier","src":"856:3:8"},"nativeSrc":"856:11:8","nodeType":"YulFunctionCall","src":"856:11:8"},{"kind":"number","nativeSrc":"869:1:8","nodeType":"YulLiteral","src":"869:1:8","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"852:3:8","nodeType":"YulIdentifier","src":"852:3:8"},"nativeSrc":"852:19:8","nodeType":"YulFunctionCall","src":"852:19:8"}],"functionName":{"name":"and","nativeSrc":"841:3:8","nodeType":"YulIdentifier","src":"841:3:8"},"nativeSrc":"841:31:8","nodeType":"YulFunctionCall","src":"841:31:8"}],"functionName":{"name":"eq","nativeSrc":"831:2:8","nodeType":"YulIdentifier","src":"831:2:8"},"nativeSrc":"831:42:8","nodeType":"YulFunctionCall","src":"831:42:8"}],"functionName":{"name":"iszero","nativeSrc":"824:6:8","nodeType":"YulIdentifier","src":"824:6:8"},"nativeSrc":"824:50:8","nodeType":"YulFunctionCall","src":"824:50:8"},"nativeSrc":"821:70:8","nodeType":"YulIf","src":"821:70:8"}]},"name":"abi_decode_address","nativeSrc":"724:173:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"752:6:8","nodeType":"YulTypedName","src":"752:6:8","type":""}],"returnVariables":[{"name":"value","nativeSrc":"763:5:8","nodeType":"YulTypedName","src":"763:5:8","type":""}],"src":"724:173:8"},{"body":{"nativeSrc":"972:116:8","nodeType":"YulBlock","src":"972:116:8","statements":[{"body":{"nativeSrc":"1018:16:8","nodeType":"YulBlock","src":"1018:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1027:1:8","nodeType":"YulLiteral","src":"1027:1:8","type":"","value":"0"},{"kind":"number","nativeSrc":"1030:1:8","nodeType":"YulLiteral","src":"1030:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1020:6:8","nodeType":"YulIdentifier","src":"1020:6:8"},"nativeSrc":"1020:12:8","nodeType":"YulFunctionCall","src":"1020:12:8"},"nativeSrc":"1020:12:8","nodeType":"YulExpressionStatement","src":"1020:12:8"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"993:7:8","nodeType":"YulIdentifier","src":"993:7:8"},{"name":"headStart","nativeSrc":"1002:9:8","nodeType":"YulIdentifier","src":"1002:9:8"}],"functionName":{"name":"sub","nativeSrc":"989:3:8","nodeType":"YulIdentifier","src":"989:3:8"},"nativeSrc":"989:23:8","nodeType":"YulFunctionCall","src":"989:23:8"},{"kind":"number","nativeSrc":"1014:2:8","nodeType":"YulLiteral","src":"1014:2:8","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"985:3:8","nodeType":"YulIdentifier","src":"985:3:8"},"nativeSrc":"985:32:8","nodeType":"YulFunctionCall","src":"985:32:8"},"nativeSrc":"982:52:8","nodeType":"YulIf","src":"982:52:8"},{"nativeSrc":"1043:39:8","nodeType":"YulAssignment","src":"1043:39:8","value":{"arguments":[{"name":"headStart","nativeSrc":"1072:9:8","nodeType":"YulIdentifier","src":"1072:9:8"}],"functionName":{"name":"abi_decode_address","nativeSrc":"1053:18:8","nodeType":"YulIdentifier","src":"1053:18:8"},"nativeSrc":"1053:29:8","nodeType":"YulFunctionCall","src":"1053:29:8"},"variableNames":[{"name":"value0","nativeSrc":"1043:6:8","nodeType":"YulIdentifier","src":"1043:6:8"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"902:186:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"938:9:8","nodeType":"YulTypedName","src":"938:9:8","type":""},{"name":"dataEnd","nativeSrc":"949:7:8","nodeType":"YulTypedName","src":"949:7:8","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"961:6:8","nodeType":"YulTypedName","src":"961:6:8","type":""}],"src":"902:186:8"},{"body":{"nativeSrc":"1194:76:8","nodeType":"YulBlock","src":"1194:76:8","statements":[{"nativeSrc":"1204:26:8","nodeType":"YulAssignment","src":"1204:26:8","value":{"arguments":[{"name":"headStart","nativeSrc":"1216:9:8","nodeType":"YulIdentifier","src":"1216:9:8"},{"kind":"number","nativeSrc":"1227:2:8","nodeType":"YulLiteral","src":"1227:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1212:3:8","nodeType":"YulIdentifier","src":"1212:3:8"},"nativeSrc":"1212:18:8","nodeType":"YulFunctionCall","src":"1212:18:8"},"variableNames":[{"name":"tail","nativeSrc":"1204:4:8","nodeType":"YulIdentifier","src":"1204:4:8"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1246:9:8","nodeType":"YulIdentifier","src":"1246:9:8"},{"name":"value0","nativeSrc":"1257:6:8","nodeType":"YulIdentifier","src":"1257:6:8"}],"functionName":{"name":"mstore","nativeSrc":"1239:6:8","nodeType":"YulIdentifier","src":"1239:6:8"},"nativeSrc":"1239:25:8","nodeType":"YulFunctionCall","src":"1239:25:8"},"nativeSrc":"1239:25:8","nodeType":"YulExpressionStatement","src":"1239:25:8"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"1093:177:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1163:9:8","nodeType":"YulTypedName","src":"1163:9:8","type":""},{"name":"value0","nativeSrc":"1174:6:8","nodeType":"YulTypedName","src":"1174:6:8","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1185:4:8","nodeType":"YulTypedName","src":"1185:4:8","type":""}],"src":"1093:177:8"},{"body":{"nativeSrc":"1416:715:8","nodeType":"YulBlock","src":"1416:715:8","statements":[{"body":{"nativeSrc":"1463:16:8","nodeType":"YulBlock","src":"1463:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1472:1:8","nodeType":"YulLiteral","src":"1472:1:8","type":"","value":"0"},{"kind":"number","nativeSrc":"1475:1:8","nodeType":"YulLiteral","src":"1475:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1465:6:8","nodeType":"YulIdentifier","src":"1465:6:8"},"nativeSrc":"1465:12:8","nodeType":"YulFunctionCall","src":"1465:12:8"},"nativeSrc":"1465:12:8","nodeType":"YulExpressionStatement","src":"1465:12:8"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1437:7:8","nodeType":"YulIdentifier","src":"1437:7:8"},{"name":"headStart","nativeSrc":"1446:9:8","nodeType":"YulIdentifier","src":"1446:9:8"}],"functionName":{"name":"sub","nativeSrc":"1433:3:8","nodeType":"YulIdentifier","src":"1433:3:8"},"nativeSrc":"1433:23:8","nodeType":"YulFunctionCall","src":"1433:23:8"},{"kind":"number","nativeSrc":"1458:3:8","nodeType":"YulLiteral","src":"1458:3:8","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"1429:3:8","nodeType":"YulIdentifier","src":"1429:3:8"},"nativeSrc":"1429:33:8","nodeType":"YulFunctionCall","src":"1429:33:8"},"nativeSrc":"1426:53:8","nodeType":"YulIf","src":"1426:53:8"},{"nativeSrc":"1488:37:8","nodeType":"YulVariableDeclaration","src":"1488:37:8","value":{"arguments":[{"name":"headStart","nativeSrc":"1515:9:8","nodeType":"YulIdentifier","src":"1515:9:8"}],"functionName":{"name":"calldataload","nativeSrc":"1502:12:8","nodeType":"YulIdentifier","src":"1502:12:8"},"nativeSrc":"1502:23:8","nodeType":"YulFunctionCall","src":"1502:23:8"},"variables":[{"name":"offset","nativeSrc":"1492:6:8","nodeType":"YulTypedName","src":"1492:6:8","type":""}]},{"body":{"nativeSrc":"1568:16:8","nodeType":"YulBlock","src":"1568:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1577:1:8","nodeType":"YulLiteral","src":"1577:1:8","type":"","value":"0"},{"kind":"number","nativeSrc":"1580:1:8","nodeType":"YulLiteral","src":"1580:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1570:6:8","nodeType":"YulIdentifier","src":"1570:6:8"},"nativeSrc":"1570:12:8","nodeType":"YulFunctionCall","src":"1570:12:8"},"nativeSrc":"1570:12:8","nodeType":"YulExpressionStatement","src":"1570:12:8"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"1540:6:8","nodeType":"YulIdentifier","src":"1540:6:8"},{"kind":"number","nativeSrc":"1548:18:8","nodeType":"YulLiteral","src":"1548:18:8","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1537:2:8","nodeType":"YulIdentifier","src":"1537:2:8"},"nativeSrc":"1537:30:8","nodeType":"YulFunctionCall","src":"1537:30:8"},"nativeSrc":"1534:50:8","nodeType":"YulIf","src":"1534:50:8"},{"nativeSrc":"1593:32:8","nodeType":"YulVariableDeclaration","src":"1593:32:8","value":{"arguments":[{"name":"headStart","nativeSrc":"1607:9:8","nodeType":"YulIdentifier","src":"1607:9:8"},{"name":"offset","nativeSrc":"1618:6:8","nodeType":"YulIdentifier","src":"1618:6:8"}],"functionName":{"name":"add","nativeSrc":"1603:3:8","nodeType":"YulIdentifier","src":"1603:3:8"},"nativeSrc":"1603:22:8","nodeType":"YulFunctionCall","src":"1603:22:8"},"variables":[{"name":"_1","nativeSrc":"1597:2:8","nodeType":"YulTypedName","src":"1597:2:8","type":""}]},{"body":{"nativeSrc":"1673:16:8","nodeType":"YulBlock","src":"1673:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1682:1:8","nodeType":"YulLiteral","src":"1682:1:8","type":"","value":"0"},{"kind":"number","nativeSrc":"1685:1:8","nodeType":"YulLiteral","src":"1685:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1675:6:8","nodeType":"YulIdentifier","src":"1675:6:8"},"nativeSrc":"1675:12:8","nodeType":"YulFunctionCall","src":"1675:12:8"},"nativeSrc":"1675:12:8","nodeType":"YulExpressionStatement","src":"1675:12:8"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"1652:2:8","nodeType":"YulIdentifier","src":"1652:2:8"},{"kind":"number","nativeSrc":"1656:4:8","nodeType":"YulLiteral","src":"1656:4:8","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"1648:3:8","nodeType":"YulIdentifier","src":"1648:3:8"},"nativeSrc":"1648:13:8","nodeType":"YulFunctionCall","src":"1648:13:8"},{"name":"dataEnd","nativeSrc":"1663:7:8","nodeType":"YulIdentifier","src":"1663:7:8"}],"functionName":{"name":"slt","nativeSrc":"1644:3:8","nodeType":"YulIdentifier","src":"1644:3:8"},"nativeSrc":"1644:27:8","nodeType":"YulFunctionCall","src":"1644:27:8"}],"functionName":{"name":"iszero","nativeSrc":"1637:6:8","nodeType":"YulIdentifier","src":"1637:6:8"},"nativeSrc":"1637:35:8","nodeType":"YulFunctionCall","src":"1637:35:8"},"nativeSrc":"1634:55:8","nodeType":"YulIf","src":"1634:55:8"},{"nativeSrc":"1698:30:8","nodeType":"YulVariableDeclaration","src":"1698:30:8","value":{"arguments":[{"name":"_1","nativeSrc":"1725:2:8","nodeType":"YulIdentifier","src":"1725:2:8"}],"functionName":{"name":"calldataload","nativeSrc":"1712:12:8","nodeType":"YulIdentifier","src":"1712:12:8"},"nativeSrc":"1712:16:8","nodeType":"YulFunctionCall","src":"1712:16:8"},"variables":[{"name":"length","nativeSrc":"1702:6:8","nodeType":"YulTypedName","src":"1702:6:8","type":""}]},{"body":{"nativeSrc":"1771:16:8","nodeType":"YulBlock","src":"1771:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1780:1:8","nodeType":"YulLiteral","src":"1780:1:8","type":"","value":"0"},{"kind":"number","nativeSrc":"1783:1:8","nodeType":"YulLiteral","src":"1783:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1773:6:8","nodeType":"YulIdentifier","src":"1773:6:8"},"nativeSrc":"1773:12:8","nodeType":"YulFunctionCall","src":"1773:12:8"},"nativeSrc":"1773:12:8","nodeType":"YulExpressionStatement","src":"1773:12:8"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"1743:6:8","nodeType":"YulIdentifier","src":"1743:6:8"},{"kind":"number","nativeSrc":"1751:18:8","nodeType":"YulLiteral","src":"1751:18:8","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1740:2:8","nodeType":"YulIdentifier","src":"1740:2:8"},"nativeSrc":"1740:30:8","nodeType":"YulFunctionCall","src":"1740:30:8"},"nativeSrc":"1737:50:8","nodeType":"YulIf","src":"1737:50:8"},{"body":{"nativeSrc":"1839:16:8","nodeType":"YulBlock","src":"1839:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1848:1:8","nodeType":"YulLiteral","src":"1848:1:8","type":"","value":"0"},{"kind":"number","nativeSrc":"1851:1:8","nodeType":"YulLiteral","src":"1851:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1841:6:8","nodeType":"YulIdentifier","src":"1841:6:8"},"nativeSrc":"1841:12:8","nodeType":"YulFunctionCall","src":"1841:12:8"},"nativeSrc":"1841:12:8","nodeType":"YulExpressionStatement","src":"1841:12:8"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"1810:2:8","nodeType":"YulIdentifier","src":"1810:2:8"},{"name":"length","nativeSrc":"1814:6:8","nodeType":"YulIdentifier","src":"1814:6:8"}],"functionName":{"name":"add","nativeSrc":"1806:3:8","nodeType":"YulIdentifier","src":"1806:3:8"},"nativeSrc":"1806:15:8","nodeType":"YulFunctionCall","src":"1806:15:8"},{"kind":"number","nativeSrc":"1823:4:8","nodeType":"YulLiteral","src":"1823:4:8","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1802:3:8","nodeType":"YulIdentifier","src":"1802:3:8"},"nativeSrc":"1802:26:8","nodeType":"YulFunctionCall","src":"1802:26:8"},{"name":"dataEnd","nativeSrc":"1830:7:8","nodeType":"YulIdentifier","src":"1830:7:8"}],"functionName":{"name":"gt","nativeSrc":"1799:2:8","nodeType":"YulIdentifier","src":"1799:2:8"},"nativeSrc":"1799:39:8","nodeType":"YulFunctionCall","src":"1799:39:8"},"nativeSrc":"1796:59:8","nodeType":"YulIf","src":"1796:59:8"},{"nativeSrc":"1864:23:8","nodeType":"YulAssignment","src":"1864:23:8","value":{"arguments":[{"name":"_1","nativeSrc":"1878:2:8","nodeType":"YulIdentifier","src":"1878:2:8"},{"kind":"number","nativeSrc":"1882:4:8","nodeType":"YulLiteral","src":"1882:4:8","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1874:3:8","nodeType":"YulIdentifier","src":"1874:3:8"},"nativeSrc":"1874:13:8","nodeType":"YulFunctionCall","src":"1874:13:8"},"variableNames":[{"name":"value0","nativeSrc":"1864:6:8","nodeType":"YulIdentifier","src":"1864:6:8"}]},{"nativeSrc":"1896:16:8","nodeType":"YulAssignment","src":"1896:16:8","value":{"name":"length","nativeSrc":"1906:6:8","nodeType":"YulIdentifier","src":"1906:6:8"},"variableNames":[{"name":"value1","nativeSrc":"1896:6:8","nodeType":"YulIdentifier","src":"1896:6:8"}]},{"nativeSrc":"1921:50:8","nodeType":"YulAssignment","src":"1921:50:8","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1954:9:8","nodeType":"YulIdentifier","src":"1954:9:8"},{"kind":"number","nativeSrc":"1965:4:8","nodeType":"YulLiteral","src":"1965:4:8","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1950:3:8","nodeType":"YulIdentifier","src":"1950:3:8"},"nativeSrc":"1950:20:8","nodeType":"YulFunctionCall","src":"1950:20:8"}],"functionName":{"name":"abi_decode_address","nativeSrc":"1931:18:8","nodeType":"YulIdentifier","src":"1931:18:8"},"nativeSrc":"1931:40:8","nodeType":"YulFunctionCall","src":"1931:40:8"},"variableNames":[{"name":"value2","nativeSrc":"1921:6:8","nodeType":"YulIdentifier","src":"1921:6:8"}]},{"nativeSrc":"1980:48:8","nodeType":"YulAssignment","src":"1980:48:8","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2013:9:8","nodeType":"YulIdentifier","src":"2013:9:8"},{"kind":"number","nativeSrc":"2024:2:8","nodeType":"YulLiteral","src":"2024:2:8","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2009:3:8","nodeType":"YulIdentifier","src":"2009:3:8"},"nativeSrc":"2009:18:8","nodeType":"YulFunctionCall","src":"2009:18:8"}],"functionName":{"name":"abi_decode_address","nativeSrc":"1990:18:8","nodeType":"YulIdentifier","src":"1990:18:8"},"nativeSrc":"1990:38:8","nodeType":"YulFunctionCall","src":"1990:38:8"},"variableNames":[{"name":"value3","nativeSrc":"1980:6:8","nodeType":"YulIdentifier","src":"1980:6:8"}]},{"nativeSrc":"2037:14:8","nodeType":"YulVariableDeclaration","src":"2037:14:8","value":{"kind":"number","nativeSrc":"2050:1:8","nodeType":"YulLiteral","src":"2050:1:8","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"2041:5:8","nodeType":"YulTypedName","src":"2041:5:8","type":""}]},{"nativeSrc":"2060:41:8","nodeType":"YulAssignment","src":"2060:41:8","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2086:9:8","nodeType":"YulIdentifier","src":"2086:9:8"},{"kind":"number","nativeSrc":"2097:2:8","nodeType":"YulLiteral","src":"2097:2:8","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"2082:3:8","nodeType":"YulIdentifier","src":"2082:3:8"},"nativeSrc":"2082:18:8","nodeType":"YulFunctionCall","src":"2082:18:8"}],"functionName":{"name":"calldataload","nativeSrc":"2069:12:8","nodeType":"YulIdentifier","src":"2069:12:8"},"nativeSrc":"2069:32:8","nodeType":"YulFunctionCall","src":"2069:32:8"},"variableNames":[{"name":"value","nativeSrc":"2060:5:8","nodeType":"YulIdentifier","src":"2060:5:8"}]},{"nativeSrc":"2110:15:8","nodeType":"YulAssignment","src":"2110:15:8","value":{"name":"value","nativeSrc":"2120:5:8","nodeType":"YulIdentifier","src":"2120:5:8"},"variableNames":[{"name":"value4","nativeSrc":"2110:6:8","nodeType":"YulIdentifier","src":"2110:6:8"}]}]},"name":"abi_decode_tuple_t_string_calldata_ptrt_addresst_addresst_uint256","nativeSrc":"1275:856:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1350:9:8","nodeType":"YulTypedName","src":"1350:9:8","type":""},{"name":"dataEnd","nativeSrc":"1361:7:8","nodeType":"YulTypedName","src":"1361:7:8","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1373:6:8","nodeType":"YulTypedName","src":"1373:6:8","type":""},{"name":"value1","nativeSrc":"1381:6:8","nodeType":"YulTypedName","src":"1381:6:8","type":""},{"name":"value2","nativeSrc":"1389:6:8","nodeType":"YulTypedName","src":"1389:6:8","type":""},{"name":"value3","nativeSrc":"1397:6:8","nodeType":"YulTypedName","src":"1397:6:8","type":""},{"name":"value4","nativeSrc":"1405:6:8","nodeType":"YulTypedName","src":"1405:6:8","type":""}],"src":"1275:856:8"},{"body":{"nativeSrc":"2206:156:8","nodeType":"YulBlock","src":"2206:156:8","statements":[{"body":{"nativeSrc":"2252:16:8","nodeType":"YulBlock","src":"2252:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2261:1:8","nodeType":"YulLiteral","src":"2261:1:8","type":"","value":"0"},{"kind":"number","nativeSrc":"2264:1:8","nodeType":"YulLiteral","src":"2264:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2254:6:8","nodeType":"YulIdentifier","src":"2254:6:8"},"nativeSrc":"2254:12:8","nodeType":"YulFunctionCall","src":"2254:12:8"},"nativeSrc":"2254:12:8","nodeType":"YulExpressionStatement","src":"2254:12:8"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2227:7:8","nodeType":"YulIdentifier","src":"2227:7:8"},{"name":"headStart","nativeSrc":"2236:9:8","nodeType":"YulIdentifier","src":"2236:9:8"}],"functionName":{"name":"sub","nativeSrc":"2223:3:8","nodeType":"YulIdentifier","src":"2223:3:8"},"nativeSrc":"2223:23:8","nodeType":"YulFunctionCall","src":"2223:23:8"},{"kind":"number","nativeSrc":"2248:2:8","nodeType":"YulLiteral","src":"2248:2:8","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2219:3:8","nodeType":"YulIdentifier","src":"2219:3:8"},"nativeSrc":"2219:32:8","nodeType":"YulFunctionCall","src":"2219:32:8"},"nativeSrc":"2216:52:8","nodeType":"YulIf","src":"2216:52:8"},{"nativeSrc":"2277:14:8","nodeType":"YulVariableDeclaration","src":"2277:14:8","value":{"kind":"number","nativeSrc":"2290:1:8","nodeType":"YulLiteral","src":"2290:1:8","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"2281:5:8","nodeType":"YulTypedName","src":"2281:5:8","type":""}]},{"nativeSrc":"2300:32:8","nodeType":"YulAssignment","src":"2300:32:8","value":{"arguments":[{"name":"headStart","nativeSrc":"2322:9:8","nodeType":"YulIdentifier","src":"2322:9:8"}],"functionName":{"name":"calldataload","nativeSrc":"2309:12:8","nodeType":"YulIdentifier","src":"2309:12:8"},"nativeSrc":"2309:23:8","nodeType":"YulFunctionCall","src":"2309:23:8"},"variableNames":[{"name":"value","nativeSrc":"2300:5:8","nodeType":"YulIdentifier","src":"2300:5:8"}]},{"nativeSrc":"2341:15:8","nodeType":"YulAssignment","src":"2341:15:8","value":{"name":"value","nativeSrc":"2351:5:8","nodeType":"YulIdentifier","src":"2351:5:8"},"variableNames":[{"name":"value0","nativeSrc":"2341:6:8","nodeType":"YulIdentifier","src":"2341:6:8"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"2136:226:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2172:9:8","nodeType":"YulTypedName","src":"2172:9:8","type":""},{"name":"dataEnd","nativeSrc":"2183:7:8","nodeType":"YulTypedName","src":"2183:7:8","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2195:6:8","nodeType":"YulTypedName","src":"2195:6:8","type":""}],"src":"2136:226:8"},{"body":{"nativeSrc":"2518:486:8","nodeType":"YulBlock","src":"2518:486:8","statements":[{"nativeSrc":"2528:32:8","nodeType":"YulVariableDeclaration","src":"2528:32:8","value":{"arguments":[{"name":"headStart","nativeSrc":"2546:9:8","nodeType":"YulIdentifier","src":"2546:9:8"},{"kind":"number","nativeSrc":"2557:2:8","nodeType":"YulLiteral","src":"2557:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2542:3:8","nodeType":"YulIdentifier","src":"2542:3:8"},"nativeSrc":"2542:18:8","nodeType":"YulFunctionCall","src":"2542:18:8"},"variables":[{"name":"tail_1","nativeSrc":"2532:6:8","nodeType":"YulTypedName","src":"2532:6:8","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2576:9:8","nodeType":"YulIdentifier","src":"2576:9:8"},{"kind":"number","nativeSrc":"2587:2:8","nodeType":"YulLiteral","src":"2587:2:8","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"2569:6:8","nodeType":"YulIdentifier","src":"2569:6:8"},"nativeSrc":"2569:21:8","nodeType":"YulFunctionCall","src":"2569:21:8"},"nativeSrc":"2569:21:8","nodeType":"YulExpressionStatement","src":"2569:21:8"},{"nativeSrc":"2599:17:8","nodeType":"YulVariableDeclaration","src":"2599:17:8","value":{"name":"tail_1","nativeSrc":"2610:6:8","nodeType":"YulIdentifier","src":"2610:6:8"},"variables":[{"name":"pos","nativeSrc":"2603:3:8","nodeType":"YulTypedName","src":"2603:3:8","type":""}]},{"nativeSrc":"2625:27:8","nodeType":"YulVariableDeclaration","src":"2625:27:8","value":{"arguments":[{"name":"value0","nativeSrc":"2645:6:8","nodeType":"YulIdentifier","src":"2645:6:8"}],"functionName":{"name":"mload","nativeSrc":"2639:5:8","nodeType":"YulIdentifier","src":"2639:5:8"},"nativeSrc":"2639:13:8","nodeType":"YulFunctionCall","src":"2639:13:8"},"variables":[{"name":"length","nativeSrc":"2629:6:8","nodeType":"YulTypedName","src":"2629:6:8","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nativeSrc":"2668:6:8","nodeType":"YulIdentifier","src":"2668:6:8"},{"name":"length","nativeSrc":"2676:6:8","nodeType":"YulIdentifier","src":"2676:6:8"}],"functionName":{"name":"mstore","nativeSrc":"2661:6:8","nodeType":"YulIdentifier","src":"2661:6:8"},"nativeSrc":"2661:22:8","nodeType":"YulFunctionCall","src":"2661:22:8"},"nativeSrc":"2661:22:8","nodeType":"YulExpressionStatement","src":"2661:22:8"},{"nativeSrc":"2692:25:8","nodeType":"YulAssignment","src":"2692:25:8","value":{"arguments":[{"name":"headStart","nativeSrc":"2703:9:8","nodeType":"YulIdentifier","src":"2703:9:8"},{"kind":"number","nativeSrc":"2714:2:8","nodeType":"YulLiteral","src":"2714:2:8","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2699:3:8","nodeType":"YulIdentifier","src":"2699:3:8"},"nativeSrc":"2699:18:8","nodeType":"YulFunctionCall","src":"2699:18:8"},"variableNames":[{"name":"pos","nativeSrc":"2692:3:8","nodeType":"YulIdentifier","src":"2692:3:8"}]},{"nativeSrc":"2726:29:8","nodeType":"YulVariableDeclaration","src":"2726:29:8","value":{"arguments":[{"name":"value0","nativeSrc":"2744:6:8","nodeType":"YulIdentifier","src":"2744:6:8"},{"kind":"number","nativeSrc":"2752:2:8","nodeType":"YulLiteral","src":"2752:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2740:3:8","nodeType":"YulIdentifier","src":"2740:3:8"},"nativeSrc":"2740:15:8","nodeType":"YulFunctionCall","src":"2740:15:8"},"variables":[{"name":"srcPtr","nativeSrc":"2730:6:8","nodeType":"YulTypedName","src":"2730:6:8","type":""}]},{"nativeSrc":"2764:10:8","nodeType":"YulVariableDeclaration","src":"2764:10:8","value":{"kind":"number","nativeSrc":"2773:1:8","nodeType":"YulLiteral","src":"2773:1:8","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"2768:1:8","nodeType":"YulTypedName","src":"2768:1:8","type":""}]},{"body":{"nativeSrc":"2832:146:8","nodeType":"YulBlock","src":"2832:146:8","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"2853:3:8","nodeType":"YulIdentifier","src":"2853:3:8"},{"arguments":[{"arguments":[{"name":"srcPtr","nativeSrc":"2868:6:8","nodeType":"YulIdentifier","src":"2868:6:8"}],"functionName":{"name":"mload","nativeSrc":"2862:5:8","nodeType":"YulIdentifier","src":"2862:5:8"},"nativeSrc":"2862:13:8","nodeType":"YulFunctionCall","src":"2862:13:8"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"2885:3:8","nodeType":"YulLiteral","src":"2885:3:8","type":"","value":"160"},{"kind":"number","nativeSrc":"2890:1:8","nodeType":"YulLiteral","src":"2890:1:8","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"2881:3:8","nodeType":"YulIdentifier","src":"2881:3:8"},"nativeSrc":"2881:11:8","nodeType":"YulFunctionCall","src":"2881:11:8"},{"kind":"number","nativeSrc":"2894:1:8","nodeType":"YulLiteral","src":"2894:1:8","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"2877:3:8","nodeType":"YulIdentifier","src":"2877:3:8"},"nativeSrc":"2877:19:8","nodeType":"YulFunctionCall","src":"2877:19:8"}],"functionName":{"name":"and","nativeSrc":"2858:3:8","nodeType":"YulIdentifier","src":"2858:3:8"},"nativeSrc":"2858:39:8","nodeType":"YulFunctionCall","src":"2858:39:8"}],"functionName":{"name":"mstore","nativeSrc":"2846:6:8","nodeType":"YulIdentifier","src":"2846:6:8"},"nativeSrc":"2846:52:8","nodeType":"YulFunctionCall","src":"2846:52:8"},"nativeSrc":"2846:52:8","nodeType":"YulExpressionStatement","src":"2846:52:8"},{"nativeSrc":"2911:19:8","nodeType":"YulAssignment","src":"2911:19:8","value":{"arguments":[{"name":"pos","nativeSrc":"2922:3:8","nodeType":"YulIdentifier","src":"2922:3:8"},{"kind":"number","nativeSrc":"2927:2:8","nodeType":"YulLiteral","src":"2927:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2918:3:8","nodeType":"YulIdentifier","src":"2918:3:8"},"nativeSrc":"2918:12:8","nodeType":"YulFunctionCall","src":"2918:12:8"},"variableNames":[{"name":"pos","nativeSrc":"2911:3:8","nodeType":"YulIdentifier","src":"2911:3:8"}]},{"nativeSrc":"2943:25:8","nodeType":"YulAssignment","src":"2943:25:8","value":{"arguments":[{"name":"srcPtr","nativeSrc":"2957:6:8","nodeType":"YulIdentifier","src":"2957:6:8"},{"kind":"number","nativeSrc":"2965:2:8","nodeType":"YulLiteral","src":"2965:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2953:3:8","nodeType":"YulIdentifier","src":"2953:3:8"},"nativeSrc":"2953:15:8","nodeType":"YulFunctionCall","src":"2953:15:8"},"variableNames":[{"name":"srcPtr","nativeSrc":"2943:6:8","nodeType":"YulIdentifier","src":"2943:6:8"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"2794:1:8","nodeType":"YulIdentifier","src":"2794:1:8"},{"name":"length","nativeSrc":"2797:6:8","nodeType":"YulIdentifier","src":"2797:6:8"}],"functionName":{"name":"lt","nativeSrc":"2791:2:8","nodeType":"YulIdentifier","src":"2791:2:8"},"nativeSrc":"2791:13:8","nodeType":"YulFunctionCall","src":"2791:13:8"},"nativeSrc":"2783:195:8","nodeType":"YulForLoop","post":{"nativeSrc":"2805:18:8","nodeType":"YulBlock","src":"2805:18:8","statements":[{"nativeSrc":"2807:14:8","nodeType":"YulAssignment","src":"2807:14:8","value":{"arguments":[{"name":"i","nativeSrc":"2816:1:8","nodeType":"YulIdentifier","src":"2816:1:8"},{"kind":"number","nativeSrc":"2819:1:8","nodeType":"YulLiteral","src":"2819:1:8","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"2812:3:8","nodeType":"YulIdentifier","src":"2812:3:8"},"nativeSrc":"2812:9:8","nodeType":"YulFunctionCall","src":"2812:9:8"},"variableNames":[{"name":"i","nativeSrc":"2807:1:8","nodeType":"YulIdentifier","src":"2807:1:8"}]}]},"pre":{"nativeSrc":"2787:3:8","nodeType":"YulBlock","src":"2787:3:8","statements":[]},"src":"2783:195:8"},{"nativeSrc":"2987:11:8","nodeType":"YulAssignment","src":"2987:11:8","value":{"name":"pos","nativeSrc":"2995:3:8","nodeType":"YulIdentifier","src":"2995:3:8"},"variableNames":[{"name":"tail","nativeSrc":"2987:4:8","nodeType":"YulIdentifier","src":"2987:4:8"}]}]},"name":"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"2367:637:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2487:9:8","nodeType":"YulTypedName","src":"2487:9:8","type":""},{"name":"value0","nativeSrc":"2498:6:8","nodeType":"YulTypedName","src":"2498:6:8","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2509:4:8","nodeType":"YulTypedName","src":"2509:4:8","type":""}],"src":"2367:637:8"},{"body":{"nativeSrc":"3096:213:8","nodeType":"YulBlock","src":"3096:213:8","statements":[{"body":{"nativeSrc":"3142:16:8","nodeType":"YulBlock","src":"3142:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3151:1:8","nodeType":"YulLiteral","src":"3151:1:8","type":"","value":"0"},{"kind":"number","nativeSrc":"3154:1:8","nodeType":"YulLiteral","src":"3154:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3144:6:8","nodeType":"YulIdentifier","src":"3144:6:8"},"nativeSrc":"3144:12:8","nodeType":"YulFunctionCall","src":"3144:12:8"},"nativeSrc":"3144:12:8","nodeType":"YulExpressionStatement","src":"3144:12:8"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3117:7:8","nodeType":"YulIdentifier","src":"3117:7:8"},{"name":"headStart","nativeSrc":"3126:9:8","nodeType":"YulIdentifier","src":"3126:9:8"}],"functionName":{"name":"sub","nativeSrc":"3113:3:8","nodeType":"YulIdentifier","src":"3113:3:8"},"nativeSrc":"3113:23:8","nodeType":"YulFunctionCall","src":"3113:23:8"},{"kind":"number","nativeSrc":"3138:2:8","nodeType":"YulLiteral","src":"3138:2:8","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"3109:3:8","nodeType":"YulIdentifier","src":"3109:3:8"},"nativeSrc":"3109:32:8","nodeType":"YulFunctionCall","src":"3109:32:8"},"nativeSrc":"3106:52:8","nodeType":"YulIf","src":"3106:52:8"},{"nativeSrc":"3167:14:8","nodeType":"YulVariableDeclaration","src":"3167:14:8","value":{"kind":"number","nativeSrc":"3180:1:8","nodeType":"YulLiteral","src":"3180:1:8","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"3171:5:8","nodeType":"YulTypedName","src":"3171:5:8","type":""}]},{"nativeSrc":"3190:32:8","nodeType":"YulAssignment","src":"3190:32:8","value":{"arguments":[{"name":"headStart","nativeSrc":"3212:9:8","nodeType":"YulIdentifier","src":"3212:9:8"}],"functionName":{"name":"calldataload","nativeSrc":"3199:12:8","nodeType":"YulIdentifier","src":"3199:12:8"},"nativeSrc":"3199:23:8","nodeType":"YulFunctionCall","src":"3199:23:8"},"variableNames":[{"name":"value","nativeSrc":"3190:5:8","nodeType":"YulIdentifier","src":"3190:5:8"}]},{"nativeSrc":"3231:15:8","nodeType":"YulAssignment","src":"3231:15:8","value":{"name":"value","nativeSrc":"3241:5:8","nodeType":"YulIdentifier","src":"3241:5:8"},"variableNames":[{"name":"value0","nativeSrc":"3231:6:8","nodeType":"YulIdentifier","src":"3231:6:8"}]},{"nativeSrc":"3255:48:8","nodeType":"YulAssignment","src":"3255:48:8","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3288:9:8","nodeType":"YulIdentifier","src":"3288:9:8"},{"kind":"number","nativeSrc":"3299:2:8","nodeType":"YulLiteral","src":"3299:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3284:3:8","nodeType":"YulIdentifier","src":"3284:3:8"},"nativeSrc":"3284:18:8","nodeType":"YulFunctionCall","src":"3284:18:8"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3265:18:8","nodeType":"YulIdentifier","src":"3265:18:8"},"nativeSrc":"3265:38:8","nodeType":"YulFunctionCall","src":"3265:38:8"},"variableNames":[{"name":"value1","nativeSrc":"3255:6:8","nodeType":"YulIdentifier","src":"3255:6:8"}]}]},"name":"abi_decode_tuple_t_uint256t_address","nativeSrc":"3009:300:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3054:9:8","nodeType":"YulTypedName","src":"3054:9:8","type":""},{"name":"dataEnd","nativeSrc":"3065:7:8","nodeType":"YulTypedName","src":"3065:7:8","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3077:6:8","nodeType":"YulTypedName","src":"3077:6:8","type":""},{"name":"value1","nativeSrc":"3085:6:8","nodeType":"YulTypedName","src":"3085:6:8","type":""}],"src":"3009:300:8"},{"body":{"nativeSrc":"3384:156:8","nodeType":"YulBlock","src":"3384:156:8","statements":[{"body":{"nativeSrc":"3430:16:8","nodeType":"YulBlock","src":"3430:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3439:1:8","nodeType":"YulLiteral","src":"3439:1:8","type":"","value":"0"},{"kind":"number","nativeSrc":"3442:1:8","nodeType":"YulLiteral","src":"3442:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3432:6:8","nodeType":"YulIdentifier","src":"3432:6:8"},"nativeSrc":"3432:12:8","nodeType":"YulFunctionCall","src":"3432:12:8"},"nativeSrc":"3432:12:8","nodeType":"YulExpressionStatement","src":"3432:12:8"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3405:7:8","nodeType":"YulIdentifier","src":"3405:7:8"},{"name":"headStart","nativeSrc":"3414:9:8","nodeType":"YulIdentifier","src":"3414:9:8"}],"functionName":{"name":"sub","nativeSrc":"3401:3:8","nodeType":"YulIdentifier","src":"3401:3:8"},"nativeSrc":"3401:23:8","nodeType":"YulFunctionCall","src":"3401:23:8"},{"kind":"number","nativeSrc":"3426:2:8","nodeType":"YulLiteral","src":"3426:2:8","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"3397:3:8","nodeType":"YulIdentifier","src":"3397:3:8"},"nativeSrc":"3397:32:8","nodeType":"YulFunctionCall","src":"3397:32:8"},"nativeSrc":"3394:52:8","nodeType":"YulIf","src":"3394:52:8"},{"nativeSrc":"3455:14:8","nodeType":"YulVariableDeclaration","src":"3455:14:8","value":{"kind":"number","nativeSrc":"3468:1:8","nodeType":"YulLiteral","src":"3468:1:8","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"3459:5:8","nodeType":"YulTypedName","src":"3459:5:8","type":""}]},{"nativeSrc":"3478:32:8","nodeType":"YulAssignment","src":"3478:32:8","value":{"arguments":[{"name":"headStart","nativeSrc":"3500:9:8","nodeType":"YulIdentifier","src":"3500:9:8"}],"functionName":{"name":"calldataload","nativeSrc":"3487:12:8","nodeType":"YulIdentifier","src":"3487:12:8"},"nativeSrc":"3487:23:8","nodeType":"YulFunctionCall","src":"3487:23:8"},"variableNames":[{"name":"value","nativeSrc":"3478:5:8","nodeType":"YulIdentifier","src":"3478:5:8"}]},{"nativeSrc":"3519:15:8","nodeType":"YulAssignment","src":"3519:15:8","value":{"name":"value","nativeSrc":"3529:5:8","nodeType":"YulIdentifier","src":"3529:5:8"},"variableNames":[{"name":"value0","nativeSrc":"3519:6:8","nodeType":"YulIdentifier","src":"3519:6:8"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"3314:226:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3350:9:8","nodeType":"YulTypedName","src":"3350:9:8","type":""},{"name":"dataEnd","nativeSrc":"3361:7:8","nodeType":"YulTypedName","src":"3361:7:8","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3373:6:8","nodeType":"YulTypedName","src":"3373:6:8","type":""}],"src":"3314:226:8"},{"body":{"nativeSrc":"3690:341:8","nodeType":"YulBlock","src":"3690:341:8","statements":[{"nativeSrc":"3700:27:8","nodeType":"YulAssignment","src":"3700:27:8","value":{"arguments":[{"name":"headStart","nativeSrc":"3712:9:8","nodeType":"YulIdentifier","src":"3712:9:8"},{"kind":"number","nativeSrc":"3723:3:8","nodeType":"YulLiteral","src":"3723:3:8","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"3708:3:8","nodeType":"YulIdentifier","src":"3708:3:8"},"nativeSrc":"3708:19:8","nodeType":"YulFunctionCall","src":"3708:19:8"},"variableNames":[{"name":"tail","nativeSrc":"3700:4:8","nodeType":"YulIdentifier","src":"3700:4:8"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3743:9:8","nodeType":"YulIdentifier","src":"3743:9:8"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"3764:6:8","nodeType":"YulIdentifier","src":"3764:6:8"}],"functionName":{"name":"mload","nativeSrc":"3758:5:8","nodeType":"YulIdentifier","src":"3758:5:8"},"nativeSrc":"3758:13:8","nodeType":"YulFunctionCall","src":"3758:13:8"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"3781:3:8","nodeType":"YulLiteral","src":"3781:3:8","type":"","value":"160"},{"kind":"number","nativeSrc":"3786:1:8","nodeType":"YulLiteral","src":"3786:1:8","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"3777:3:8","nodeType":"YulIdentifier","src":"3777:3:8"},"nativeSrc":"3777:11:8","nodeType":"YulFunctionCall","src":"3777:11:8"},{"kind":"number","nativeSrc":"3790:1:8","nodeType":"YulLiteral","src":"3790:1:8","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"3773:3:8","nodeType":"YulIdentifier","src":"3773:3:8"},"nativeSrc":"3773:19:8","nodeType":"YulFunctionCall","src":"3773:19:8"}],"functionName":{"name":"and","nativeSrc":"3754:3:8","nodeType":"YulIdentifier","src":"3754:3:8"},"nativeSrc":"3754:39:8","nodeType":"YulFunctionCall","src":"3754:39:8"}],"functionName":{"name":"mstore","nativeSrc":"3736:6:8","nodeType":"YulIdentifier","src":"3736:6:8"},"nativeSrc":"3736:58:8","nodeType":"YulFunctionCall","src":"3736:58:8"},"nativeSrc":"3736:58:8","nodeType":"YulExpressionStatement","src":"3736:58:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3814:9:8","nodeType":"YulIdentifier","src":"3814:9:8"},{"kind":"number","nativeSrc":"3825:4:8","nodeType":"YulLiteral","src":"3825:4:8","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3810:3:8","nodeType":"YulIdentifier","src":"3810:3:8"},"nativeSrc":"3810:20:8","nodeType":"YulFunctionCall","src":"3810:20:8"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"3846:6:8","nodeType":"YulIdentifier","src":"3846:6:8"},{"kind":"number","nativeSrc":"3854:4:8","nodeType":"YulLiteral","src":"3854:4:8","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3842:3:8","nodeType":"YulIdentifier","src":"3842:3:8"},"nativeSrc":"3842:17:8","nodeType":"YulFunctionCall","src":"3842:17:8"}],"functionName":{"name":"mload","nativeSrc":"3836:5:8","nodeType":"YulIdentifier","src":"3836:5:8"},"nativeSrc":"3836:24:8","nodeType":"YulFunctionCall","src":"3836:24:8"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"3870:3:8","nodeType":"YulLiteral","src":"3870:3:8","type":"","value":"160"},{"kind":"number","nativeSrc":"3875:1:8","nodeType":"YulLiteral","src":"3875:1:8","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"3866:3:8","nodeType":"YulIdentifier","src":"3866:3:8"},"nativeSrc":"3866:11:8","nodeType":"YulFunctionCall","src":"3866:11:8"},{"kind":"number","nativeSrc":"3879:1:8","nodeType":"YulLiteral","src":"3879:1:8","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"3862:3:8","nodeType":"YulIdentifier","src":"3862:3:8"},"nativeSrc":"3862:19:8","nodeType":"YulFunctionCall","src":"3862:19:8"}],"functionName":{"name":"and","nativeSrc":"3832:3:8","nodeType":"YulIdentifier","src":"3832:3:8"},"nativeSrc":"3832:50:8","nodeType":"YulFunctionCall","src":"3832:50:8"}],"functionName":{"name":"mstore","nativeSrc":"3803:6:8","nodeType":"YulIdentifier","src":"3803:6:8"},"nativeSrc":"3803:80:8","nodeType":"YulFunctionCall","src":"3803:80:8"},"nativeSrc":"3803:80:8","nodeType":"YulExpressionStatement","src":"3803:80:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3903:9:8","nodeType":"YulIdentifier","src":"3903:9:8"},{"kind":"number","nativeSrc":"3914:4:8","nodeType":"YulLiteral","src":"3914:4:8","type":"","value":"0x40"}],"functionName":{"name":"add","nativeSrc":"3899:3:8","nodeType":"YulIdentifier","src":"3899:3:8"},"nativeSrc":"3899:20:8","nodeType":"YulFunctionCall","src":"3899:20:8"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"3931:6:8","nodeType":"YulIdentifier","src":"3931:6:8"},{"kind":"number","nativeSrc":"3939:4:8","nodeType":"YulLiteral","src":"3939:4:8","type":"","value":"0x40"}],"functionName":{"name":"add","nativeSrc":"3927:3:8","nodeType":"YulIdentifier","src":"3927:3:8"},"nativeSrc":"3927:17:8","nodeType":"YulFunctionCall","src":"3927:17:8"}],"functionName":{"name":"mload","nativeSrc":"3921:5:8","nodeType":"YulIdentifier","src":"3921:5:8"},"nativeSrc":"3921:24:8","nodeType":"YulFunctionCall","src":"3921:24:8"}],"functionName":{"name":"mstore","nativeSrc":"3892:6:8","nodeType":"YulIdentifier","src":"3892:6:8"},"nativeSrc":"3892:54:8","nodeType":"YulFunctionCall","src":"3892:54:8"},"nativeSrc":"3892:54:8","nodeType":"YulExpressionStatement","src":"3892:54:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3966:9:8","nodeType":"YulIdentifier","src":"3966:9:8"},{"kind":"number","nativeSrc":"3977:4:8","nodeType":"YulLiteral","src":"3977:4:8","type":"","value":"0x60"}],"functionName":{"name":"add","nativeSrc":"3962:3:8","nodeType":"YulIdentifier","src":"3962:3:8"},"nativeSrc":"3962:20:8","nodeType":"YulFunctionCall","src":"3962:20:8"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"4008:6:8","nodeType":"YulIdentifier","src":"4008:6:8"},{"kind":"number","nativeSrc":"4016:4:8","nodeType":"YulLiteral","src":"4016:4:8","type":"","value":"0x60"}],"functionName":{"name":"add","nativeSrc":"4004:3:8","nodeType":"YulIdentifier","src":"4004:3:8"},"nativeSrc":"4004:17:8","nodeType":"YulFunctionCall","src":"4004:17:8"}],"functionName":{"name":"mload","nativeSrc":"3998:5:8","nodeType":"YulIdentifier","src":"3998:5:8"},"nativeSrc":"3998:24:8","nodeType":"YulFunctionCall","src":"3998:24:8"}],"functionName":{"name":"iszero","nativeSrc":"3991:6:8","nodeType":"YulIdentifier","src":"3991:6:8"},"nativeSrc":"3991:32:8","nodeType":"YulFunctionCall","src":"3991:32:8"}],"functionName":{"name":"iszero","nativeSrc":"3984:6:8","nodeType":"YulIdentifier","src":"3984:6:8"},"nativeSrc":"3984:40:8","nodeType":"YulFunctionCall","src":"3984:40:8"}],"functionName":{"name":"mstore","nativeSrc":"3955:6:8","nodeType":"YulIdentifier","src":"3955:6:8"},"nativeSrc":"3955:70:8","nodeType":"YulFunctionCall","src":"3955:70:8"},"nativeSrc":"3955:70:8","nodeType":"YulExpressionStatement","src":"3955:70:8"}]},"name":"abi_encode_tuple_t_struct$_Game_$5052_memory_ptr__to_t_struct$_Game_$5052_memory_ptr__fromStack_reversed","nativeSrc":"3545:486:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3659:9:8","nodeType":"YulTypedName","src":"3659:9:8","type":""},{"name":"value0","nativeSrc":"3670:6:8","nodeType":"YulTypedName","src":"3670:6:8","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3681:4:8","nodeType":"YulTypedName","src":"3681:4:8","type":""}],"src":"3545:486:8"},{"body":{"nativeSrc":"4137:102:8","nodeType":"YulBlock","src":"4137:102:8","statements":[{"nativeSrc":"4147:26:8","nodeType":"YulAssignment","src":"4147:26:8","value":{"arguments":[{"name":"headStart","nativeSrc":"4159:9:8","nodeType":"YulIdentifier","src":"4159:9:8"},{"kind":"number","nativeSrc":"4170:2:8","nodeType":"YulLiteral","src":"4170:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4155:3:8","nodeType":"YulIdentifier","src":"4155:3:8"},"nativeSrc":"4155:18:8","nodeType":"YulFunctionCall","src":"4155:18:8"},"variableNames":[{"name":"tail","nativeSrc":"4147:4:8","nodeType":"YulIdentifier","src":"4147:4:8"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4189:9:8","nodeType":"YulIdentifier","src":"4189:9:8"},{"arguments":[{"name":"value0","nativeSrc":"4204:6:8","nodeType":"YulIdentifier","src":"4204:6:8"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"4220:3:8","nodeType":"YulLiteral","src":"4220:3:8","type":"","value":"160"},{"kind":"number","nativeSrc":"4225:1:8","nodeType":"YulLiteral","src":"4225:1:8","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"4216:3:8","nodeType":"YulIdentifier","src":"4216:3:8"},"nativeSrc":"4216:11:8","nodeType":"YulFunctionCall","src":"4216:11:8"},{"kind":"number","nativeSrc":"4229:1:8","nodeType":"YulLiteral","src":"4229:1:8","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"4212:3:8","nodeType":"YulIdentifier","src":"4212:3:8"},"nativeSrc":"4212:19:8","nodeType":"YulFunctionCall","src":"4212:19:8"}],"functionName":{"name":"and","nativeSrc":"4200:3:8","nodeType":"YulIdentifier","src":"4200:3:8"},"nativeSrc":"4200:32:8","nodeType":"YulFunctionCall","src":"4200:32:8"}],"functionName":{"name":"mstore","nativeSrc":"4182:6:8","nodeType":"YulIdentifier","src":"4182:6:8"},"nativeSrc":"4182:51:8","nodeType":"YulFunctionCall","src":"4182:51:8"},"nativeSrc":"4182:51:8","nodeType":"YulExpressionStatement","src":"4182:51:8"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"4036:203:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4106:9:8","nodeType":"YulTypedName","src":"4106:9:8","type":""},{"name":"value0","nativeSrc":"4117:6:8","nodeType":"YulTypedName","src":"4117:6:8","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4128:4:8","nodeType":"YulTypedName","src":"4128:4:8","type":""}],"src":"4036:203:8"},{"body":{"nativeSrc":"4331:213:8","nodeType":"YulBlock","src":"4331:213:8","statements":[{"body":{"nativeSrc":"4377:16:8","nodeType":"YulBlock","src":"4377:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4386:1:8","nodeType":"YulLiteral","src":"4386:1:8","type":"","value":"0"},{"kind":"number","nativeSrc":"4389:1:8","nodeType":"YulLiteral","src":"4389:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4379:6:8","nodeType":"YulIdentifier","src":"4379:6:8"},"nativeSrc":"4379:12:8","nodeType":"YulFunctionCall","src":"4379:12:8"},"nativeSrc":"4379:12:8","nodeType":"YulExpressionStatement","src":"4379:12:8"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4352:7:8","nodeType":"YulIdentifier","src":"4352:7:8"},{"name":"headStart","nativeSrc":"4361:9:8","nodeType":"YulIdentifier","src":"4361:9:8"}],"functionName":{"name":"sub","nativeSrc":"4348:3:8","nodeType":"YulIdentifier","src":"4348:3:8"},"nativeSrc":"4348:23:8","nodeType":"YulFunctionCall","src":"4348:23:8"},{"kind":"number","nativeSrc":"4373:2:8","nodeType":"YulLiteral","src":"4373:2:8","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"4344:3:8","nodeType":"YulIdentifier","src":"4344:3:8"},"nativeSrc":"4344:32:8","nodeType":"YulFunctionCall","src":"4344:32:8"},"nativeSrc":"4341:52:8","nodeType":"YulIf","src":"4341:52:8"},{"nativeSrc":"4402:39:8","nodeType":"YulAssignment","src":"4402:39:8","value":{"arguments":[{"name":"headStart","nativeSrc":"4431:9:8","nodeType":"YulIdentifier","src":"4431:9:8"}],"functionName":{"name":"abi_decode_address","nativeSrc":"4412:18:8","nodeType":"YulIdentifier","src":"4412:18:8"},"nativeSrc":"4412:29:8","nodeType":"YulFunctionCall","src":"4412:29:8"},"variableNames":[{"name":"value0","nativeSrc":"4402:6:8","nodeType":"YulIdentifier","src":"4402:6:8"}]},{"nativeSrc":"4450:14:8","nodeType":"YulVariableDeclaration","src":"4450:14:8","value":{"kind":"number","nativeSrc":"4463:1:8","nodeType":"YulLiteral","src":"4463:1:8","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"4454:5:8","nodeType":"YulTypedName","src":"4454:5:8","type":""}]},{"nativeSrc":"4473:41:8","nodeType":"YulAssignment","src":"4473:41:8","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4499:9:8","nodeType":"YulIdentifier","src":"4499:9:8"},{"kind":"number","nativeSrc":"4510:2:8","nodeType":"YulLiteral","src":"4510:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4495:3:8","nodeType":"YulIdentifier","src":"4495:3:8"},"nativeSrc":"4495:18:8","nodeType":"YulFunctionCall","src":"4495:18:8"}],"functionName":{"name":"calldataload","nativeSrc":"4482:12:8","nodeType":"YulIdentifier","src":"4482:12:8"},"nativeSrc":"4482:32:8","nodeType":"YulFunctionCall","src":"4482:32:8"},"variableNames":[{"name":"value","nativeSrc":"4473:5:8","nodeType":"YulIdentifier","src":"4473:5:8"}]},{"nativeSrc":"4523:15:8","nodeType":"YulAssignment","src":"4523:15:8","value":{"name":"value","nativeSrc":"4533:5:8","nodeType":"YulIdentifier","src":"4533:5:8"},"variableNames":[{"name":"value1","nativeSrc":"4523:6:8","nodeType":"YulIdentifier","src":"4523:6:8"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nativeSrc":"4244:300:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4289:9:8","nodeType":"YulTypedName","src":"4289:9:8","type":""},{"name":"dataEnd","nativeSrc":"4300:7:8","nodeType":"YulTypedName","src":"4300:7:8","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4312:6:8","nodeType":"YulTypedName","src":"4312:6:8","type":""},{"name":"value1","nativeSrc":"4320:6:8","nodeType":"YulTypedName","src":"4320:6:8","type":""}],"src":"4244:300:8"},{"body":{"nativeSrc":"4651:289:8","nodeType":"YulBlock","src":"4651:289:8","statements":[{"body":{"nativeSrc":"4697:16:8","nodeType":"YulBlock","src":"4697:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4706:1:8","nodeType":"YulLiteral","src":"4706:1:8","type":"","value":"0"},{"kind":"number","nativeSrc":"4709:1:8","nodeType":"YulLiteral","src":"4709:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4699:6:8","nodeType":"YulIdentifier","src":"4699:6:8"},"nativeSrc":"4699:12:8","nodeType":"YulFunctionCall","src":"4699:12:8"},"nativeSrc":"4699:12:8","nodeType":"YulExpressionStatement","src":"4699:12:8"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4672:7:8","nodeType":"YulIdentifier","src":"4672:7:8"},{"name":"headStart","nativeSrc":"4681:9:8","nodeType":"YulIdentifier","src":"4681:9:8"}],"functionName":{"name":"sub","nativeSrc":"4668:3:8","nodeType":"YulIdentifier","src":"4668:3:8"},"nativeSrc":"4668:23:8","nodeType":"YulFunctionCall","src":"4668:23:8"},{"kind":"number","nativeSrc":"4693:2:8","nodeType":"YulLiteral","src":"4693:2:8","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"4664:3:8","nodeType":"YulIdentifier","src":"4664:3:8"},"nativeSrc":"4664:32:8","nodeType":"YulFunctionCall","src":"4664:32:8"},"nativeSrc":"4661:52:8","nodeType":"YulIf","src":"4661:52:8"},{"nativeSrc":"4722:14:8","nodeType":"YulVariableDeclaration","src":"4722:14:8","value":{"kind":"number","nativeSrc":"4735:1:8","nodeType":"YulLiteral","src":"4735:1:8","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"4726:5:8","nodeType":"YulTypedName","src":"4726:5:8","type":""}]},{"nativeSrc":"4745:32:8","nodeType":"YulAssignment","src":"4745:32:8","value":{"arguments":[{"name":"headStart","nativeSrc":"4767:9:8","nodeType":"YulIdentifier","src":"4767:9:8"}],"functionName":{"name":"calldataload","nativeSrc":"4754:12:8","nodeType":"YulIdentifier","src":"4754:12:8"},"nativeSrc":"4754:23:8","nodeType":"YulFunctionCall","src":"4754:23:8"},"variableNames":[{"name":"value","nativeSrc":"4745:5:8","nodeType":"YulIdentifier","src":"4745:5:8"}]},{"nativeSrc":"4786:15:8","nodeType":"YulAssignment","src":"4786:15:8","value":{"name":"value","nativeSrc":"4796:5:8","nodeType":"YulIdentifier","src":"4796:5:8"},"variableNames":[{"name":"value0","nativeSrc":"4786:6:8","nodeType":"YulIdentifier","src":"4786:6:8"}]},{"nativeSrc":"4810:47:8","nodeType":"YulVariableDeclaration","src":"4810:47:8","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4842:9:8","nodeType":"YulIdentifier","src":"4842:9:8"},{"kind":"number","nativeSrc":"4853:2:8","nodeType":"YulLiteral","src":"4853:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4838:3:8","nodeType":"YulIdentifier","src":"4838:3:8"},"nativeSrc":"4838:18:8","nodeType":"YulFunctionCall","src":"4838:18:8"}],"functionName":{"name":"calldataload","nativeSrc":"4825:12:8","nodeType":"YulIdentifier","src":"4825:12:8"},"nativeSrc":"4825:32:8","nodeType":"YulFunctionCall","src":"4825:32:8"},"variables":[{"name":"value_1","nativeSrc":"4814:7:8","nodeType":"YulTypedName","src":"4814:7:8","type":""}]},{"body":{"nativeSrc":"4892:16:8","nodeType":"YulBlock","src":"4892:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4901:1:8","nodeType":"YulLiteral","src":"4901:1:8","type":"","value":"0"},{"kind":"number","nativeSrc":"4904:1:8","nodeType":"YulLiteral","src":"4904:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4894:6:8","nodeType":"YulIdentifier","src":"4894:6:8"},"nativeSrc":"4894:12:8","nodeType":"YulFunctionCall","src":"4894:12:8"},"nativeSrc":"4894:12:8","nodeType":"YulExpressionStatement","src":"4894:12:8"}]},"condition":{"arguments":[{"arguments":[{"name":"value_1","nativeSrc":"4879:7:8","nodeType":"YulIdentifier","src":"4879:7:8"},{"kind":"number","nativeSrc":"4888:1:8","nodeType":"YulLiteral","src":"4888:1:8","type":"","value":"3"}],"functionName":{"name":"lt","nativeSrc":"4876:2:8","nodeType":"YulIdentifier","src":"4876:2:8"},"nativeSrc":"4876:14:8","nodeType":"YulFunctionCall","src":"4876:14:8"}],"functionName":{"name":"iszero","nativeSrc":"4869:6:8","nodeType":"YulIdentifier","src":"4869:6:8"},"nativeSrc":"4869:22:8","nodeType":"YulFunctionCall","src":"4869:22:8"},"nativeSrc":"4866:42:8","nodeType":"YulIf","src":"4866:42:8"},{"nativeSrc":"4917:17:8","nodeType":"YulAssignment","src":"4917:17:8","value":{"name":"value_1","nativeSrc":"4927:7:8","nodeType":"YulIdentifier","src":"4927:7:8"},"variableNames":[{"name":"value1","nativeSrc":"4917:6:8","nodeType":"YulIdentifier","src":"4917:6:8"}]}]},"name":"abi_decode_tuple_t_bytes32t_enum$_GameResult_$5043","nativeSrc":"4549:391:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4609:9:8","nodeType":"YulTypedName","src":"4609:9:8","type":""},{"name":"dataEnd","nativeSrc":"4620:7:8","nodeType":"YulTypedName","src":"4620:7:8","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4632:6:8","nodeType":"YulTypedName","src":"4632:6:8","type":""},{"name":"value1","nativeSrc":"4640:6:8","nodeType":"YulTypedName","src":"4640:6:8","type":""}],"src":"4549:391:8"},{"body":{"nativeSrc":"5124:274:8","nodeType":"YulBlock","src":"5124:274:8","statements":[{"nativeSrc":"5134:27:8","nodeType":"YulAssignment","src":"5134:27:8","value":{"arguments":[{"name":"headStart","nativeSrc":"5146:9:8","nodeType":"YulIdentifier","src":"5146:9:8"},{"kind":"number","nativeSrc":"5157:3:8","nodeType":"YulLiteral","src":"5157:3:8","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"5142:3:8","nodeType":"YulIdentifier","src":"5142:3:8"},"nativeSrc":"5142:19:8","nodeType":"YulFunctionCall","src":"5142:19:8"},"variableNames":[{"name":"tail","nativeSrc":"5134:4:8","nodeType":"YulIdentifier","src":"5134:4:8"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5177:9:8","nodeType":"YulIdentifier","src":"5177:9:8"},{"arguments":[{"name":"value0","nativeSrc":"5192:6:8","nodeType":"YulIdentifier","src":"5192:6:8"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"5208:3:8","nodeType":"YulLiteral","src":"5208:3:8","type":"","value":"160"},{"kind":"number","nativeSrc":"5213:1:8","nodeType":"YulLiteral","src":"5213:1:8","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"5204:3:8","nodeType":"YulIdentifier","src":"5204:3:8"},"nativeSrc":"5204:11:8","nodeType":"YulFunctionCall","src":"5204:11:8"},{"kind":"number","nativeSrc":"5217:1:8","nodeType":"YulLiteral","src":"5217:1:8","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"5200:3:8","nodeType":"YulIdentifier","src":"5200:3:8"},"nativeSrc":"5200:19:8","nodeType":"YulFunctionCall","src":"5200:19:8"}],"functionName":{"name":"and","nativeSrc":"5188:3:8","nodeType":"YulIdentifier","src":"5188:3:8"},"nativeSrc":"5188:32:8","nodeType":"YulFunctionCall","src":"5188:32:8"}],"functionName":{"name":"mstore","nativeSrc":"5170:6:8","nodeType":"YulIdentifier","src":"5170:6:8"},"nativeSrc":"5170:51:8","nodeType":"YulFunctionCall","src":"5170:51:8"},"nativeSrc":"5170:51:8","nodeType":"YulExpressionStatement","src":"5170:51:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5241:9:8","nodeType":"YulIdentifier","src":"5241:9:8"},{"kind":"number","nativeSrc":"5252:2:8","nodeType":"YulLiteral","src":"5252:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5237:3:8","nodeType":"YulIdentifier","src":"5237:3:8"},"nativeSrc":"5237:18:8","nodeType":"YulFunctionCall","src":"5237:18:8"},{"arguments":[{"name":"value1","nativeSrc":"5261:6:8","nodeType":"YulIdentifier","src":"5261:6:8"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"5277:3:8","nodeType":"YulLiteral","src":"5277:3:8","type":"","value":"160"},{"kind":"number","nativeSrc":"5282:1:8","nodeType":"YulLiteral","src":"5282:1:8","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"5273:3:8","nodeType":"YulIdentifier","src":"5273:3:8"},"nativeSrc":"5273:11:8","nodeType":"YulFunctionCall","src":"5273:11:8"},{"kind":"number","nativeSrc":"5286:1:8","nodeType":"YulLiteral","src":"5286:1:8","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"5269:3:8","nodeType":"YulIdentifier","src":"5269:3:8"},"nativeSrc":"5269:19:8","nodeType":"YulFunctionCall","src":"5269:19:8"}],"functionName":{"name":"and","nativeSrc":"5257:3:8","nodeType":"YulIdentifier","src":"5257:3:8"},"nativeSrc":"5257:32:8","nodeType":"YulFunctionCall","src":"5257:32:8"}],"functionName":{"name":"mstore","nativeSrc":"5230:6:8","nodeType":"YulIdentifier","src":"5230:6:8"},"nativeSrc":"5230:60:8","nodeType":"YulFunctionCall","src":"5230:60:8"},"nativeSrc":"5230:60:8","nodeType":"YulExpressionStatement","src":"5230:60:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5310:9:8","nodeType":"YulIdentifier","src":"5310:9:8"},{"kind":"number","nativeSrc":"5321:2:8","nodeType":"YulLiteral","src":"5321:2:8","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5306:3:8","nodeType":"YulIdentifier","src":"5306:3:8"},"nativeSrc":"5306:18:8","nodeType":"YulFunctionCall","src":"5306:18:8"},{"name":"value2","nativeSrc":"5326:6:8","nodeType":"YulIdentifier","src":"5326:6:8"}],"functionName":{"name":"mstore","nativeSrc":"5299:6:8","nodeType":"YulIdentifier","src":"5299:6:8"},"nativeSrc":"5299:34:8","nodeType":"YulFunctionCall","src":"5299:34:8"},"nativeSrc":"5299:34:8","nodeType":"YulExpressionStatement","src":"5299:34:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5353:9:8","nodeType":"YulIdentifier","src":"5353:9:8"},{"kind":"number","nativeSrc":"5364:2:8","nodeType":"YulLiteral","src":"5364:2:8","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"5349:3:8","nodeType":"YulIdentifier","src":"5349:3:8"},"nativeSrc":"5349:18:8","nodeType":"YulFunctionCall","src":"5349:18:8"},{"arguments":[{"arguments":[{"name":"value3","nativeSrc":"5383:6:8","nodeType":"YulIdentifier","src":"5383:6:8"}],"functionName":{"name":"iszero","nativeSrc":"5376:6:8","nodeType":"YulIdentifier","src":"5376:6:8"},"nativeSrc":"5376:14:8","nodeType":"YulFunctionCall","src":"5376:14:8"}],"functionName":{"name":"iszero","nativeSrc":"5369:6:8","nodeType":"YulIdentifier","src":"5369:6:8"},"nativeSrc":"5369:22:8","nodeType":"YulFunctionCall","src":"5369:22:8"}],"functionName":{"name":"mstore","nativeSrc":"5342:6:8","nodeType":"YulIdentifier","src":"5342:6:8"},"nativeSrc":"5342:50:8","nodeType":"YulFunctionCall","src":"5342:50:8"},"nativeSrc":"5342:50:8","nodeType":"YulExpressionStatement","src":"5342:50:8"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bool__to_t_address_t_address_t_uint256_t_bool__fromStack_reversed","nativeSrc":"4945:453:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5069:9:8","nodeType":"YulTypedName","src":"5069:9:8","type":""},{"name":"value3","nativeSrc":"5080:6:8","nodeType":"YulTypedName","src":"5080:6:8","type":""},{"name":"value2","nativeSrc":"5088:6:8","nodeType":"YulTypedName","src":"5088:6:8","type":""},{"name":"value1","nativeSrc":"5096:6:8","nodeType":"YulTypedName","src":"5096:6:8","type":""},{"name":"value0","nativeSrc":"5104:6:8","nodeType":"YulTypedName","src":"5104:6:8","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5115:4:8","nodeType":"YulTypedName","src":"5115:4:8","type":""}],"src":"4945:453:8"},{"body":{"nativeSrc":"5469:184:8","nodeType":"YulBlock","src":"5469:184:8","statements":[{"nativeSrc":"5479:10:8","nodeType":"YulVariableDeclaration","src":"5479:10:8","value":{"kind":"number","nativeSrc":"5488:1:8","nodeType":"YulLiteral","src":"5488:1:8","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"5483:1:8","nodeType":"YulTypedName","src":"5483:1:8","type":""}]},{"body":{"nativeSrc":"5548:63:8","nodeType":"YulBlock","src":"5548:63:8","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"5573:3:8","nodeType":"YulIdentifier","src":"5573:3:8"},{"name":"i","nativeSrc":"5578:1:8","nodeType":"YulIdentifier","src":"5578:1:8"}],"functionName":{"name":"add","nativeSrc":"5569:3:8","nodeType":"YulIdentifier","src":"5569:3:8"},"nativeSrc":"5569:11:8","nodeType":"YulFunctionCall","src":"5569:11:8"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"5592:3:8","nodeType":"YulIdentifier","src":"5592:3:8"},{"name":"i","nativeSrc":"5597:1:8","nodeType":"YulIdentifier","src":"5597:1:8"}],"functionName":{"name":"add","nativeSrc":"5588:3:8","nodeType":"YulIdentifier","src":"5588:3:8"},"nativeSrc":"5588:11:8","nodeType":"YulFunctionCall","src":"5588:11:8"}],"functionName":{"name":"mload","nativeSrc":"5582:5:8","nodeType":"YulIdentifier","src":"5582:5:8"},"nativeSrc":"5582:18:8","nodeType":"YulFunctionCall","src":"5582:18:8"}],"functionName":{"name":"mstore","nativeSrc":"5562:6:8","nodeType":"YulIdentifier","src":"5562:6:8"},"nativeSrc":"5562:39:8","nodeType":"YulFunctionCall","src":"5562:39:8"},"nativeSrc":"5562:39:8","nodeType":"YulExpressionStatement","src":"5562:39:8"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"5509:1:8","nodeType":"YulIdentifier","src":"5509:1:8"},{"name":"length","nativeSrc":"5512:6:8","nodeType":"YulIdentifier","src":"5512:6:8"}],"functionName":{"name":"lt","nativeSrc":"5506:2:8","nodeType":"YulIdentifier","src":"5506:2:8"},"nativeSrc":"5506:13:8","nodeType":"YulFunctionCall","src":"5506:13:8"},"nativeSrc":"5498:113:8","nodeType":"YulForLoop","post":{"nativeSrc":"5520:19:8","nodeType":"YulBlock","src":"5520:19:8","statements":[{"nativeSrc":"5522:15:8","nodeType":"YulAssignment","src":"5522:15:8","value":{"arguments":[{"name":"i","nativeSrc":"5531:1:8","nodeType":"YulIdentifier","src":"5531:1:8"},{"kind":"number","nativeSrc":"5534:2:8","nodeType":"YulLiteral","src":"5534:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5527:3:8","nodeType":"YulIdentifier","src":"5527:3:8"},"nativeSrc":"5527:10:8","nodeType":"YulFunctionCall","src":"5527:10:8"},"variableNames":[{"name":"i","nativeSrc":"5522:1:8","nodeType":"YulIdentifier","src":"5522:1:8"}]}]},"pre":{"nativeSrc":"5502:3:8","nodeType":"YulBlock","src":"5502:3:8","statements":[]},"src":"5498:113:8"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"5631:3:8","nodeType":"YulIdentifier","src":"5631:3:8"},{"name":"length","nativeSrc":"5636:6:8","nodeType":"YulIdentifier","src":"5636:6:8"}],"functionName":{"name":"add","nativeSrc":"5627:3:8","nodeType":"YulIdentifier","src":"5627:3:8"},"nativeSrc":"5627:16:8","nodeType":"YulFunctionCall","src":"5627:16:8"},{"kind":"number","nativeSrc":"5645:1:8","nodeType":"YulLiteral","src":"5645:1:8","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"5620:6:8","nodeType":"YulIdentifier","src":"5620:6:8"},"nativeSrc":"5620:27:8","nodeType":"YulFunctionCall","src":"5620:27:8"},"nativeSrc":"5620:27:8","nodeType":"YulExpressionStatement","src":"5620:27:8"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"5403:250:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"5447:3:8","nodeType":"YulTypedName","src":"5447:3:8","type":""},{"name":"dst","nativeSrc":"5452:3:8","nodeType":"YulTypedName","src":"5452:3:8","type":""},{"name":"length","nativeSrc":"5457:6:8","nodeType":"YulTypedName","src":"5457:6:8","type":""}],"src":"5403:250:8"},{"body":{"nativeSrc":"5999:284:8","nodeType":"YulBlock","src":"5999:284:8","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"6016:3:8","nodeType":"YulIdentifier","src":"6016:3:8"},{"hexValue":"43616e6e6f7420616464206d6f7265207468616e20","kind":"string","nativeSrc":"6021:23:8","nodeType":"YulLiteral","src":"6021:23:8","type":"","value":"Cannot add more than "}],"functionName":{"name":"mstore","nativeSrc":"6009:6:8","nodeType":"YulIdentifier","src":"6009:6:8"},"nativeSrc":"6009:36:8","nodeType":"YulFunctionCall","src":"6009:36:8"},"nativeSrc":"6009:36:8","nodeType":"YulExpressionStatement","src":"6009:36:8"},{"nativeSrc":"6054:27:8","nodeType":"YulVariableDeclaration","src":"6054:27:8","value":{"arguments":[{"name":"value0","nativeSrc":"6074:6:8","nodeType":"YulIdentifier","src":"6074:6:8"}],"functionName":{"name":"mload","nativeSrc":"6068:5:8","nodeType":"YulIdentifier","src":"6068:5:8"},"nativeSrc":"6068:13:8","nodeType":"YulFunctionCall","src":"6068:13:8"},"variables":[{"name":"length","nativeSrc":"6058:6:8","nodeType":"YulTypedName","src":"6058:6:8","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"6129:6:8","nodeType":"YulIdentifier","src":"6129:6:8"},{"kind":"number","nativeSrc":"6137:4:8","nodeType":"YulLiteral","src":"6137:4:8","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6125:3:8","nodeType":"YulIdentifier","src":"6125:3:8"},"nativeSrc":"6125:17:8","nodeType":"YulFunctionCall","src":"6125:17:8"},{"arguments":[{"name":"pos","nativeSrc":"6148:3:8","nodeType":"YulIdentifier","src":"6148:3:8"},{"kind":"number","nativeSrc":"6153:2:8","nodeType":"YulLiteral","src":"6153:2:8","type":"","value":"21"}],"functionName":{"name":"add","nativeSrc":"6144:3:8","nodeType":"YulIdentifier","src":"6144:3:8"},"nativeSrc":"6144:12:8","nodeType":"YulFunctionCall","src":"6144:12:8"},{"name":"length","nativeSrc":"6158:6:8","nodeType":"YulIdentifier","src":"6158:6:8"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"6090:34:8","nodeType":"YulIdentifier","src":"6090:34:8"},"nativeSrc":"6090:75:8","nodeType":"YulFunctionCall","src":"6090:75:8"},"nativeSrc":"6090:75:8","nodeType":"YulExpressionStatement","src":"6090:75:8"},{"nativeSrc":"6174:26:8","nodeType":"YulVariableDeclaration","src":"6174:26:8","value":{"arguments":[{"name":"pos","nativeSrc":"6188:3:8","nodeType":"YulIdentifier","src":"6188:3:8"},{"name":"length","nativeSrc":"6193:6:8","nodeType":"YulIdentifier","src":"6193:6:8"}],"functionName":{"name":"add","nativeSrc":"6184:3:8","nodeType":"YulIdentifier","src":"6184:3:8"},"nativeSrc":"6184:16:8","nodeType":"YulFunctionCall","src":"6184:16:8"},"variables":[{"name":"_1","nativeSrc":"6178:2:8","nodeType":"YulTypedName","src":"6178:2:8","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"6220:2:8","nodeType":"YulIdentifier","src":"6220:2:8"},{"kind":"number","nativeSrc":"6224:2:8","nodeType":"YulLiteral","src":"6224:2:8","type":"","value":"21"}],"functionName":{"name":"add","nativeSrc":"6216:3:8","nodeType":"YulIdentifier","src":"6216:3:8"},"nativeSrc":"6216:11:8","nodeType":"YulFunctionCall","src":"6216:11:8"},{"hexValue":"206261636b7570206164647265737365732e","kind":"string","nativeSrc":"6229:20:8","nodeType":"YulLiteral","src":"6229:20:8","type":"","value":" backup addresses."}],"functionName":{"name":"mstore","nativeSrc":"6209:6:8","nodeType":"YulIdentifier","src":"6209:6:8"},"nativeSrc":"6209:41:8","nodeType":"YulFunctionCall","src":"6209:41:8"},"nativeSrc":"6209:41:8","nodeType":"YulExpressionStatement","src":"6209:41:8"},{"nativeSrc":"6259:18:8","nodeType":"YulAssignment","src":"6259:18:8","value":{"arguments":[{"name":"_1","nativeSrc":"6270:2:8","nodeType":"YulIdentifier","src":"6270:2:8"},{"kind":"number","nativeSrc":"6274:2:8","nodeType":"YulLiteral","src":"6274:2:8","type":"","value":"39"}],"functionName":{"name":"add","nativeSrc":"6266:3:8","nodeType":"YulIdentifier","src":"6266:3:8"},"nativeSrc":"6266:11:8","nodeType":"YulFunctionCall","src":"6266:11:8"},"variableNames":[{"name":"end","nativeSrc":"6259:3:8","nodeType":"YulIdentifier","src":"6259:3:8"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_3efd2dbfc081bf37c652dbe090d1d361e93212eb46913a51487fbe20b70e6e65_t_string_memory_ptr_t_stringliteral_eba76674054ad90018b9921ec8f09d9917e7625b39e3256f7826b772df7db756__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"5658:625:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"5975:3:8","nodeType":"YulTypedName","src":"5975:3:8","type":""},{"name":"value0","nativeSrc":"5980:6:8","nodeType":"YulTypedName","src":"5980:6:8","type":""}],"returnVariables":[{"name":"end","nativeSrc":"5991:3:8","nodeType":"YulTypedName","src":"5991:3:8","type":""}],"src":"5658:625:8"},{"body":{"nativeSrc":"6409:275:8","nodeType":"YulBlock","src":"6409:275:8","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6426:9:8","nodeType":"YulIdentifier","src":"6426:9:8"},{"kind":"number","nativeSrc":"6437:2:8","nodeType":"YulLiteral","src":"6437:2:8","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"6419:6:8","nodeType":"YulIdentifier","src":"6419:6:8"},"nativeSrc":"6419:21:8","nodeType":"YulFunctionCall","src":"6419:21:8"},"nativeSrc":"6419:21:8","nodeType":"YulExpressionStatement","src":"6419:21:8"},{"nativeSrc":"6449:27:8","nodeType":"YulVariableDeclaration","src":"6449:27:8","value":{"arguments":[{"name":"value0","nativeSrc":"6469:6:8","nodeType":"YulIdentifier","src":"6469:6:8"}],"functionName":{"name":"mload","nativeSrc":"6463:5:8","nodeType":"YulIdentifier","src":"6463:5:8"},"nativeSrc":"6463:13:8","nodeType":"YulFunctionCall","src":"6463:13:8"},"variables":[{"name":"length","nativeSrc":"6453:6:8","nodeType":"YulTypedName","src":"6453:6:8","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6496:9:8","nodeType":"YulIdentifier","src":"6496:9:8"},{"kind":"number","nativeSrc":"6507:2:8","nodeType":"YulLiteral","src":"6507:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6492:3:8","nodeType":"YulIdentifier","src":"6492:3:8"},"nativeSrc":"6492:18:8","nodeType":"YulFunctionCall","src":"6492:18:8"},{"name":"length","nativeSrc":"6512:6:8","nodeType":"YulIdentifier","src":"6512:6:8"}],"functionName":{"name":"mstore","nativeSrc":"6485:6:8","nodeType":"YulIdentifier","src":"6485:6:8"},"nativeSrc":"6485:34:8","nodeType":"YulFunctionCall","src":"6485:34:8"},"nativeSrc":"6485:34:8","nodeType":"YulExpressionStatement","src":"6485:34:8"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"6567:6:8","nodeType":"YulIdentifier","src":"6567:6:8"},{"kind":"number","nativeSrc":"6575:2:8","nodeType":"YulLiteral","src":"6575:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6563:3:8","nodeType":"YulIdentifier","src":"6563:3:8"},"nativeSrc":"6563:15:8","nodeType":"YulFunctionCall","src":"6563:15:8"},{"arguments":[{"name":"headStart","nativeSrc":"6584:9:8","nodeType":"YulIdentifier","src":"6584:9:8"},{"kind":"number","nativeSrc":"6595:2:8","nodeType":"YulLiteral","src":"6595:2:8","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6580:3:8","nodeType":"YulIdentifier","src":"6580:3:8"},"nativeSrc":"6580:18:8","nodeType":"YulFunctionCall","src":"6580:18:8"},{"name":"length","nativeSrc":"6600:6:8","nodeType":"YulIdentifier","src":"6600:6:8"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"6528:34:8","nodeType":"YulIdentifier","src":"6528:34:8"},"nativeSrc":"6528:79:8","nodeType":"YulFunctionCall","src":"6528:79:8"},"nativeSrc":"6528:79:8","nodeType":"YulExpressionStatement","src":"6528:79:8"},{"nativeSrc":"6616:62:8","nodeType":"YulAssignment","src":"6616:62:8","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6632:9:8","nodeType":"YulIdentifier","src":"6632:9:8"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"6651:6:8","nodeType":"YulIdentifier","src":"6651:6:8"},{"kind":"number","nativeSrc":"6659:2:8","nodeType":"YulLiteral","src":"6659:2:8","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"6647:3:8","nodeType":"YulIdentifier","src":"6647:3:8"},"nativeSrc":"6647:15:8","nodeType":"YulFunctionCall","src":"6647:15:8"},{"arguments":[{"kind":"number","nativeSrc":"6668:2:8","nodeType":"YulLiteral","src":"6668:2:8","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"6664:3:8","nodeType":"YulIdentifier","src":"6664:3:8"},"nativeSrc":"6664:7:8","nodeType":"YulFunctionCall","src":"6664:7:8"}],"functionName":{"name":"and","nativeSrc":"6643:3:8","nodeType":"YulIdentifier","src":"6643:3:8"},"nativeSrc":"6643:29:8","nodeType":"YulFunctionCall","src":"6643:29:8"}],"functionName":{"name":"add","nativeSrc":"6628:3:8","nodeType":"YulIdentifier","src":"6628:3:8"},"nativeSrc":"6628:45:8","nodeType":"YulFunctionCall","src":"6628:45:8"},{"kind":"number","nativeSrc":"6675:2:8","nodeType":"YulLiteral","src":"6675:2:8","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6624:3:8","nodeType":"YulIdentifier","src":"6624:3:8"},"nativeSrc":"6624:54:8","nodeType":"YulFunctionCall","src":"6624:54:8"},"variableNames":[{"name":"tail","nativeSrc":"6616:4:8","nodeType":"YulIdentifier","src":"6616:4:8"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"6288:396:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6378:9:8","nodeType":"YulTypedName","src":"6378:9:8","type":""},{"name":"value0","nativeSrc":"6389:6:8","nodeType":"YulTypedName","src":"6389:6:8","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6400:4:8","nodeType":"YulTypedName","src":"6400:4:8","type":""}],"src":"6288:396:8"},{"body":{"nativeSrc":"6863:228:8","nodeType":"YulBlock","src":"6863:228:8","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6880:9:8","nodeType":"YulIdentifier","src":"6880:9:8"},{"kind":"number","nativeSrc":"6891:2:8","nodeType":"YulLiteral","src":"6891:2:8","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"6873:6:8","nodeType":"YulIdentifier","src":"6873:6:8"},"nativeSrc":"6873:21:8","nodeType":"YulFunctionCall","src":"6873:21:8"},"nativeSrc":"6873:21:8","nodeType":"YulExpressionStatement","src":"6873:21:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6914:9:8","nodeType":"YulIdentifier","src":"6914:9:8"},{"kind":"number","nativeSrc":"6925:2:8","nodeType":"YulLiteral","src":"6925:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6910:3:8","nodeType":"YulIdentifier","src":"6910:3:8"},"nativeSrc":"6910:18:8","nodeType":"YulFunctionCall","src":"6910:18:8"},{"kind":"number","nativeSrc":"6930:2:8","nodeType":"YulLiteral","src":"6930:2:8","type":"","value":"38"}],"functionName":{"name":"mstore","nativeSrc":"6903:6:8","nodeType":"YulIdentifier","src":"6903:6:8"},"nativeSrc":"6903:30:8","nodeType":"YulFunctionCall","src":"6903:30:8"},"nativeSrc":"6903:30:8","nodeType":"YulExpressionStatement","src":"6903:30:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6953:9:8","nodeType":"YulIdentifier","src":"6953:9:8"},{"kind":"number","nativeSrc":"6964:2:8","nodeType":"YulLiteral","src":"6964:2:8","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6949:3:8","nodeType":"YulIdentifier","src":"6949:3:8"},"nativeSrc":"6949:18:8","nodeType":"YulFunctionCall","src":"6949:18:8"},{"hexValue":"4261636b757020616464726573732063616e6e6f74206265207a65726f206164","kind":"string","nativeSrc":"6969:34:8","nodeType":"YulLiteral","src":"6969:34:8","type":"","value":"Backup address cannot be zero ad"}],"functionName":{"name":"mstore","nativeSrc":"6942:6:8","nodeType":"YulIdentifier","src":"6942:6:8"},"nativeSrc":"6942:62:8","nodeType":"YulFunctionCall","src":"6942:62:8"},"nativeSrc":"6942:62:8","nodeType":"YulExpressionStatement","src":"6942:62:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7024:9:8","nodeType":"YulIdentifier","src":"7024:9:8"},{"kind":"number","nativeSrc":"7035:2:8","nodeType":"YulLiteral","src":"7035:2:8","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7020:3:8","nodeType":"YulIdentifier","src":"7020:3:8"},"nativeSrc":"7020:18:8","nodeType":"YulFunctionCall","src":"7020:18:8"},{"hexValue":"64726573732e","kind":"string","nativeSrc":"7040:8:8","nodeType":"YulLiteral","src":"7040:8:8","type":"","value":"dress."}],"functionName":{"name":"mstore","nativeSrc":"7013:6:8","nodeType":"YulIdentifier","src":"7013:6:8"},"nativeSrc":"7013:36:8","nodeType":"YulFunctionCall","src":"7013:36:8"},"nativeSrc":"7013:36:8","nodeType":"YulExpressionStatement","src":"7013:36:8"},{"nativeSrc":"7058:27:8","nodeType":"YulAssignment","src":"7058:27:8","value":{"arguments":[{"name":"headStart","nativeSrc":"7070:9:8","nodeType":"YulIdentifier","src":"7070:9:8"},{"kind":"number","nativeSrc":"7081:3:8","nodeType":"YulLiteral","src":"7081:3:8","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"7066:3:8","nodeType":"YulIdentifier","src":"7066:3:8"},"nativeSrc":"7066:19:8","nodeType":"YulFunctionCall","src":"7066:19:8"},"variableNames":[{"name":"tail","nativeSrc":"7058:4:8","nodeType":"YulIdentifier","src":"7058:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_2085cb31c0c1e8224075d75f458578f54365aa05647251b48bb68bb0bf07fb3c__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"6689:402:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6840:9:8","nodeType":"YulTypedName","src":"6840:9:8","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6854:4:8","nodeType":"YulTypedName","src":"6854:4:8","type":""}],"src":"6689:402:8"},{"body":{"nativeSrc":"7270:224:8","nodeType":"YulBlock","src":"7270:224:8","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7287:9:8","nodeType":"YulIdentifier","src":"7287:9:8"},{"kind":"number","nativeSrc":"7298:2:8","nodeType":"YulLiteral","src":"7298:2:8","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"7280:6:8","nodeType":"YulIdentifier","src":"7280:6:8"},"nativeSrc":"7280:21:8","nodeType":"YulFunctionCall","src":"7280:21:8"},"nativeSrc":"7280:21:8","nodeType":"YulExpressionStatement","src":"7280:21:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7321:9:8","nodeType":"YulIdentifier","src":"7321:9:8"},{"kind":"number","nativeSrc":"7332:2:8","nodeType":"YulLiteral","src":"7332:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7317:3:8","nodeType":"YulIdentifier","src":"7317:3:8"},"nativeSrc":"7317:18:8","nodeType":"YulFunctionCall","src":"7317:18:8"},{"kind":"number","nativeSrc":"7337:2:8","nodeType":"YulLiteral","src":"7337:2:8","type":"","value":"34"}],"functionName":{"name":"mstore","nativeSrc":"7310:6:8","nodeType":"YulIdentifier","src":"7310:6:8"},"nativeSrc":"7310:30:8","nodeType":"YulFunctionCall","src":"7310:30:8"},"nativeSrc":"7310:30:8","nodeType":"YulExpressionStatement","src":"7310:30:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7360:9:8","nodeType":"YulIdentifier","src":"7360:9:8"},{"kind":"number","nativeSrc":"7371:2:8","nodeType":"YulLiteral","src":"7371:2:8","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7356:3:8","nodeType":"YulIdentifier","src":"7356:3:8"},"nativeSrc":"7356:18:8","nodeType":"YulFunctionCall","src":"7356:18:8"},{"hexValue":"43616e6e6f74207365742073656c66206173206261636b757020616464726573","kind":"string","nativeSrc":"7376:34:8","nodeType":"YulLiteral","src":"7376:34:8","type":"","value":"Cannot set self as backup addres"}],"functionName":{"name":"mstore","nativeSrc":"7349:6:8","nodeType":"YulIdentifier","src":"7349:6:8"},"nativeSrc":"7349:62:8","nodeType":"YulFunctionCall","src":"7349:62:8"},"nativeSrc":"7349:62:8","nodeType":"YulExpressionStatement","src":"7349:62:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7431:9:8","nodeType":"YulIdentifier","src":"7431:9:8"},{"kind":"number","nativeSrc":"7442:2:8","nodeType":"YulLiteral","src":"7442:2:8","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7427:3:8","nodeType":"YulIdentifier","src":"7427:3:8"},"nativeSrc":"7427:18:8","nodeType":"YulFunctionCall","src":"7427:18:8"},{"hexValue":"732e","kind":"string","nativeSrc":"7447:4:8","nodeType":"YulLiteral","src":"7447:4:8","type":"","value":"s."}],"functionName":{"name":"mstore","nativeSrc":"7420:6:8","nodeType":"YulIdentifier","src":"7420:6:8"},"nativeSrc":"7420:32:8","nodeType":"YulFunctionCall","src":"7420:32:8"},"nativeSrc":"7420:32:8","nodeType":"YulExpressionStatement","src":"7420:32:8"},{"nativeSrc":"7461:27:8","nodeType":"YulAssignment","src":"7461:27:8","value":{"arguments":[{"name":"headStart","nativeSrc":"7473:9:8","nodeType":"YulIdentifier","src":"7473:9:8"},{"kind":"number","nativeSrc":"7484:3:8","nodeType":"YulLiteral","src":"7484:3:8","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"7469:3:8","nodeType":"YulIdentifier","src":"7469:3:8"},"nativeSrc":"7469:19:8","nodeType":"YulFunctionCall","src":"7469:19:8"},"variableNames":[{"name":"tail","nativeSrc":"7461:4:8","nodeType":"YulIdentifier","src":"7461:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_24004c7e147cbd7bbd3a293bdde95728aaaa014cfa5a2cce5b68611170522f61__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"7096:398:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7247:9:8","nodeType":"YulTypedName","src":"7247:9:8","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7261:4:8","nodeType":"YulTypedName","src":"7261:4:8","type":""}],"src":"7096:398:8"},{"body":{"nativeSrc":"7673:179:8","nodeType":"YulBlock","src":"7673:179:8","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7690:9:8","nodeType":"YulIdentifier","src":"7690:9:8"},{"kind":"number","nativeSrc":"7701:2:8","nodeType":"YulLiteral","src":"7701:2:8","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"7683:6:8","nodeType":"YulIdentifier","src":"7683:6:8"},"nativeSrc":"7683:21:8","nodeType":"YulFunctionCall","src":"7683:21:8"},"nativeSrc":"7683:21:8","nodeType":"YulExpressionStatement","src":"7683:21:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7724:9:8","nodeType":"YulIdentifier","src":"7724:9:8"},{"kind":"number","nativeSrc":"7735:2:8","nodeType":"YulLiteral","src":"7735:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7720:3:8","nodeType":"YulIdentifier","src":"7720:3:8"},"nativeSrc":"7720:18:8","nodeType":"YulFunctionCall","src":"7720:18:8"},{"kind":"number","nativeSrc":"7740:2:8","nodeType":"YulLiteral","src":"7740:2:8","type":"","value":"29"}],"functionName":{"name":"mstore","nativeSrc":"7713:6:8","nodeType":"YulIdentifier","src":"7713:6:8"},"nativeSrc":"7713:30:8","nodeType":"YulFunctionCall","src":"7713:30:8"},"nativeSrc":"7713:30:8","nodeType":"YulExpressionStatement","src":"7713:30:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7763:9:8","nodeType":"YulIdentifier","src":"7763:9:8"},{"kind":"number","nativeSrc":"7774:2:8","nodeType":"YulLiteral","src":"7774:2:8","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7759:3:8","nodeType":"YulIdentifier","src":"7759:3:8"},"nativeSrc":"7759:18:8","nodeType":"YulFunctionCall","src":"7759:18:8"},{"hexValue":"4261636b7570206164647265737320616c72656164792061646465642e","kind":"string","nativeSrc":"7779:31:8","nodeType":"YulLiteral","src":"7779:31:8","type":"","value":"Backup address already added."}],"functionName":{"name":"mstore","nativeSrc":"7752:6:8","nodeType":"YulIdentifier","src":"7752:6:8"},"nativeSrc":"7752:59:8","nodeType":"YulFunctionCall","src":"7752:59:8"},"nativeSrc":"7752:59:8","nodeType":"YulExpressionStatement","src":"7752:59:8"},{"nativeSrc":"7820:26:8","nodeType":"YulAssignment","src":"7820:26:8","value":{"arguments":[{"name":"headStart","nativeSrc":"7832:9:8","nodeType":"YulIdentifier","src":"7832:9:8"},{"kind":"number","nativeSrc":"7843:2:8","nodeType":"YulLiteral","src":"7843:2:8","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7828:3:8","nodeType":"YulIdentifier","src":"7828:3:8"},"nativeSrc":"7828:18:8","nodeType":"YulFunctionCall","src":"7828:18:8"},"variableNames":[{"name":"tail","nativeSrc":"7820:4:8","nodeType":"YulIdentifier","src":"7820:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_6ecbafa02a72b5d1804f10440d0ac97efc6479f5ef05e0935766c1bfaff28139__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"7499:353:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7650:9:8","nodeType":"YulTypedName","src":"7650:9:8","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7664:4:8","nodeType":"YulTypedName","src":"7664:4:8","type":""}],"src":"7499:353:8"},{"body":{"nativeSrc":"8031:228:8","nodeType":"YulBlock","src":"8031:228:8","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8048:9:8","nodeType":"YulIdentifier","src":"8048:9:8"},{"kind":"number","nativeSrc":"8059:2:8","nodeType":"YulLiteral","src":"8059:2:8","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"8041:6:8","nodeType":"YulIdentifier","src":"8041:6:8"},"nativeSrc":"8041:21:8","nodeType":"YulFunctionCall","src":"8041:21:8"},"nativeSrc":"8041:21:8","nodeType":"YulExpressionStatement","src":"8041:21:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8082:9:8","nodeType":"YulIdentifier","src":"8082:9:8"},{"kind":"number","nativeSrc":"8093:2:8","nodeType":"YulLiteral","src":"8093:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8078:3:8","nodeType":"YulIdentifier","src":"8078:3:8"},"nativeSrc":"8078:18:8","nodeType":"YulFunctionCall","src":"8078:18:8"},{"kind":"number","nativeSrc":"8098:2:8","nodeType":"YulLiteral","src":"8098:2:8","type":"","value":"38"}],"functionName":{"name":"mstore","nativeSrc":"8071:6:8","nodeType":"YulIdentifier","src":"8071:6:8"},"nativeSrc":"8071:30:8","nodeType":"YulFunctionCall","src":"8071:30:8"},"nativeSrc":"8071:30:8","nodeType":"YulExpressionStatement","src":"8071:30:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8121:9:8","nodeType":"YulIdentifier","src":"8121:9:8"},{"kind":"number","nativeSrc":"8132:2:8","nodeType":"YulLiteral","src":"8132:2:8","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8117:3:8","nodeType":"YulIdentifier","src":"8117:3:8"},"nativeSrc":"8117:18:8","nodeType":"YulFunctionCall","src":"8117:18:8"},{"hexValue":"4465706f73697420616d6f756e74206d75737420626520677265617465722074","kind":"string","nativeSrc":"8137:34:8","nodeType":"YulLiteral","src":"8137:34:8","type":"","value":"Deposit amount must be greater t"}],"functionName":{"name":"mstore","nativeSrc":"8110:6:8","nodeType":"YulIdentifier","src":"8110:6:8"},"nativeSrc":"8110:62:8","nodeType":"YulFunctionCall","src":"8110:62:8"},"nativeSrc":"8110:62:8","nodeType":"YulExpressionStatement","src":"8110:62:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8192:9:8","nodeType":"YulIdentifier","src":"8192:9:8"},{"kind":"number","nativeSrc":"8203:2:8","nodeType":"YulLiteral","src":"8203:2:8","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"8188:3:8","nodeType":"YulIdentifier","src":"8188:3:8"},"nativeSrc":"8188:18:8","nodeType":"YulFunctionCall","src":"8188:18:8"},{"hexValue":"68616e20302e","kind":"string","nativeSrc":"8208:8:8","nodeType":"YulLiteral","src":"8208:8:8","type":"","value":"han 0."}],"functionName":{"name":"mstore","nativeSrc":"8181:6:8","nodeType":"YulIdentifier","src":"8181:6:8"},"nativeSrc":"8181:36:8","nodeType":"YulFunctionCall","src":"8181:36:8"},"nativeSrc":"8181:36:8","nodeType":"YulExpressionStatement","src":"8181:36:8"},{"nativeSrc":"8226:27:8","nodeType":"YulAssignment","src":"8226:27:8","value":{"arguments":[{"name":"headStart","nativeSrc":"8238:9:8","nodeType":"YulIdentifier","src":"8238:9:8"},{"kind":"number","nativeSrc":"8249:3:8","nodeType":"YulLiteral","src":"8249:3:8","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"8234:3:8","nodeType":"YulIdentifier","src":"8234:3:8"},"nativeSrc":"8234:19:8","nodeType":"YulFunctionCall","src":"8234:19:8"},"variableNames":[{"name":"tail","nativeSrc":"8226:4:8","nodeType":"YulIdentifier","src":"8226:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_428675301fd335ad7663745fad16f23e40b3d007e15c73499f8fc16797bb5be3__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"7857:402:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8008:9:8","nodeType":"YulTypedName","src":"8008:9:8","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8022:4:8","nodeType":"YulTypedName","src":"8022:4:8","type":""}],"src":"7857:402:8"},{"body":{"nativeSrc":"8296:95:8","nodeType":"YulBlock","src":"8296:95:8","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8313:1:8","nodeType":"YulLiteral","src":"8313:1:8","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"8320:3:8","nodeType":"YulLiteral","src":"8320:3:8","type":"","value":"224"},{"kind":"number","nativeSrc":"8325:10:8","nodeType":"YulLiteral","src":"8325:10:8","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"8316:3:8","nodeType":"YulIdentifier","src":"8316:3:8"},"nativeSrc":"8316:20:8","nodeType":"YulFunctionCall","src":"8316:20:8"}],"functionName":{"name":"mstore","nativeSrc":"8306:6:8","nodeType":"YulIdentifier","src":"8306:6:8"},"nativeSrc":"8306:31:8","nodeType":"YulFunctionCall","src":"8306:31:8"},"nativeSrc":"8306:31:8","nodeType":"YulExpressionStatement","src":"8306:31:8"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8353:1:8","nodeType":"YulLiteral","src":"8353:1:8","type":"","value":"4"},{"kind":"number","nativeSrc":"8356:4:8","nodeType":"YulLiteral","src":"8356:4:8","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"8346:6:8","nodeType":"YulIdentifier","src":"8346:6:8"},"nativeSrc":"8346:15:8","nodeType":"YulFunctionCall","src":"8346:15:8"},"nativeSrc":"8346:15:8","nodeType":"YulExpressionStatement","src":"8346:15:8"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8377:1:8","nodeType":"YulLiteral","src":"8377:1:8","type":"","value":"0"},{"kind":"number","nativeSrc":"8380:4:8","nodeType":"YulLiteral","src":"8380:4:8","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"8370:6:8","nodeType":"YulIdentifier","src":"8370:6:8"},"nativeSrc":"8370:15:8","nodeType":"YulFunctionCall","src":"8370:15:8"},"nativeSrc":"8370:15:8","nodeType":"YulExpressionStatement","src":"8370:15:8"}]},"name":"panic_error_0x11","nativeSrc":"8264:127:8","nodeType":"YulFunctionDefinition","src":"8264:127:8"},{"body":{"nativeSrc":"8444:77:8","nodeType":"YulBlock","src":"8444:77:8","statements":[{"nativeSrc":"8454:16:8","nodeType":"YulAssignment","src":"8454:16:8","value":{"arguments":[{"name":"x","nativeSrc":"8465:1:8","nodeType":"YulIdentifier","src":"8465:1:8"},{"name":"y","nativeSrc":"8468:1:8","nodeType":"YulIdentifier","src":"8468:1:8"}],"functionName":{"name":"add","nativeSrc":"8461:3:8","nodeType":"YulIdentifier","src":"8461:3:8"},"nativeSrc":"8461:9:8","nodeType":"YulFunctionCall","src":"8461:9:8"},"variableNames":[{"name":"sum","nativeSrc":"8454:3:8","nodeType":"YulIdentifier","src":"8454:3:8"}]},{"body":{"nativeSrc":"8493:22:8","nodeType":"YulBlock","src":"8493:22:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"8495:16:8","nodeType":"YulIdentifier","src":"8495:16:8"},"nativeSrc":"8495:18:8","nodeType":"YulFunctionCall","src":"8495:18:8"},"nativeSrc":"8495:18:8","nodeType":"YulExpressionStatement","src":"8495:18:8"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"8485:1:8","nodeType":"YulIdentifier","src":"8485:1:8"},{"name":"sum","nativeSrc":"8488:3:8","nodeType":"YulIdentifier","src":"8488:3:8"}],"functionName":{"name":"gt","nativeSrc":"8482:2:8","nodeType":"YulIdentifier","src":"8482:2:8"},"nativeSrc":"8482:10:8","nodeType":"YulFunctionCall","src":"8482:10:8"},"nativeSrc":"8479:36:8","nodeType":"YulIf","src":"8479:36:8"}]},"name":"checked_add_t_uint256","nativeSrc":"8396:125:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"8427:1:8","nodeType":"YulTypedName","src":"8427:1:8","type":""},{"name":"y","nativeSrc":"8430:1:8","nodeType":"YulTypedName","src":"8430:1:8","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"8436:3:8","nodeType":"YulTypedName","src":"8436:3:8","type":""}],"src":"8396:125:8"},{"body":{"nativeSrc":"8675:124:8","nodeType":"YulBlock","src":"8675:124:8","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"8698:3:8","nodeType":"YulIdentifier","src":"8698:3:8"},{"name":"value0","nativeSrc":"8703:6:8","nodeType":"YulIdentifier","src":"8703:6:8"},{"name":"value1","nativeSrc":"8711:6:8","nodeType":"YulIdentifier","src":"8711:6:8"}],"functionName":{"name":"calldatacopy","nativeSrc":"8685:12:8","nodeType":"YulIdentifier","src":"8685:12:8"},"nativeSrc":"8685:33:8","nodeType":"YulFunctionCall","src":"8685:33:8"},"nativeSrc":"8685:33:8","nodeType":"YulExpressionStatement","src":"8685:33:8"},{"nativeSrc":"8727:26:8","nodeType":"YulVariableDeclaration","src":"8727:26:8","value":{"arguments":[{"name":"pos","nativeSrc":"8741:3:8","nodeType":"YulIdentifier","src":"8741:3:8"},{"name":"value1","nativeSrc":"8746:6:8","nodeType":"YulIdentifier","src":"8746:6:8"}],"functionName":{"name":"add","nativeSrc":"8737:3:8","nodeType":"YulIdentifier","src":"8737:3:8"},"nativeSrc":"8737:16:8","nodeType":"YulFunctionCall","src":"8737:16:8"},"variables":[{"name":"_1","nativeSrc":"8731:2:8","nodeType":"YulTypedName","src":"8731:2:8","type":""}]},{"expression":{"arguments":[{"name":"_1","nativeSrc":"8769:2:8","nodeType":"YulIdentifier","src":"8769:2:8"},{"kind":"number","nativeSrc":"8773:1:8","nodeType":"YulLiteral","src":"8773:1:8","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"8762:6:8","nodeType":"YulIdentifier","src":"8762:6:8"},"nativeSrc":"8762:13:8","nodeType":"YulFunctionCall","src":"8762:13:8"},"nativeSrc":"8762:13:8","nodeType":"YulExpressionStatement","src":"8762:13:8"},{"nativeSrc":"8784:9:8","nodeType":"YulAssignment","src":"8784:9:8","value":{"name":"_1","nativeSrc":"8791:2:8","nodeType":"YulIdentifier","src":"8791:2:8"},"variableNames":[{"name":"end","nativeSrc":"8784:3:8","nodeType":"YulIdentifier","src":"8784:3:8"}]}]},"name":"abi_encode_tuple_packed_t_string_calldata_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"8526:273:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"8643:3:8","nodeType":"YulTypedName","src":"8643:3:8","type":""},{"name":"value1","nativeSrc":"8648:6:8","nodeType":"YulTypedName","src":"8648:6:8","type":""},{"name":"value0","nativeSrc":"8656:6:8","nodeType":"YulTypedName","src":"8656:6:8","type":""}],"returnVariables":[{"name":"end","nativeSrc":"8667:3:8","nodeType":"YulTypedName","src":"8667:3:8","type":""}],"src":"8526:273:8"},{"body":{"nativeSrc":"8978:173:8","nodeType":"YulBlock","src":"8978:173:8","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8995:9:8","nodeType":"YulIdentifier","src":"8995:9:8"},{"kind":"number","nativeSrc":"9006:2:8","nodeType":"YulLiteral","src":"9006:2:8","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"8988:6:8","nodeType":"YulIdentifier","src":"8988:6:8"},"nativeSrc":"8988:21:8","nodeType":"YulFunctionCall","src":"8988:21:8"},"nativeSrc":"8988:21:8","nodeType":"YulExpressionStatement","src":"8988:21:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9029:9:8","nodeType":"YulIdentifier","src":"9029:9:8"},{"kind":"number","nativeSrc":"9040:2:8","nodeType":"YulLiteral","src":"9040:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9025:3:8","nodeType":"YulIdentifier","src":"9025:3:8"},"nativeSrc":"9025:18:8","nodeType":"YulFunctionCall","src":"9025:18:8"},{"kind":"number","nativeSrc":"9045:2:8","nodeType":"YulLiteral","src":"9045:2:8","type":"","value":"23"}],"functionName":{"name":"mstore","nativeSrc":"9018:6:8","nodeType":"YulIdentifier","src":"9018:6:8"},"nativeSrc":"9018:30:8","nodeType":"YulFunctionCall","src":"9018:30:8"},"nativeSrc":"9018:30:8","nodeType":"YulExpressionStatement","src":"9018:30:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9068:9:8","nodeType":"YulIdentifier","src":"9068:9:8"},{"kind":"number","nativeSrc":"9079:2:8","nodeType":"YulLiteral","src":"9079:2:8","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9064:3:8","nodeType":"YulIdentifier","src":"9064:3:8"},"nativeSrc":"9064:18:8","nodeType":"YulFunctionCall","src":"9064:18:8"},{"hexValue":"47616d6520494420616c7265616479206578697374732e","kind":"string","nativeSrc":"9084:25:8","nodeType":"YulLiteral","src":"9084:25:8","type":"","value":"Game ID already exists."}],"functionName":{"name":"mstore","nativeSrc":"9057:6:8","nodeType":"YulIdentifier","src":"9057:6:8"},"nativeSrc":"9057:53:8","nodeType":"YulFunctionCall","src":"9057:53:8"},"nativeSrc":"9057:53:8","nodeType":"YulExpressionStatement","src":"9057:53:8"},{"nativeSrc":"9119:26:8","nodeType":"YulAssignment","src":"9119:26:8","value":{"arguments":[{"name":"headStart","nativeSrc":"9131:9:8","nodeType":"YulIdentifier","src":"9131:9:8"},{"kind":"number","nativeSrc":"9142:2:8","nodeType":"YulLiteral","src":"9142:2:8","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9127:3:8","nodeType":"YulIdentifier","src":"9127:3:8"},"nativeSrc":"9127:18:8","nodeType":"YulFunctionCall","src":"9127:18:8"},"variableNames":[{"name":"tail","nativeSrc":"9119:4:8","nodeType":"YulIdentifier","src":"9119:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc691903107a0912eff42becc72be6ba9923b8e686b6174029fe086e98b843bc__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"8804:347:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8955:9:8","nodeType":"YulTypedName","src":"8955:9:8","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8969:4:8","nodeType":"YulTypedName","src":"8969:4:8","type":""}],"src":"8804:347:8"},{"body":{"nativeSrc":"9330:173:8","nodeType":"YulBlock","src":"9330:173:8","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"9347:9:8","nodeType":"YulIdentifier","src":"9347:9:8"},{"kind":"number","nativeSrc":"9358:2:8","nodeType":"YulLiteral","src":"9358:2:8","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"9340:6:8","nodeType":"YulIdentifier","src":"9340:6:8"},"nativeSrc":"9340:21:8","nodeType":"YulFunctionCall","src":"9340:21:8"},"nativeSrc":"9340:21:8","nodeType":"YulExpressionStatement","src":"9340:21:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9381:9:8","nodeType":"YulIdentifier","src":"9381:9:8"},{"kind":"number","nativeSrc":"9392:2:8","nodeType":"YulLiteral","src":"9392:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9377:3:8","nodeType":"YulIdentifier","src":"9377:3:8"},"nativeSrc":"9377:18:8","nodeType":"YulFunctionCall","src":"9377:18:8"},{"kind":"number","nativeSrc":"9397:2:8","nodeType":"YulLiteral","src":"9397:2:8","type":"","value":"23"}],"functionName":{"name":"mstore","nativeSrc":"9370:6:8","nodeType":"YulIdentifier","src":"9370:6:8"},"nativeSrc":"9370:30:8","nodeType":"YulFunctionCall","src":"9370:30:8"},"nativeSrc":"9370:30:8","nodeType":"YulExpressionStatement","src":"9370:30:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9420:9:8","nodeType":"YulIdentifier","src":"9420:9:8"},{"kind":"number","nativeSrc":"9431:2:8","nodeType":"YulLiteral","src":"9431:2:8","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9416:3:8","nodeType":"YulIdentifier","src":"9416:3:8"},"nativeSrc":"9416:18:8","nodeType":"YulFunctionCall","src":"9416:18:8"},{"hexValue":"496e76616c696420706c6179657220616464726573732e","kind":"string","nativeSrc":"9436:25:8","nodeType":"YulLiteral","src":"9436:25:8","type":"","value":"Invalid player address."}],"functionName":{"name":"mstore","nativeSrc":"9409:6:8","nodeType":"YulIdentifier","src":"9409:6:8"},"nativeSrc":"9409:53:8","nodeType":"YulFunctionCall","src":"9409:53:8"},"nativeSrc":"9409:53:8","nodeType":"YulExpressionStatement","src":"9409:53:8"},{"nativeSrc":"9471:26:8","nodeType":"YulAssignment","src":"9471:26:8","value":{"arguments":[{"name":"headStart","nativeSrc":"9483:9:8","nodeType":"YulIdentifier","src":"9483:9:8"},{"kind":"number","nativeSrc":"9494:2:8","nodeType":"YulLiteral","src":"9494:2:8","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9479:3:8","nodeType":"YulIdentifier","src":"9479:3:8"},"nativeSrc":"9479:18:8","nodeType":"YulFunctionCall","src":"9479:18:8"},"variableNames":[{"name":"tail","nativeSrc":"9471:4:8","nodeType":"YulIdentifier","src":"9471:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_6ed80a384a99508c50f304d0fc1fa01e87e8a7c1e23fd87bb26b3eec42b37996__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"9156:347:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9307:9:8","nodeType":"YulTypedName","src":"9307:9:8","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"9321:4:8","nodeType":"YulTypedName","src":"9321:4:8","type":""}],"src":"9156:347:8"},{"body":{"nativeSrc":"9682:226:8","nodeType":"YulBlock","src":"9682:226:8","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"9699:9:8","nodeType":"YulIdentifier","src":"9699:9:8"},{"kind":"number","nativeSrc":"9710:2:8","nodeType":"YulLiteral","src":"9710:2:8","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"9692:6:8","nodeType":"YulIdentifier","src":"9692:6:8"},"nativeSrc":"9692:21:8","nodeType":"YulFunctionCall","src":"9692:21:8"},"nativeSrc":"9692:21:8","nodeType":"YulExpressionStatement","src":"9692:21:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9733:9:8","nodeType":"YulIdentifier","src":"9733:9:8"},{"kind":"number","nativeSrc":"9744:2:8","nodeType":"YulLiteral","src":"9744:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9729:3:8","nodeType":"YulIdentifier","src":"9729:3:8"},"nativeSrc":"9729:18:8","nodeType":"YulFunctionCall","src":"9729:18:8"},{"kind":"number","nativeSrc":"9749:2:8","nodeType":"YulLiteral","src":"9749:2:8","type":"","value":"36"}],"functionName":{"name":"mstore","nativeSrc":"9722:6:8","nodeType":"YulIdentifier","src":"9722:6:8"},"nativeSrc":"9722:30:8","nodeType":"YulFunctionCall","src":"9722:30:8"},"nativeSrc":"9722:30:8","nodeType":"YulExpressionStatement","src":"9722:30:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9772:9:8","nodeType":"YulIdentifier","src":"9772:9:8"},{"kind":"number","nativeSrc":"9783:2:8","nodeType":"YulLiteral","src":"9783:2:8","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9768:3:8","nodeType":"YulIdentifier","src":"9768:3:8"},"nativeSrc":"9768:18:8","nodeType":"YulFunctionCall","src":"9768:18:8"},{"hexValue":"5f7374616b65416d6f756e74206d757374206265206772656174657220746861","kind":"string","nativeSrc":"9788:34:8","nodeType":"YulLiteral","src":"9788:34:8","type":"","value":"_stakeAmount must be greater tha"}],"functionName":{"name":"mstore","nativeSrc":"9761:6:8","nodeType":"YulIdentifier","src":"9761:6:8"},"nativeSrc":"9761:62:8","nodeType":"YulFunctionCall","src":"9761:62:8"},"nativeSrc":"9761:62:8","nodeType":"YulExpressionStatement","src":"9761:62:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9843:9:8","nodeType":"YulIdentifier","src":"9843:9:8"},{"kind":"number","nativeSrc":"9854:2:8","nodeType":"YulLiteral","src":"9854:2:8","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9839:3:8","nodeType":"YulIdentifier","src":"9839:3:8"},"nativeSrc":"9839:18:8","nodeType":"YulFunctionCall","src":"9839:18:8"},{"hexValue":"6e20302e","kind":"string","nativeSrc":"9859:6:8","nodeType":"YulLiteral","src":"9859:6:8","type":"","value":"n 0."}],"functionName":{"name":"mstore","nativeSrc":"9832:6:8","nodeType":"YulIdentifier","src":"9832:6:8"},"nativeSrc":"9832:34:8","nodeType":"YulFunctionCall","src":"9832:34:8"},"nativeSrc":"9832:34:8","nodeType":"YulExpressionStatement","src":"9832:34:8"},{"nativeSrc":"9875:27:8","nodeType":"YulAssignment","src":"9875:27:8","value":{"arguments":[{"name":"headStart","nativeSrc":"9887:9:8","nodeType":"YulIdentifier","src":"9887:9:8"},{"kind":"number","nativeSrc":"9898:3:8","nodeType":"YulLiteral","src":"9898:3:8","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"9883:3:8","nodeType":"YulIdentifier","src":"9883:3:8"},"nativeSrc":"9883:19:8","nodeType":"YulFunctionCall","src":"9883:19:8"},"variableNames":[{"name":"tail","nativeSrc":"9875:4:8","nodeType":"YulIdentifier","src":"9875:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_b8014dcd6b9b8825f36ce51acf04a3476cb0a60d3bf9b8d1fab82e12f1cf4345__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"9508:400:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9659:9:8","nodeType":"YulTypedName","src":"9659:9:8","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"9673:4:8","nodeType":"YulTypedName","src":"9673:4:8","type":""}],"src":"9508:400:8"},{"body":{"nativeSrc":"10087:181:8","nodeType":"YulBlock","src":"10087:181:8","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10104:9:8","nodeType":"YulIdentifier","src":"10104:9:8"},{"kind":"number","nativeSrc":"10115:2:8","nodeType":"YulLiteral","src":"10115:2:8","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"10097:6:8","nodeType":"YulIdentifier","src":"10097:6:8"},"nativeSrc":"10097:21:8","nodeType":"YulFunctionCall","src":"10097:21:8"},"nativeSrc":"10097:21:8","nodeType":"YulExpressionStatement","src":"10097:21:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10138:9:8","nodeType":"YulIdentifier","src":"10138:9:8"},{"kind":"number","nativeSrc":"10149:2:8","nodeType":"YulLiteral","src":"10149:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10134:3:8","nodeType":"YulIdentifier","src":"10134:3:8"},"nativeSrc":"10134:18:8","nodeType":"YulFunctionCall","src":"10134:18:8"},{"kind":"number","nativeSrc":"10154:2:8","nodeType":"YulLiteral","src":"10154:2:8","type":"","value":"31"}],"functionName":{"name":"mstore","nativeSrc":"10127:6:8","nodeType":"YulIdentifier","src":"10127:6:8"},"nativeSrc":"10127:30:8","nodeType":"YulFunctionCall","src":"10127:30:8"},"nativeSrc":"10127:30:8","nodeType":"YulExpressionStatement","src":"10127:30:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10177:9:8","nodeType":"YulIdentifier","src":"10177:9:8"},{"kind":"number","nativeSrc":"10188:2:8","nodeType":"YulLiteral","src":"10188:2:8","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10173:3:8","nodeType":"YulIdentifier","src":"10173:3:8"},"nativeSrc":"10173:18:8","nodeType":"YulFunctionCall","src":"10173:18:8"},{"hexValue":"506c61796572312068617320696e73756666696369656e742066756e64732e","kind":"string","nativeSrc":"10193:33:8","nodeType":"YulLiteral","src":"10193:33:8","type":"","value":"Player1 has insufficient funds."}],"functionName":{"name":"mstore","nativeSrc":"10166:6:8","nodeType":"YulIdentifier","src":"10166:6:8"},"nativeSrc":"10166:61:8","nodeType":"YulFunctionCall","src":"10166:61:8"},"nativeSrc":"10166:61:8","nodeType":"YulExpressionStatement","src":"10166:61:8"},{"nativeSrc":"10236:26:8","nodeType":"YulAssignment","src":"10236:26:8","value":{"arguments":[{"name":"headStart","nativeSrc":"10248:9:8","nodeType":"YulIdentifier","src":"10248:9:8"},{"kind":"number","nativeSrc":"10259:2:8","nodeType":"YulLiteral","src":"10259:2:8","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"10244:3:8","nodeType":"YulIdentifier","src":"10244:3:8"},"nativeSrc":"10244:18:8","nodeType":"YulFunctionCall","src":"10244:18:8"},"variableNames":[{"name":"tail","nativeSrc":"10236:4:8","nodeType":"YulIdentifier","src":"10236:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_2da5768ab6f4a6792842d32845b8d6e6c010a05c2db3bc139b5272f28565fb71__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"9913:355:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10064:9:8","nodeType":"YulTypedName","src":"10064:9:8","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10078:4:8","nodeType":"YulTypedName","src":"10078:4:8","type":""}],"src":"9913:355:8"},{"body":{"nativeSrc":"10447:181:8","nodeType":"YulBlock","src":"10447:181:8","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10464:9:8","nodeType":"YulIdentifier","src":"10464:9:8"},{"kind":"number","nativeSrc":"10475:2:8","nodeType":"YulLiteral","src":"10475:2:8","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"10457:6:8","nodeType":"YulIdentifier","src":"10457:6:8"},"nativeSrc":"10457:21:8","nodeType":"YulFunctionCall","src":"10457:21:8"},"nativeSrc":"10457:21:8","nodeType":"YulExpressionStatement","src":"10457:21:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10498:9:8","nodeType":"YulIdentifier","src":"10498:9:8"},{"kind":"number","nativeSrc":"10509:2:8","nodeType":"YulLiteral","src":"10509:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10494:3:8","nodeType":"YulIdentifier","src":"10494:3:8"},"nativeSrc":"10494:18:8","nodeType":"YulFunctionCall","src":"10494:18:8"},{"kind":"number","nativeSrc":"10514:2:8","nodeType":"YulLiteral","src":"10514:2:8","type":"","value":"31"}],"functionName":{"name":"mstore","nativeSrc":"10487:6:8","nodeType":"YulIdentifier","src":"10487:6:8"},"nativeSrc":"10487:30:8","nodeType":"YulFunctionCall","src":"10487:30:8"},"nativeSrc":"10487:30:8","nodeType":"YulExpressionStatement","src":"10487:30:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10537:9:8","nodeType":"YulIdentifier","src":"10537:9:8"},{"kind":"number","nativeSrc":"10548:2:8","nodeType":"YulLiteral","src":"10548:2:8","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10533:3:8","nodeType":"YulIdentifier","src":"10533:3:8"},"nativeSrc":"10533:18:8","nodeType":"YulFunctionCall","src":"10533:18:8"},{"hexValue":"506c61796572322068617320696e73756666696369656e742066756e64732e","kind":"string","nativeSrc":"10553:33:8","nodeType":"YulLiteral","src":"10553:33:8","type":"","value":"Player2 has insufficient funds."}],"functionName":{"name":"mstore","nativeSrc":"10526:6:8","nodeType":"YulIdentifier","src":"10526:6:8"},"nativeSrc":"10526:61:8","nodeType":"YulFunctionCall","src":"10526:61:8"},"nativeSrc":"10526:61:8","nodeType":"YulExpressionStatement","src":"10526:61:8"},{"nativeSrc":"10596:26:8","nodeType":"YulAssignment","src":"10596:26:8","value":{"arguments":[{"name":"headStart","nativeSrc":"10608:9:8","nodeType":"YulIdentifier","src":"10608:9:8"},{"kind":"number","nativeSrc":"10619:2:8","nodeType":"YulLiteral","src":"10619:2:8","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"10604:3:8","nodeType":"YulIdentifier","src":"10604:3:8"},"nativeSrc":"10604:18:8","nodeType":"YulFunctionCall","src":"10604:18:8"},"variableNames":[{"name":"tail","nativeSrc":"10596:4:8","nodeType":"YulIdentifier","src":"10596:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_547c3876eae61b1efa83e1f9d0d2c672e99c0104b959b6bba9216deb297083a1__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"10273:355:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10424:9:8","nodeType":"YulTypedName","src":"10424:9:8","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10438:4:8","nodeType":"YulTypedName","src":"10438:4:8","type":""}],"src":"10273:355:8"},{"body":{"nativeSrc":"10665:95:8","nodeType":"YulBlock","src":"10665:95:8","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10682:1:8","nodeType":"YulLiteral","src":"10682:1:8","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"10689:3:8","nodeType":"YulLiteral","src":"10689:3:8","type":"","value":"224"},{"kind":"number","nativeSrc":"10694:10:8","nodeType":"YulLiteral","src":"10694:10:8","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"10685:3:8","nodeType":"YulIdentifier","src":"10685:3:8"},"nativeSrc":"10685:20:8","nodeType":"YulFunctionCall","src":"10685:20:8"}],"functionName":{"name":"mstore","nativeSrc":"10675:6:8","nodeType":"YulIdentifier","src":"10675:6:8"},"nativeSrc":"10675:31:8","nodeType":"YulFunctionCall","src":"10675:31:8"},"nativeSrc":"10675:31:8","nodeType":"YulExpressionStatement","src":"10675:31:8"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"10722:1:8","nodeType":"YulLiteral","src":"10722:1:8","type":"","value":"4"},{"kind":"number","nativeSrc":"10725:4:8","nodeType":"YulLiteral","src":"10725:4:8","type":"","value":"0x12"}],"functionName":{"name":"mstore","nativeSrc":"10715:6:8","nodeType":"YulIdentifier","src":"10715:6:8"},"nativeSrc":"10715:15:8","nodeType":"YulFunctionCall","src":"10715:15:8"},"nativeSrc":"10715:15:8","nodeType":"YulExpressionStatement","src":"10715:15:8"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"10746:1:8","nodeType":"YulLiteral","src":"10746:1:8","type":"","value":"0"},{"kind":"number","nativeSrc":"10749:4:8","nodeType":"YulLiteral","src":"10749:4:8","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"10739:6:8","nodeType":"YulIdentifier","src":"10739:6:8"},"nativeSrc":"10739:15:8","nodeType":"YulFunctionCall","src":"10739:15:8"},"nativeSrc":"10739:15:8","nodeType":"YulExpressionStatement","src":"10739:15:8"}]},"name":"panic_error_0x12","nativeSrc":"10633:127:8","nodeType":"YulFunctionDefinition","src":"10633:127:8"},{"body":{"nativeSrc":"10811:171:8","nodeType":"YulBlock","src":"10811:171:8","statements":[{"body":{"nativeSrc":"10842:111:8","nodeType":"YulBlock","src":"10842:111:8","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10863:1:8","nodeType":"YulLiteral","src":"10863:1:8","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"10870:3:8","nodeType":"YulLiteral","src":"10870:3:8","type":"","value":"224"},{"kind":"number","nativeSrc":"10875:10:8","nodeType":"YulLiteral","src":"10875:10:8","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"10866:3:8","nodeType":"YulIdentifier","src":"10866:3:8"},"nativeSrc":"10866:20:8","nodeType":"YulFunctionCall","src":"10866:20:8"}],"functionName":{"name":"mstore","nativeSrc":"10856:6:8","nodeType":"YulIdentifier","src":"10856:6:8"},"nativeSrc":"10856:31:8","nodeType":"YulFunctionCall","src":"10856:31:8"},"nativeSrc":"10856:31:8","nodeType":"YulExpressionStatement","src":"10856:31:8"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"10907:1:8","nodeType":"YulLiteral","src":"10907:1:8","type":"","value":"4"},{"kind":"number","nativeSrc":"10910:4:8","nodeType":"YulLiteral","src":"10910:4:8","type":"","value":"0x12"}],"functionName":{"name":"mstore","nativeSrc":"10900:6:8","nodeType":"YulIdentifier","src":"10900:6:8"},"nativeSrc":"10900:15:8","nodeType":"YulFunctionCall","src":"10900:15:8"},"nativeSrc":"10900:15:8","nodeType":"YulExpressionStatement","src":"10900:15:8"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"10935:1:8","nodeType":"YulLiteral","src":"10935:1:8","type":"","value":"0"},{"kind":"number","nativeSrc":"10938:4:8","nodeType":"YulLiteral","src":"10938:4:8","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"10928:6:8","nodeType":"YulIdentifier","src":"10928:6:8"},"nativeSrc":"10928:15:8","nodeType":"YulFunctionCall","src":"10928:15:8"},"nativeSrc":"10928:15:8","nodeType":"YulExpressionStatement","src":"10928:15:8"}]},"condition":{"arguments":[{"name":"y","nativeSrc":"10831:1:8","nodeType":"YulIdentifier","src":"10831:1:8"}],"functionName":{"name":"iszero","nativeSrc":"10824:6:8","nodeType":"YulIdentifier","src":"10824:6:8"},"nativeSrc":"10824:9:8","nodeType":"YulFunctionCall","src":"10824:9:8"},"nativeSrc":"10821:132:8","nodeType":"YulIf","src":"10821:132:8"},{"nativeSrc":"10962:14:8","nodeType":"YulAssignment","src":"10962:14:8","value":{"arguments":[{"name":"x","nativeSrc":"10971:1:8","nodeType":"YulIdentifier","src":"10971:1:8"},{"name":"y","nativeSrc":"10974:1:8","nodeType":"YulIdentifier","src":"10974:1:8"}],"functionName":{"name":"div","nativeSrc":"10967:3:8","nodeType":"YulIdentifier","src":"10967:3:8"},"nativeSrc":"10967:9:8","nodeType":"YulFunctionCall","src":"10967:9:8"},"variableNames":[{"name":"r","nativeSrc":"10962:1:8","nodeType":"YulIdentifier","src":"10962:1:8"}]}]},"name":"checked_div_t_uint256","nativeSrc":"10765:217:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"10796:1:8","nodeType":"YulTypedName","src":"10796:1:8","type":""},{"name":"y","nativeSrc":"10799:1:8","nodeType":"YulTypedName","src":"10799:1:8","type":""}],"returnVariables":[{"name":"r","nativeSrc":"10805:1:8","nodeType":"YulTypedName","src":"10805:1:8","type":""}],"src":"10765:217:8"},{"body":{"nativeSrc":"11036:79:8","nodeType":"YulBlock","src":"11036:79:8","statements":[{"nativeSrc":"11046:17:8","nodeType":"YulAssignment","src":"11046:17:8","value":{"arguments":[{"name":"x","nativeSrc":"11058:1:8","nodeType":"YulIdentifier","src":"11058:1:8"},{"name":"y","nativeSrc":"11061:1:8","nodeType":"YulIdentifier","src":"11061:1:8"}],"functionName":{"name":"sub","nativeSrc":"11054:3:8","nodeType":"YulIdentifier","src":"11054:3:8"},"nativeSrc":"11054:9:8","nodeType":"YulFunctionCall","src":"11054:9:8"},"variableNames":[{"name":"diff","nativeSrc":"11046:4:8","nodeType":"YulIdentifier","src":"11046:4:8"}]},{"body":{"nativeSrc":"11087:22:8","nodeType":"YulBlock","src":"11087:22:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"11089:16:8","nodeType":"YulIdentifier","src":"11089:16:8"},"nativeSrc":"11089:18:8","nodeType":"YulFunctionCall","src":"11089:18:8"},"nativeSrc":"11089:18:8","nodeType":"YulExpressionStatement","src":"11089:18:8"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"11078:4:8","nodeType":"YulIdentifier","src":"11078:4:8"},{"name":"x","nativeSrc":"11084:1:8","nodeType":"YulIdentifier","src":"11084:1:8"}],"functionName":{"name":"gt","nativeSrc":"11075:2:8","nodeType":"YulIdentifier","src":"11075:2:8"},"nativeSrc":"11075:11:8","nodeType":"YulFunctionCall","src":"11075:11:8"},"nativeSrc":"11072:37:8","nodeType":"YulIf","src":"11072:37:8"}]},"name":"checked_sub_t_uint256","nativeSrc":"10987:128:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"11018:1:8","nodeType":"YulTypedName","src":"11018:1:8","type":""},{"name":"y","nativeSrc":"11021:1:8","nodeType":"YulTypedName","src":"11021:1:8","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"11027:4:8","nodeType":"YulTypedName","src":"11027:4:8","type":""}],"src":"10987:128:8"},{"body":{"nativeSrc":"11172:116:8","nodeType":"YulBlock","src":"11172:116:8","statements":[{"nativeSrc":"11182:20:8","nodeType":"YulAssignment","src":"11182:20:8","value":{"arguments":[{"name":"x","nativeSrc":"11197:1:8","nodeType":"YulIdentifier","src":"11197:1:8"},{"name":"y","nativeSrc":"11200:1:8","nodeType":"YulIdentifier","src":"11200:1:8"}],"functionName":{"name":"mul","nativeSrc":"11193:3:8","nodeType":"YulIdentifier","src":"11193:3:8"},"nativeSrc":"11193:9:8","nodeType":"YulFunctionCall","src":"11193:9:8"},"variableNames":[{"name":"product","nativeSrc":"11182:7:8","nodeType":"YulIdentifier","src":"11182:7:8"}]},{"body":{"nativeSrc":"11260:22:8","nodeType":"YulBlock","src":"11260:22:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"11262:16:8","nodeType":"YulIdentifier","src":"11262:16:8"},"nativeSrc":"11262:18:8","nodeType":"YulFunctionCall","src":"11262:18:8"},"nativeSrc":"11262:18:8","nodeType":"YulExpressionStatement","src":"11262:18:8"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nativeSrc":"11231:1:8","nodeType":"YulIdentifier","src":"11231:1:8"}],"functionName":{"name":"iszero","nativeSrc":"11224:6:8","nodeType":"YulIdentifier","src":"11224:6:8"},"nativeSrc":"11224:9:8","nodeType":"YulFunctionCall","src":"11224:9:8"},{"arguments":[{"name":"y","nativeSrc":"11238:1:8","nodeType":"YulIdentifier","src":"11238:1:8"},{"arguments":[{"name":"product","nativeSrc":"11245:7:8","nodeType":"YulIdentifier","src":"11245:7:8"},{"name":"x","nativeSrc":"11254:1:8","nodeType":"YulIdentifier","src":"11254:1:8"}],"functionName":{"name":"div","nativeSrc":"11241:3:8","nodeType":"YulIdentifier","src":"11241:3:8"},"nativeSrc":"11241:15:8","nodeType":"YulFunctionCall","src":"11241:15:8"}],"functionName":{"name":"eq","nativeSrc":"11235:2:8","nodeType":"YulIdentifier","src":"11235:2:8"},"nativeSrc":"11235:22:8","nodeType":"YulFunctionCall","src":"11235:22:8"}],"functionName":{"name":"or","nativeSrc":"11221:2:8","nodeType":"YulIdentifier","src":"11221:2:8"},"nativeSrc":"11221:37:8","nodeType":"YulFunctionCall","src":"11221:37:8"}],"functionName":{"name":"iszero","nativeSrc":"11214:6:8","nodeType":"YulIdentifier","src":"11214:6:8"},"nativeSrc":"11214:45:8","nodeType":"YulFunctionCall","src":"11214:45:8"},"nativeSrc":"11211:71:8","nodeType":"YulIf","src":"11211:71:8"}]},"name":"checked_mul_t_uint256","nativeSrc":"11120:168:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"11151:1:8","nodeType":"YulTypedName","src":"11151:1:8","type":""},{"name":"y","nativeSrc":"11154:1:8","nodeType":"YulTypedName","src":"11154:1:8","type":""}],"returnVariables":[{"name":"product","nativeSrc":"11160:7:8","nodeType":"YulTypedName","src":"11160:7:8","type":""}],"src":"11120:168:8"},{"body":{"nativeSrc":"11467:231:8","nodeType":"YulBlock","src":"11467:231:8","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11484:9:8","nodeType":"YulIdentifier","src":"11484:9:8"},{"kind":"number","nativeSrc":"11495:2:8","nodeType":"YulLiteral","src":"11495:2:8","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"11477:6:8","nodeType":"YulIdentifier","src":"11477:6:8"},"nativeSrc":"11477:21:8","nodeType":"YulFunctionCall","src":"11477:21:8"},"nativeSrc":"11477:21:8","nodeType":"YulExpressionStatement","src":"11477:21:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11518:9:8","nodeType":"YulIdentifier","src":"11518:9:8"},{"kind":"number","nativeSrc":"11529:2:8","nodeType":"YulLiteral","src":"11529:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11514:3:8","nodeType":"YulIdentifier","src":"11514:3:8"},"nativeSrc":"11514:18:8","nodeType":"YulFunctionCall","src":"11514:18:8"},{"kind":"number","nativeSrc":"11534:2:8","nodeType":"YulLiteral","src":"11534:2:8","type":"","value":"41"}],"functionName":{"name":"mstore","nativeSrc":"11507:6:8","nodeType":"YulIdentifier","src":"11507:6:8"},"nativeSrc":"11507:30:8","nodeType":"YulFunctionCall","src":"11507:30:8"},"nativeSrc":"11507:30:8","nodeType":"YulExpressionStatement","src":"11507:30:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11557:9:8","nodeType":"YulIdentifier","src":"11557:9:8"},{"kind":"number","nativeSrc":"11568:2:8","nodeType":"YulLiteral","src":"11568:2:8","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11553:3:8","nodeType":"YulIdentifier","src":"11553:3:8"},"nativeSrc":"11553:18:8","nodeType":"YulFunctionCall","src":"11553:18:8"},{"hexValue":"5769746864726177616c20616d6f756e74206d75737420626520677265617465","kind":"string","nativeSrc":"11573:34:8","nodeType":"YulLiteral","src":"11573:34:8","type":"","value":"Withdrawal amount must be greate"}],"functionName":{"name":"mstore","nativeSrc":"11546:6:8","nodeType":"YulIdentifier","src":"11546:6:8"},"nativeSrc":"11546:62:8","nodeType":"YulFunctionCall","src":"11546:62:8"},"nativeSrc":"11546:62:8","nodeType":"YulExpressionStatement","src":"11546:62:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11628:9:8","nodeType":"YulIdentifier","src":"11628:9:8"},{"kind":"number","nativeSrc":"11639:2:8","nodeType":"YulLiteral","src":"11639:2:8","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"11624:3:8","nodeType":"YulIdentifier","src":"11624:3:8"},"nativeSrc":"11624:18:8","nodeType":"YulFunctionCall","src":"11624:18:8"},{"hexValue":"72207468616e20302e","kind":"string","nativeSrc":"11644:11:8","nodeType":"YulLiteral","src":"11644:11:8","type":"","value":"r than 0."}],"functionName":{"name":"mstore","nativeSrc":"11617:6:8","nodeType":"YulIdentifier","src":"11617:6:8"},"nativeSrc":"11617:39:8","nodeType":"YulFunctionCall","src":"11617:39:8"},"nativeSrc":"11617:39:8","nodeType":"YulExpressionStatement","src":"11617:39:8"},{"nativeSrc":"11665:27:8","nodeType":"YulAssignment","src":"11665:27:8","value":{"arguments":[{"name":"headStart","nativeSrc":"11677:9:8","nodeType":"YulIdentifier","src":"11677:9:8"},{"kind":"number","nativeSrc":"11688:3:8","nodeType":"YulLiteral","src":"11688:3:8","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"11673:3:8","nodeType":"YulIdentifier","src":"11673:3:8"},"nativeSrc":"11673:19:8","nodeType":"YulFunctionCall","src":"11673:19:8"},"variableNames":[{"name":"tail","nativeSrc":"11665:4:8","nodeType":"YulIdentifier","src":"11665:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_ddb92dca1b14b7f86de22eb952ec5692b5d32ff7d579451d25c03288285572d1__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"11293:405:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11444:9:8","nodeType":"YulTypedName","src":"11444:9:8","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11458:4:8","nodeType":"YulTypedName","src":"11458:4:8","type":""}],"src":"11293:405:8"},{"body":{"nativeSrc":"11877:181:8","nodeType":"YulBlock","src":"11877:181:8","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11894:9:8","nodeType":"YulIdentifier","src":"11894:9:8"},{"kind":"number","nativeSrc":"11905:2:8","nodeType":"YulLiteral","src":"11905:2:8","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"11887:6:8","nodeType":"YulIdentifier","src":"11887:6:8"},"nativeSrc":"11887:21:8","nodeType":"YulFunctionCall","src":"11887:21:8"},"nativeSrc":"11887:21:8","nodeType":"YulExpressionStatement","src":"11887:21:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11928:9:8","nodeType":"YulIdentifier","src":"11928:9:8"},{"kind":"number","nativeSrc":"11939:2:8","nodeType":"YulLiteral","src":"11939:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11924:3:8","nodeType":"YulIdentifier","src":"11924:3:8"},"nativeSrc":"11924:18:8","nodeType":"YulFunctionCall","src":"11924:18:8"},{"kind":"number","nativeSrc":"11944:2:8","nodeType":"YulLiteral","src":"11944:2:8","type":"","value":"31"}],"functionName":{"name":"mstore","nativeSrc":"11917:6:8","nodeType":"YulIdentifier","src":"11917:6:8"},"nativeSrc":"11917:30:8","nodeType":"YulFunctionCall","src":"11917:30:8"},"nativeSrc":"11917:30:8","nodeType":"YulExpressionStatement","src":"11917:30:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11967:9:8","nodeType":"YulIdentifier","src":"11967:9:8"},{"kind":"number","nativeSrc":"11978:2:8","nodeType":"YulLiteral","src":"11978:2:8","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11963:3:8","nodeType":"YulIdentifier","src":"11963:3:8"},"nativeSrc":"11963:18:8","nodeType":"YulFunctionCall","src":"11963:18:8"},{"hexValue":"496e73756666696369656e742066756e647320746f2077697468647261772e","kind":"string","nativeSrc":"11983:33:8","nodeType":"YulLiteral","src":"11983:33:8","type":"","value":"Insufficient funds to withdraw."}],"functionName":{"name":"mstore","nativeSrc":"11956:6:8","nodeType":"YulIdentifier","src":"11956:6:8"},"nativeSrc":"11956:61:8","nodeType":"YulFunctionCall","src":"11956:61:8"},"nativeSrc":"11956:61:8","nodeType":"YulExpressionStatement","src":"11956:61:8"},{"nativeSrc":"12026:26:8","nodeType":"YulAssignment","src":"12026:26:8","value":{"arguments":[{"name":"headStart","nativeSrc":"12038:9:8","nodeType":"YulIdentifier","src":"12038:9:8"},{"kind":"number","nativeSrc":"12049:2:8","nodeType":"YulLiteral","src":"12049:2:8","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"12034:3:8","nodeType":"YulIdentifier","src":"12034:3:8"},"nativeSrc":"12034:18:8","nodeType":"YulFunctionCall","src":"12034:18:8"},"variableNames":[{"name":"tail","nativeSrc":"12026:4:8","nodeType":"YulIdentifier","src":"12026:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_a1f811b878a206abc1b2ab57b5c43ceee3594f84b9fd983a59ec653d7b970398__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"11703:355:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11854:9:8","nodeType":"YulTypedName","src":"11854:9:8","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11868:4:8","nodeType":"YulTypedName","src":"11868:4:8","type":""}],"src":"11703:355:8"},{"body":{"nativeSrc":"12237:232:8","nodeType":"YulBlock","src":"12237:232:8","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12254:9:8","nodeType":"YulIdentifier","src":"12254:9:8"},{"kind":"number","nativeSrc":"12265:2:8","nodeType":"YulLiteral","src":"12265:2:8","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"12247:6:8","nodeType":"YulIdentifier","src":"12247:6:8"},"nativeSrc":"12247:21:8","nodeType":"YulFunctionCall","src":"12247:21:8"},"nativeSrc":"12247:21:8","nodeType":"YulExpressionStatement","src":"12247:21:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12288:9:8","nodeType":"YulIdentifier","src":"12288:9:8"},{"kind":"number","nativeSrc":"12299:2:8","nodeType":"YulLiteral","src":"12299:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12284:3:8","nodeType":"YulIdentifier","src":"12284:3:8"},"nativeSrc":"12284:18:8","nodeType":"YulFunctionCall","src":"12284:18:8"},{"kind":"number","nativeSrc":"12304:2:8","nodeType":"YulLiteral","src":"12304:2:8","type":"","value":"42"}],"functionName":{"name":"mstore","nativeSrc":"12277:6:8","nodeType":"YulIdentifier","src":"12277:6:8"},"nativeSrc":"12277:30:8","nodeType":"YulFunctionCall","src":"12277:30:8"},"nativeSrc":"12277:30:8","nodeType":"YulExpressionStatement","src":"12277:30:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12327:9:8","nodeType":"YulIdentifier","src":"12327:9:8"},{"kind":"number","nativeSrc":"12338:2:8","nodeType":"YulLiteral","src":"12338:2:8","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12323:3:8","nodeType":"YulIdentifier","src":"12323:3:8"},"nativeSrc":"12323:18:8","nodeType":"YulFunctionCall","src":"12323:18:8"},{"hexValue":"43616c6c6572206973206e6f7420612072656769737465726564206261636b75","kind":"string","nativeSrc":"12343:34:8","nodeType":"YulLiteral","src":"12343:34:8","type":"","value":"Caller is not a registered backu"}],"functionName":{"name":"mstore","nativeSrc":"12316:6:8","nodeType":"YulIdentifier","src":"12316:6:8"},"nativeSrc":"12316:62:8","nodeType":"YulFunctionCall","src":"12316:62:8"},"nativeSrc":"12316:62:8","nodeType":"YulExpressionStatement","src":"12316:62:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12398:9:8","nodeType":"YulIdentifier","src":"12398:9:8"},{"kind":"number","nativeSrc":"12409:2:8","nodeType":"YulLiteral","src":"12409:2:8","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"12394:3:8","nodeType":"YulIdentifier","src":"12394:3:8"},"nativeSrc":"12394:18:8","nodeType":"YulFunctionCall","src":"12394:18:8"},{"hexValue":"7020616464726573732e","kind":"string","nativeSrc":"12414:12:8","nodeType":"YulLiteral","src":"12414:12:8","type":"","value":"p address."}],"functionName":{"name":"mstore","nativeSrc":"12387:6:8","nodeType":"YulIdentifier","src":"12387:6:8"},"nativeSrc":"12387:40:8","nodeType":"YulFunctionCall","src":"12387:40:8"},"nativeSrc":"12387:40:8","nodeType":"YulExpressionStatement","src":"12387:40:8"},{"nativeSrc":"12436:27:8","nodeType":"YulAssignment","src":"12436:27:8","value":{"arguments":[{"name":"headStart","nativeSrc":"12448:9:8","nodeType":"YulIdentifier","src":"12448:9:8"},{"kind":"number","nativeSrc":"12459:3:8","nodeType":"YulLiteral","src":"12459:3:8","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"12444:3:8","nodeType":"YulIdentifier","src":"12444:3:8"},"nativeSrc":"12444:19:8","nodeType":"YulFunctionCall","src":"12444:19:8"},"variableNames":[{"name":"tail","nativeSrc":"12436:4:8","nodeType":"YulIdentifier","src":"12436:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_87055f61685ba488261bfa7add3cec59d88745ad3c44d9b55ad8388c453ca9aa__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"12063:406:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12214:9:8","nodeType":"YulTypedName","src":"12214:9:8","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12228:4:8","nodeType":"YulTypedName","src":"12228:4:8","type":""}],"src":"12063:406:8"},{"body":{"nativeSrc":"12648:178:8","nodeType":"YulBlock","src":"12648:178:8","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12665:9:8","nodeType":"YulIdentifier","src":"12665:9:8"},{"kind":"number","nativeSrc":"12676:2:8","nodeType":"YulLiteral","src":"12676:2:8","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"12658:6:8","nodeType":"YulIdentifier","src":"12658:6:8"},"nativeSrc":"12658:21:8","nodeType":"YulFunctionCall","src":"12658:21:8"},"nativeSrc":"12658:21:8","nodeType":"YulExpressionStatement","src":"12658:21:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12699:9:8","nodeType":"YulIdentifier","src":"12699:9:8"},{"kind":"number","nativeSrc":"12710:2:8","nodeType":"YulLiteral","src":"12710:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12695:3:8","nodeType":"YulIdentifier","src":"12695:3:8"},"nativeSrc":"12695:18:8","nodeType":"YulFunctionCall","src":"12695:18:8"},{"kind":"number","nativeSrc":"12715:2:8","nodeType":"YulLiteral","src":"12715:2:8","type":"","value":"28"}],"functionName":{"name":"mstore","nativeSrc":"12688:6:8","nodeType":"YulIdentifier","src":"12688:6:8"},"nativeSrc":"12688:30:8","nodeType":"YulFunctionCall","src":"12688:30:8"},"nativeSrc":"12688:30:8","nodeType":"YulExpressionStatement","src":"12688:30:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12738:9:8","nodeType":"YulIdentifier","src":"12738:9:8"},{"kind":"number","nativeSrc":"12749:2:8","nodeType":"YulLiteral","src":"12749:2:8","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12734:3:8","nodeType":"YulIdentifier","src":"12734:3:8"},"nativeSrc":"12734:18:8","nodeType":"YulFunctionCall","src":"12734:18:8"},{"hexValue":"496e73756666696369656e74206665657320636f6c6c65637465642e","kind":"string","nativeSrc":"12754:30:8","nodeType":"YulLiteral","src":"12754:30:8","type":"","value":"Insufficient fees collected."}],"functionName":{"name":"mstore","nativeSrc":"12727:6:8","nodeType":"YulIdentifier","src":"12727:6:8"},"nativeSrc":"12727:58:8","nodeType":"YulFunctionCall","src":"12727:58:8"},"nativeSrc":"12727:58:8","nodeType":"YulExpressionStatement","src":"12727:58:8"},{"nativeSrc":"12794:26:8","nodeType":"YulAssignment","src":"12794:26:8","value":{"arguments":[{"name":"headStart","nativeSrc":"12806:9:8","nodeType":"YulIdentifier","src":"12806:9:8"},{"kind":"number","nativeSrc":"12817:2:8","nodeType":"YulLiteral","src":"12817:2:8","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"12802:3:8","nodeType":"YulIdentifier","src":"12802:3:8"},"nativeSrc":"12802:18:8","nodeType":"YulFunctionCall","src":"12802:18:8"},"variableNames":[{"name":"tail","nativeSrc":"12794:4:8","nodeType":"YulIdentifier","src":"12794:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_29940d1dcde580d400bfd918827344f04d3b90b6d8b8716df5b5822db0156f4c__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"12474:352:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12625:9:8","nodeType":"YulTypedName","src":"12625:9:8","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12639:4:8","nodeType":"YulTypedName","src":"12639:4:8","type":""}],"src":"12474:352:8"},{"body":{"nativeSrc":"13005:237:8","nodeType":"YulBlock","src":"13005:237:8","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13022:9:8","nodeType":"YulIdentifier","src":"13022:9:8"},{"kind":"number","nativeSrc":"13033:2:8","nodeType":"YulLiteral","src":"13033:2:8","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"13015:6:8","nodeType":"YulIdentifier","src":"13015:6:8"},"nativeSrc":"13015:21:8","nodeType":"YulFunctionCall","src":"13015:21:8"},"nativeSrc":"13015:21:8","nodeType":"YulExpressionStatement","src":"13015:21:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13056:9:8","nodeType":"YulIdentifier","src":"13056:9:8"},{"kind":"number","nativeSrc":"13067:2:8","nodeType":"YulLiteral","src":"13067:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13052:3:8","nodeType":"YulIdentifier","src":"13052:3:8"},"nativeSrc":"13052:18:8","nodeType":"YulFunctionCall","src":"13052:18:8"},{"kind":"number","nativeSrc":"13072:2:8","nodeType":"YulLiteral","src":"13072:2:8","type":"","value":"47"}],"functionName":{"name":"mstore","nativeSrc":"13045:6:8","nodeType":"YulIdentifier","src":"13045:6:8"},"nativeSrc":"13045:30:8","nodeType":"YulFunctionCall","src":"13045:30:8"},"nativeSrc":"13045:30:8","nodeType":"YulExpressionStatement","src":"13045:30:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13095:9:8","nodeType":"YulIdentifier","src":"13095:9:8"},{"kind":"number","nativeSrc":"13106:2:8","nodeType":"YulLiteral","src":"13106:2:8","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13091:3:8","nodeType":"YulIdentifier","src":"13091:3:8"},"nativeSrc":"13091:18:8","nodeType":"YulFunctionCall","src":"13091:18:8"},{"hexValue":"4e6f7420617574686f72697a656420746f2072656d6f76652074686973207265","kind":"string","nativeSrc":"13111:34:8","nodeType":"YulLiteral","src":"13111:34:8","type":"","value":"Not authorized to remove this re"}],"functionName":{"name":"mstore","nativeSrc":"13084:6:8","nodeType":"YulIdentifier","src":"13084:6:8"},"nativeSrc":"13084:62:8","nodeType":"YulFunctionCall","src":"13084:62:8"},"nativeSrc":"13084:62:8","nodeType":"YulExpressionStatement","src":"13084:62:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13166:9:8","nodeType":"YulIdentifier","src":"13166:9:8"},{"kind":"number","nativeSrc":"13177:2:8","nodeType":"YulLiteral","src":"13177:2:8","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"13162:3:8","nodeType":"YulIdentifier","src":"13162:3:8"},"nativeSrc":"13162:18:8","nodeType":"YulFunctionCall","src":"13162:18:8"},{"hexValue":"636f7665727920616464726573732e","kind":"string","nativeSrc":"13182:17:8","nodeType":"YulLiteral","src":"13182:17:8","type":"","value":"covery address."}],"functionName":{"name":"mstore","nativeSrc":"13155:6:8","nodeType":"YulIdentifier","src":"13155:6:8"},"nativeSrc":"13155:45:8","nodeType":"YulFunctionCall","src":"13155:45:8"},"nativeSrc":"13155:45:8","nodeType":"YulExpressionStatement","src":"13155:45:8"},{"nativeSrc":"13209:27:8","nodeType":"YulAssignment","src":"13209:27:8","value":{"arguments":[{"name":"headStart","nativeSrc":"13221:9:8","nodeType":"YulIdentifier","src":"13221:9:8"},{"kind":"number","nativeSrc":"13232:3:8","nodeType":"YulLiteral","src":"13232:3:8","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"13217:3:8","nodeType":"YulIdentifier","src":"13217:3:8"},"nativeSrc":"13217:19:8","nodeType":"YulFunctionCall","src":"13217:19:8"},"variableNames":[{"name":"tail","nativeSrc":"13209:4:8","nodeType":"YulIdentifier","src":"13209:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_cdf63a127d275dc7fb43022f13aa5adb46231f2519f921c4c26be0d00a369386__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"12831:411:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12982:9:8","nodeType":"YulTypedName","src":"12982:9:8","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12996:4:8","nodeType":"YulTypedName","src":"12996:4:8","type":""}],"src":"12831:411:8"},{"body":{"nativeSrc":"13279:95:8","nodeType":"YulBlock","src":"13279:95:8","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"13296:1:8","nodeType":"YulLiteral","src":"13296:1:8","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"13303:3:8","nodeType":"YulLiteral","src":"13303:3:8","type":"","value":"224"},{"kind":"number","nativeSrc":"13308:10:8","nodeType":"YulLiteral","src":"13308:10:8","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"13299:3:8","nodeType":"YulIdentifier","src":"13299:3:8"},"nativeSrc":"13299:20:8","nodeType":"YulFunctionCall","src":"13299:20:8"}],"functionName":{"name":"mstore","nativeSrc":"13289:6:8","nodeType":"YulIdentifier","src":"13289:6:8"},"nativeSrc":"13289:31:8","nodeType":"YulFunctionCall","src":"13289:31:8"},"nativeSrc":"13289:31:8","nodeType":"YulExpressionStatement","src":"13289:31:8"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"13336:1:8","nodeType":"YulLiteral","src":"13336:1:8","type":"","value":"4"},{"kind":"number","nativeSrc":"13339:4:8","nodeType":"YulLiteral","src":"13339:4:8","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"13329:6:8","nodeType":"YulIdentifier","src":"13329:6:8"},"nativeSrc":"13329:15:8","nodeType":"YulFunctionCall","src":"13329:15:8"},"nativeSrc":"13329:15:8","nodeType":"YulExpressionStatement","src":"13329:15:8"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"13360:1:8","nodeType":"YulLiteral","src":"13360:1:8","type":"","value":"0"},{"kind":"number","nativeSrc":"13363:4:8","nodeType":"YulLiteral","src":"13363:4:8","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"13353:6:8","nodeType":"YulIdentifier","src":"13353:6:8"},"nativeSrc":"13353:15:8","nodeType":"YulFunctionCall","src":"13353:15:8"},"nativeSrc":"13353:15:8","nodeType":"YulExpressionStatement","src":"13353:15:8"}]},"name":"panic_error_0x32","nativeSrc":"13247:127:8","nodeType":"YulFunctionDefinition","src":"13247:127:8"},{"body":{"nativeSrc":"13411:95:8","nodeType":"YulBlock","src":"13411:95:8","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"13428:1:8","nodeType":"YulLiteral","src":"13428:1:8","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"13435:3:8","nodeType":"YulLiteral","src":"13435:3:8","type":"","value":"224"},{"kind":"number","nativeSrc":"13440:10:8","nodeType":"YulLiteral","src":"13440:10:8","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"13431:3:8","nodeType":"YulIdentifier","src":"13431:3:8"},"nativeSrc":"13431:20:8","nodeType":"YulFunctionCall","src":"13431:20:8"}],"functionName":{"name":"mstore","nativeSrc":"13421:6:8","nodeType":"YulIdentifier","src":"13421:6:8"},"nativeSrc":"13421:31:8","nodeType":"YulFunctionCall","src":"13421:31:8"},"nativeSrc":"13421:31:8","nodeType":"YulExpressionStatement","src":"13421:31:8"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"13468:1:8","nodeType":"YulLiteral","src":"13468:1:8","type":"","value":"4"},{"kind":"number","nativeSrc":"13471:4:8","nodeType":"YulLiteral","src":"13471:4:8","type":"","value":"0x31"}],"functionName":{"name":"mstore","nativeSrc":"13461:6:8","nodeType":"YulIdentifier","src":"13461:6:8"},"nativeSrc":"13461:15:8","nodeType":"YulFunctionCall","src":"13461:15:8"},"nativeSrc":"13461:15:8","nodeType":"YulExpressionStatement","src":"13461:15:8"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"13492:1:8","nodeType":"YulLiteral","src":"13492:1:8","type":"","value":"0"},{"kind":"number","nativeSrc":"13495:4:8","nodeType":"YulLiteral","src":"13495:4:8","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"13485:6:8","nodeType":"YulIdentifier","src":"13485:6:8"},"nativeSrc":"13485:15:8","nodeType":"YulFunctionCall","src":"13485:15:8"},"nativeSrc":"13485:15:8","nodeType":"YulExpressionStatement","src":"13485:15:8"}]},"name":"panic_error_0x31","nativeSrc":"13379:127:8","nodeType":"YulFunctionDefinition","src":"13379:127:8"},{"body":{"nativeSrc":"13685:237:8","nodeType":"YulBlock","src":"13685:237:8","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13702:9:8","nodeType":"YulIdentifier","src":"13702:9:8"},{"kind":"number","nativeSrc":"13713:2:8","nodeType":"YulLiteral","src":"13713:2:8","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"13695:6:8","nodeType":"YulIdentifier","src":"13695:6:8"},"nativeSrc":"13695:21:8","nodeType":"YulFunctionCall","src":"13695:21:8"},"nativeSrc":"13695:21:8","nodeType":"YulExpressionStatement","src":"13695:21:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13736:9:8","nodeType":"YulIdentifier","src":"13736:9:8"},{"kind":"number","nativeSrc":"13747:2:8","nodeType":"YulLiteral","src":"13747:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13732:3:8","nodeType":"YulIdentifier","src":"13732:3:8"},"nativeSrc":"13732:18:8","nodeType":"YulFunctionCall","src":"13732:18:8"},{"kind":"number","nativeSrc":"13752:2:8","nodeType":"YulLiteral","src":"13752:2:8","type":"","value":"47"}],"functionName":{"name":"mstore","nativeSrc":"13725:6:8","nodeType":"YulIdentifier","src":"13725:6:8"},"nativeSrc":"13725:30:8","nodeType":"YulFunctionCall","src":"13725:30:8"},"nativeSrc":"13725:30:8","nodeType":"YulExpressionStatement","src":"13725:30:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13775:9:8","nodeType":"YulIdentifier","src":"13775:9:8"},{"kind":"number","nativeSrc":"13786:2:8","nodeType":"YulLiteral","src":"13786:2:8","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13771:3:8","nodeType":"YulIdentifier","src":"13771:3:8"},"nativeSrc":"13771:18:8","nodeType":"YulFunctionCall","src":"13771:18:8"},{"hexValue":"47616d6520656974686572206e6f742063726561746564206f7220697320616c","kind":"string","nativeSrc":"13791:34:8","nodeType":"YulLiteral","src":"13791:34:8","type":"","value":"Game either not created or is al"}],"functionName":{"name":"mstore","nativeSrc":"13764:6:8","nodeType":"YulIdentifier","src":"13764:6:8"},"nativeSrc":"13764:62:8","nodeType":"YulFunctionCall","src":"13764:62:8"},"nativeSrc":"13764:62:8","nodeType":"YulExpressionStatement","src":"13764:62:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13846:9:8","nodeType":"YulIdentifier","src":"13846:9:8"},{"kind":"number","nativeSrc":"13857:2:8","nodeType":"YulLiteral","src":"13857:2:8","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"13842:3:8","nodeType":"YulIdentifier","src":"13842:3:8"},"nativeSrc":"13842:18:8","nodeType":"YulFunctionCall","src":"13842:18:8"},{"hexValue":"72656164792066696e69736865642e","kind":"string","nativeSrc":"13862:17:8","nodeType":"YulLiteral","src":"13862:17:8","type":"","value":"ready finished."}],"functionName":{"name":"mstore","nativeSrc":"13835:6:8","nodeType":"YulIdentifier","src":"13835:6:8"},"nativeSrc":"13835:45:8","nodeType":"YulFunctionCall","src":"13835:45:8"},"nativeSrc":"13835:45:8","nodeType":"YulExpressionStatement","src":"13835:45:8"},{"nativeSrc":"13889:27:8","nodeType":"YulAssignment","src":"13889:27:8","value":{"arguments":[{"name":"headStart","nativeSrc":"13901:9:8","nodeType":"YulIdentifier","src":"13901:9:8"},{"kind":"number","nativeSrc":"13912:3:8","nodeType":"YulLiteral","src":"13912:3:8","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"13897:3:8","nodeType":"YulIdentifier","src":"13897:3:8"},"nativeSrc":"13897:19:8","nodeType":"YulFunctionCall","src":"13897:19:8"},"variableNames":[{"name":"tail","nativeSrc":"13889:4:8","nodeType":"YulIdentifier","src":"13889:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_fadc0c8263f5d683f72a361984185a741a0b39b31acffee50958c78362b4d60e__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"13511:411:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13662:9:8","nodeType":"YulTypedName","src":"13662:9:8","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13676:4:8","nodeType":"YulTypedName","src":"13676:4:8","type":""}],"src":"13511:411:8"},{"body":{"nativeSrc":"13959:95:8","nodeType":"YulBlock","src":"13959:95:8","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"13976:1:8","nodeType":"YulLiteral","src":"13976:1:8","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"13983:3:8","nodeType":"YulLiteral","src":"13983:3:8","type":"","value":"224"},{"kind":"number","nativeSrc":"13988:10:8","nodeType":"YulLiteral","src":"13988:10:8","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"13979:3:8","nodeType":"YulIdentifier","src":"13979:3:8"},"nativeSrc":"13979:20:8","nodeType":"YulFunctionCall","src":"13979:20:8"}],"functionName":{"name":"mstore","nativeSrc":"13969:6:8","nodeType":"YulIdentifier","src":"13969:6:8"},"nativeSrc":"13969:31:8","nodeType":"YulFunctionCall","src":"13969:31:8"},"nativeSrc":"13969:31:8","nodeType":"YulExpressionStatement","src":"13969:31:8"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"14016:1:8","nodeType":"YulLiteral","src":"14016:1:8","type":"","value":"4"},{"kind":"number","nativeSrc":"14019:4:8","nodeType":"YulLiteral","src":"14019:4:8","type":"","value":"0x21"}],"functionName":{"name":"mstore","nativeSrc":"14009:6:8","nodeType":"YulIdentifier","src":"14009:6:8"},"nativeSrc":"14009:15:8","nodeType":"YulFunctionCall","src":"14009:15:8"},"nativeSrc":"14009:15:8","nodeType":"YulExpressionStatement","src":"14009:15:8"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"14040:1:8","nodeType":"YulLiteral","src":"14040:1:8","type":"","value":"0"},{"kind":"number","nativeSrc":"14043:4:8","nodeType":"YulLiteral","src":"14043:4:8","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"14033:6:8","nodeType":"YulIdentifier","src":"14033:6:8"},"nativeSrc":"14033:15:8","nodeType":"YulFunctionCall","src":"14033:15:8"},"nativeSrc":"14033:15:8","nodeType":"YulExpressionStatement","src":"14033:15:8"}]},"name":"panic_error_0x21","nativeSrc":"13927:127:8","nodeType":"YulFunctionDefinition","src":"13927:127:8"},{"body":{"nativeSrc":"14173:229:8","nodeType":"YulBlock","src":"14173:229:8","statements":[{"nativeSrc":"14183:26:8","nodeType":"YulAssignment","src":"14183:26:8","value":{"arguments":[{"name":"headStart","nativeSrc":"14195:9:8","nodeType":"YulIdentifier","src":"14195:9:8"},{"kind":"number","nativeSrc":"14206:2:8","nodeType":"YulLiteral","src":"14206:2:8","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14191:3:8","nodeType":"YulIdentifier","src":"14191:3:8"},"nativeSrc":"14191:18:8","nodeType":"YulFunctionCall","src":"14191:18:8"},"variableNames":[{"name":"tail","nativeSrc":"14183:4:8","nodeType":"YulIdentifier","src":"14183:4:8"}]},{"body":{"nativeSrc":"14251:111:8","nodeType":"YulBlock","src":"14251:111:8","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"14272:1:8","nodeType":"YulLiteral","src":"14272:1:8","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"14279:3:8","nodeType":"YulLiteral","src":"14279:3:8","type":"","value":"224"},{"kind":"number","nativeSrc":"14284:10:8","nodeType":"YulLiteral","src":"14284:10:8","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"14275:3:8","nodeType":"YulIdentifier","src":"14275:3:8"},"nativeSrc":"14275:20:8","nodeType":"YulFunctionCall","src":"14275:20:8"}],"functionName":{"name":"mstore","nativeSrc":"14265:6:8","nodeType":"YulIdentifier","src":"14265:6:8"},"nativeSrc":"14265:31:8","nodeType":"YulFunctionCall","src":"14265:31:8"},"nativeSrc":"14265:31:8","nodeType":"YulExpressionStatement","src":"14265:31:8"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"14316:1:8","nodeType":"YulLiteral","src":"14316:1:8","type":"","value":"4"},{"kind":"number","nativeSrc":"14319:4:8","nodeType":"YulLiteral","src":"14319:4:8","type":"","value":"0x21"}],"functionName":{"name":"mstore","nativeSrc":"14309:6:8","nodeType":"YulIdentifier","src":"14309:6:8"},"nativeSrc":"14309:15:8","nodeType":"YulFunctionCall","src":"14309:15:8"},"nativeSrc":"14309:15:8","nodeType":"YulExpressionStatement","src":"14309:15:8"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"14344:1:8","nodeType":"YulLiteral","src":"14344:1:8","type":"","value":"0"},{"kind":"number","nativeSrc":"14347:4:8","nodeType":"YulLiteral","src":"14347:4:8","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"14337:6:8","nodeType":"YulIdentifier","src":"14337:6:8"},"nativeSrc":"14337:15:8","nodeType":"YulFunctionCall","src":"14337:15:8"},"nativeSrc":"14337:15:8","nodeType":"YulExpressionStatement","src":"14337:15:8"}]},"condition":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"14231:6:8","nodeType":"YulIdentifier","src":"14231:6:8"},{"kind":"number","nativeSrc":"14239:1:8","nodeType":"YulLiteral","src":"14239:1:8","type":"","value":"3"}],"functionName":{"name":"lt","nativeSrc":"14228:2:8","nodeType":"YulIdentifier","src":"14228:2:8"},"nativeSrc":"14228:13:8","nodeType":"YulFunctionCall","src":"14228:13:8"}],"functionName":{"name":"iszero","nativeSrc":"14221:6:8","nodeType":"YulIdentifier","src":"14221:6:8"},"nativeSrc":"14221:21:8","nodeType":"YulFunctionCall","src":"14221:21:8"},"nativeSrc":"14218:144:8","nodeType":"YulIf","src":"14218:144:8"},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"14378:9:8","nodeType":"YulIdentifier","src":"14378:9:8"},{"name":"value0","nativeSrc":"14389:6:8","nodeType":"YulIdentifier","src":"14389:6:8"}],"functionName":{"name":"mstore","nativeSrc":"14371:6:8","nodeType":"YulIdentifier","src":"14371:6:8"},"nativeSrc":"14371:25:8","nodeType":"YulFunctionCall","src":"14371:25:8"},"nativeSrc":"14371:25:8","nodeType":"YulExpressionStatement","src":"14371:25:8"}]},"name":"abi_encode_tuple_t_enum$_GameResult_$5043__to_t_uint8__fromStack_reversed","nativeSrc":"14059:343:8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14142:9:8","nodeType":"YulTypedName","src":"14142:9:8","type":""},{"name":"value0","nativeSrc":"14153:6:8","nodeType":"YulTypedName","src":"14153:6:8","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"14164:4:8","nodeType":"YulTypedName","src":"14164:4:8","type":""}],"src":"14059:343:8"},{"body":{"nativeSrc":"14439:95:8","nodeType":"YulBlock","src":"14439:95:8","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"14456:1:8","nodeType":"YulLiteral","src":"14456:1:8","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"14463:3:8","nodeType":"YulLiteral","src":"14463:3:8","type":"","value":"224"},{"kind":"number","nativeSrc":"14468:10:8","nodeType":"YulLiteral","src":"14468:10:8","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"14459:3:8","nodeType":"YulIdentifier","src":"14459:3:8"},"nativeSrc":"14459:20:8","nodeType":"YulFunctionCall","src":"14459:20:8"}],"functionName":{"name":"mstore","nativeSrc":"14449:6:8","nodeType":"YulIdentifier","src":"14449:6:8"},"nativeSrc":"14449:31:8","nodeType":"YulFunctionCall","src":"14449:31:8"},"nativeSrc":"14449:31:8","nodeType":"YulExpressionStatement","src":"14449:31:8"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"14496:1:8","nodeType":"YulLiteral","src":"14496:1:8","type":"","value":"4"},{"kind":"number","nativeSrc":"14499:4:8","nodeType":"YulLiteral","src":"14499:4:8","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"14489:6:8","nodeType":"YulIdentifier","src":"14489:6:8"},"nativeSrc":"14489:15:8","nodeType":"YulFunctionCall","src":"14489:15:8"},"nativeSrc":"14489:15:8","nodeType":"YulExpressionStatement","src":"14489:15:8"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"14520:1:8","nodeType":"YulLiteral","src":"14520:1:8","type":"","value":"0"},{"kind":"number","nativeSrc":"14523:4:8","nodeType":"YulLiteral","src":"14523:4:8","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"14513:6:8","nodeType":"YulIdentifier","src":"14513:6:8"},"nativeSrc":"14513:15:8","nodeType":"YulFunctionCall","src":"14513:15:8"},"nativeSrc":"14513:15:8","nodeType":"YulExpressionStatement","src":"14513:15:8"}]},"name":"panic_error_0x41","nativeSrc":"14407:127:8","nodeType":"YulFunctionDefinition","src":"14407:127:8"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_stringliteral_cb8b20e2c42377c47b5226ffeb741e823d4c5c68ace99d08fb1ac301efb651e5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"Direct deposits not allowed.\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_0fa78a13653e06ad99b0fd069a1f00be9aaee42e8019fef06fc5450b72e1b65e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Function does not exist.\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_string_calldata_ptrt_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        if gt(add(add(_1, length), 0x20), dataEnd) { revert(0, 0) }\n        value0 := add(_1, 0x20)\n        value1 := length\n        value2 := abi_decode_address(add(headStart, 0x20))\n        value3 := abi_decode_address(add(headStart, 64))\n        let value := 0\n        value := calldataload(add(headStart, 96))\n        value4 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n    }\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let tail_1 := add(headStart, 32)\n        mstore(headStart, 32)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, 32)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), sub(shl(160, 1), 1)))\n            pos := add(pos, 32)\n            srcPtr := add(srcPtr, 32)\n        }\n        tail := pos\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n    }\n    function abi_encode_tuple_t_struct$_Game_$5052_memory_ptr__to_t_struct$_Game_$5052_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, and(mload(value0), sub(shl(160, 1), 1)))\n        mstore(add(headStart, 0x20), and(mload(add(value0, 0x20)), sub(shl(160, 1), 1)))\n        mstore(add(headStart, 0x40), mload(add(value0, 0x40)))\n        mstore(add(headStart, 0x60), iszero(iszero(mload(add(value0, 0x60)))))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := 0\n        value := calldataload(add(headStart, 32))\n        value1 := value\n    }\n    function abi_decode_tuple_t_bytes32t_enum$_GameResult_$5043(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        if iszero(lt(value_1, 3)) { revert(0, 0) }\n        value1 := value_1\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bool__to_t_address_t_address_t_uint256_t_bool__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), iszero(iszero(value3)))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_3efd2dbfc081bf37c652dbe090d1d361e93212eb46913a51487fbe20b70e6e65_t_string_memory_ptr_t_stringliteral_eba76674054ad90018b9921ec8f09d9917e7625b39e3256f7826b772df7db756__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, \"Cannot add more than \")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(pos, 21), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 21), \" backup addresses.\")\n        end := add(_1, 39)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_2085cb31c0c1e8224075d75f458578f54365aa05647251b48bb68bb0bf07fb3c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Backup address cannot be zero ad\")\n        mstore(add(headStart, 96), \"dress.\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24004c7e147cbd7bbd3a293bdde95728aaaa014cfa5a2cce5b68611170522f61__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"Cannot set self as backup addres\")\n        mstore(add(headStart, 96), \"s.\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_6ecbafa02a72b5d1804f10440d0ac97efc6479f5ef05e0935766c1bfaff28139__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Backup address already added.\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_428675301fd335ad7663745fad16f23e40b3d007e15c73499f8fc16797bb5be3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Deposit amount must be greater t\")\n        mstore(add(headStart, 96), \"han 0.\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_packed_t_string_calldata_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        calldatacopy(pos, value0, value1)\n        let _1 := add(pos, value1)\n        mstore(_1, 0)\n        end := _1\n    }\n    function abi_encode_tuple_t_stringliteral_cc691903107a0912eff42becc72be6ba9923b8e686b6174029fe086e98b843bc__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Game ID already exists.\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_6ed80a384a99508c50f304d0fc1fa01e87e8a7c1e23fd87bb26b3eec42b37996__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Invalid player address.\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b8014dcd6b9b8825f36ce51acf04a3476cb0a60d3bf9b8d1fab82e12f1cf4345__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"_stakeAmount must be greater tha\")\n        mstore(add(headStart, 96), \"n 0.\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_2da5768ab6f4a6792842d32845b8d6e6c010a05c2db3bc139b5272f28565fb71__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"Player1 has insufficient funds.\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_547c3876eae61b1efa83e1f9d0d2c672e99c0104b959b6bba9216deb297083a1__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"Player2 has insufficient funds.\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_ddb92dca1b14b7f86de22eb952ec5692b5d32ff7d579451d25c03288285572d1__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"Withdrawal amount must be greate\")\n        mstore(add(headStart, 96), \"r than 0.\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_a1f811b878a206abc1b2ab57b5c43ceee3594f84b9fd983a59ec653d7b970398__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"Insufficient funds to withdraw.\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_87055f61685ba488261bfa7add3cec59d88745ad3c44d9b55ad8388c453ca9aa__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"Caller is not a registered backu\")\n        mstore(add(headStart, 96), \"p address.\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_29940d1dcde580d400bfd918827344f04d3b90b6d8b8716df5b5822db0156f4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"Insufficient fees collected.\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_cdf63a127d275dc7fb43022f13aa5adb46231f2519f921c4c26be0d00a369386__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"Not authorized to remove this re\")\n        mstore(add(headStart, 96), \"covery address.\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x31()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_fadc0c8263f5d683f72a361984185a741a0b39b31acffee50958c78362b4d60e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"Game either not created or is al\")\n        mstore(add(headStart, 96), \"ready finished.\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_enum$_GameResult_$5043__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        if iszero(lt(value0, 3))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x21)\n            revert(0, 0x24)\n        }\n        mstore(headStart, value0)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n}","id":8,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"60806040526004361061014f5760003560e01c806399a5d747116100b6578063d3856e551161006f578063d3856e55146104e7578063e703dd5414610507578063f071db5a14610527578063f2fde38b1461053d578063f579f8821461055d578063f8b2cb4f146105de576101a1565b806399a5d747146104495780639e2c63da14610469578063a001ecdd1461049f578063a105e149146104b4578063ae6ba4cc1461049f578063cfce8913146104c7576101a1565b80635aaccf69116101085780635aaccf69146102c05780635e318e07146102e0578063715018a61461030057806373931bbf146103155780638da5cb5b146103ea57806392417dc71461041c576101a1565b806308db7f85146101e95780632177457d1461020b57806326224c64146102135780632f78808c14610253578063410390ec146102735780634ac5c55914610293576101a1565b366101a15760405162461bcd60e51b815260206004820152601c60248201527f446972656374206465706f73697473206e6f7420616c6c6f7765642e0000000060448201526064015b60405180910390fd5b60405162461bcd60e51b815260206004820152601860248201527f46756e6374696f6e20646f6573206e6f742065786973742e00000000000000006044820152606401610198565b3480156101f557600080fd5b506102096102043660046119cc565b610614565b005b610209610808565b34801561021f57600080fd5b5061024061022e3660046119cc565b60016020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561025f57600080fd5b5061020961026e3660046119ee565b610885565b34801561027f57600080fd5b5061020961028e366004611a8a565b610d0d565b34801561029f57600080fd5b506102b36102ae3660046119cc565b610e18565b60405161024a9190611aa3565b3480156102cc57600080fd5b506102096102db366004611aef565b610e8e565b3480156102ec57600080fd5b506102096102fb366004611a8a565b610ff6565b34801561030c57600080fd5b506102096110cd565b34801561032157600080fd5b506103a7610330366004611a8a565b60408051608081018252600080825260208201819052918101829052606081019190915250600090815260036020818152604092839020835160808101855281546001600160a01b0390811682526001830154169281019290925260028101549382019390935291015460ff161515606082015290565b60405161024a919081516001600160a01b039081168252602080840151909116908201526040808301519082015260609182015115159181019190915260800190565b3480156103f657600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161024a565b34801561042857600080fd5b506102406104373660046119cc565b60026020526000908152604090205481565b34801561045557600080fd5b50610240610464366004611a8a565b6110e1565b34801561047557600080fd5b506102406104843660046119cc565b6001600160a01b031660009081526002602052604090205490565b3480156104ab57600080fd5b50610240600381565b6102096104c23660046119cc565b611100565b3480156104d357600080fd5b506102096104e23660046119cc565b6111d1565b3480156104f357600080fd5b50610404610502366004611b1b565b611397565b34801561051357600080fd5b50610209610522366004611b45565b6113cf565b34801561053357600080fd5b5061024060055481565b34801561054957600080fd5b506102096105583660046119cc565b61172b565b34801561056957600080fd5b506105b1610578366004611a8a565b600360208190526000918252604090912080546001820154600283015492909301546001600160a01b0391821693909116919060ff1684565b604080516001600160a01b039586168152949093166020850152918301521515606082015260800161024a565b3480156105ea57600080fd5b506102406105f93660046119cc565b6001600160a01b031660009081526001602052604090205490565b3360009081526004602052604090205460039081119061063390611769565b6040516020016106439190611b9d565b604051602081830303815290604052906106705760405162461bcd60e51b81526004016101989190611bf6565b506001600160a01b0381166106d65760405162461bcd60e51b815260206004820152602660248201527f4261636b757020616464726573732063616e6e6f74206265207a65726f206164604482015265323932b9b99760d11b6064820152608401610198565b336001600160a01b038216036107395760405162461bcd60e51b815260206004820152602260248201527f43616e6e6f74207365742073656c66206173206261636b757020616464726573604482015261399760f11b6064820152608401610198565b33600090815260046020526040902061075290826117fc565b1561079f5760405162461bcd60e51b815260206004820152601d60248201527f4261636b7570206164647265737320616c72656164792061646465642e0000006044820152606401610198565b336000818152600460209081526040808320805460018101825590845291832090910180546001600160a01b0319166001600160a01b038616908117909155905190917f183963c107e526b4dc8ae0c8b5b960da3bddd00ae79c713ba806a69ab06ab97191a350565b600034116108285760405162461bcd60e51b815260040161019890611c29565b3360009081526001602052604081208054349290610847908490611c85565b9091555050604051348152339081907f029b53808e5ee258b1acdd8061a270b641aaded1f730ef560687f44a98827bdc9060200160405180910390a3565b61088d61185b565b600085856040516020016108a2929190611c98565b60408051601f198184030181529181528151602092830120600081815260039093529120600201549091501561091a5760405162461bcd60e51b815260206004820152601760248201527f47616d6520494420616c7265616479206578697374732e0000000000000000006044820152606401610198565b6001600160a01b0384161580159061093a57506001600160a01b03831615155b6109865760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420706c6179657220616464726573732e0000000000000000006044820152606401610198565b600082116109e25760405162461bcd60e51b8152602060048201526024808201527f5f7374616b65416d6f756e74206d7573742062652067726561746572207468616044820152633710181760e11b6064820152608401610198565b6001600160a01b038416600090815260016020526040902054821115610a4a5760405162461bcd60e51b815260206004820152601f60248201527f506c61796572312068617320696e73756666696369656e742066756e64732e006044820152606401610198565b6001600160a01b038316600090815260016020526040902054821115610ab25760405162461bcd60e51b815260206004820152601f60248201527f506c61796572322068617320696e73756666696369656e742066756e64732e006044820152606401610198565b60006002610abf846110e1565b610ac99190611ca8565b90506000610ad78285611cca565b6001600160a01b038716600090815260016020526040812080549293508392909190610b04908490611cca565b90915550506001600160a01b03851660009081526001602052604081208054839290610b31908490611cca565b90915550506001600160a01b03861660009081526002602052604081208054839290610b5e908490611c85565b90915550506001600160a01b03851660009081526002602052604081208054839290610b8b908490611c85565b90915550610b9c9050826002611cdd565b60056000828254610bad9190611c85565b9091555050604080516080810182526001600160a01b03808916808352888216602080850191825284860187815260016060870181815260008c8152600394859052899020975188549088166001600160a01b031991821617895594519188018054929097169190941617909455925160028501555192909101805492151560ff199093169290921790915590517f41375446217eacab943f69f43e90965cbed73a9648b36f7c1276c8e76bb67bad90610c6a9084815260200190565b60405180910390a2846001600160a01b03167f41375446217eacab943f69f43e90965cbed73a9648b36f7c1276c8e76bb67bad82604051610cad91815260200190565b60405180910390a2846001600160a01b0316866001600160a01b0316847fca5be7d622fe97529270450062762f9bac7e27828ef7b8658af85234f44146cd87604051610cfb91815260200190565b60405180910390a45050505050505050565b60008111610d2d5760405162461bcd60e51b815260040161019890611cf4565b33600090815260016020526040902054811115610d8c5760405162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e742066756e647320746f2077697468647261772e006044820152606401610198565b3360009081526001602052604081208054839290610dab908490611cca565b9091555050604051339082156108fc029083906000818181858888f19350505050158015610ddd573d6000803e3d6000fd5b50604051818152339081907f2ecb67032ef4329934be5b0b0c0b7277932396db57a18598adde8fcba3d920349060200160405180910390a350565b6001600160a01b038116600090815260046020908152604091829020805483518184028101840190945280845260609392830182828015610e8257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e64575b50505050509050919050565b6001600160a01b03811660009081526004602052604090208190610eb290336117fc565b610ece5760405162461bcd60e51b815260040161019890611d3d565b60008311610eee5760405162461bcd60e51b815260040161019890611cf4565b6001600160a01b038216600090815260016020526040902054831115610f565760405162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e742066756e647320746f2077697468647261772e006044820152606401610198565b6001600160a01b03821660009081526001602052604081208054859290610f7e908490611cca565b9091555050604051339084156108fc029085906000818181858888f19350505050158015610fb0573d6000803e3d6000fd5b5060405183815233906001600160a01b038416907f2ecb67032ef4329934be5b0b0c0b7277932396db57a18598adde8fcba3d920349060200160405180910390a3505050565b610ffe61185b565b8060055410156110505760405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e74206665657320636f6c6c65637465642e000000006044820152606401610198565b80600560008282546110629190611cca565b9091555050604051339082156108fc029083906000818181858888f19350505050158015611094573d6000803e3d6000fd5b5060405181815233907fc0819c13be868895eb93e40eaceb96de976442fa1d404e5c55f14bb65a8c489a9060200160405180910390a250565b6110d561185b565b6110df6000611888565b565b600060646110f0600384611cdd565b6110fa9190611ca8565b92915050565b6001600160a01b0381166000908152600460205260409020819061112490336117fc565b6111405760405162461bcd60e51b815260040161019890611d3d565b600034116111605760405162461bcd60e51b815260040161019890611c29565b6001600160a01b03821660009081526001602052604081208054349290611188908490611c85565b909155505060405134815233906001600160a01b038416907f029b53808e5ee258b1acdd8061a270b641aaded1f730ef560687f44a98827bdc9060200160405180910390a35050565b3360009081526004602052604090206111ea90826117fc565b61124e5760405162461bcd60e51b815260206004820152602f60248201527f4e6f7420617574686f72697a656420746f2072656d6f7665207468697320726560448201526e31b7bb32b93c9030b2323932b9b99760891b6064820152608401610198565b336000908152600460205260408120905b815481101561139257826001600160a01b031682828154811061128457611284611d87565b6000918252602090912001546001600160a01b03160361138a57815482906112ae90600190611cca565b815481106112be576112be611d87565b9060005260206000200160009054906101000a90046001600160a01b03168282815481106112ee576112ee611d87565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508180548061132c5761132c611d9d565b600082815260208120820160001990810180546001600160a01b031916905590910190915560405133916001600160a01b038616917ffe51b55ea38e48cc7fb184d0d60446a88610b80da472d30aa215a652276157449190a3505050565b60010161125f565b505050565b600460205281600052604060002081815481106113b357600080fd5b6000918252602090912001546001600160a01b03169150829050565b6113d761185b565b6000828152600360208190526040909120015460ff166114515760405162461bcd60e51b815260206004820152602f60248201527f47616d6520656974686572206e6f742063726561746564206f7220697320616c60448201526e3932b0b23c903334b734b9b432b21760891b6064820152608401610198565b600082815260036020908152604080832060028082015482546001600160a01b03168652935290832080549193909161148b908490611cca565b909155505060028082015460018301546001600160a01b03166000908152602092909252604082208054919290916114c4908490611cca565b90915550600190508260028111156114de576114de611db3565b03611564576002808201546114f291611cdd565b81546001600160a01b03166000908152600160205260408120805490919061151b908490611c85565b909155505080546002808301546001600160a01b0390921691600080516020611e088339815191529161154e9190611cdd565b60405190815260200160405180910390a26116e0565b600282600281111561157857611578611db3565b036115f05760028082015461158c91611cdd565b6001828101546001600160a01b031660009081526020919091526040812080549091906115ba908490611c85565b909155505060018101546002808301546001600160a01b0390921691600080516020611e088339815191529161154e9190611cdd565b600082600281111561160457611604611db3565b036116e057600281015481546001600160a01b031660009081526001602052604081208054909190611637908490611c85565b909155505060028101546001808301546001600160a01b0316600090815260209190915260408120805490919061166f908490611c85565b9091555050805460028201546040519081526001600160a01b0390911690600080516020611e088339815191529060200160405180910390a2600181015460028201546040519081526001600160a01b0390911690600080516020611e088339815191529060200160405180910390a25b60038101805460ff1916905560405183907f84084530ad38987aaa9b1454bf4cbc496558210efbfe8ec98c3a6879f4e9a38a9061171e908590611dc9565b60405180910390a2505050565b61173361185b565b6001600160a01b03811661175d57604051631e4fbdf760e01b815260006004820152602401610198565b61176681611888565b50565b60606000611776836118d8565b600101905060008167ffffffffffffffff81111561179657611796611df1565b6040519080825280601f01601f1916602001820160405280156117c0576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846117ca57509392505050565b6000805b835481101561185157826001600160a01b031684828154811061182557611825611d87565b6000918252602090912001546001600160a01b0316036118495760019150506110fa565b600101611800565b5060009392505050565b6000546001600160a01b031633146110df5760405163118cdaa760e01b8152336004820152602401610198565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106119175772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611943576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061196157662386f26fc10000830492506010015b6305f5e1008310611979576305f5e100830492506008015b612710831061198d57612710830492506004015b6064831061199f576064830492506002015b600a83106110fa5760010192915050565b80356001600160a01b03811681146119c757600080fd5b919050565b6000602082840312156119de57600080fd5b6119e7826119b0565b9392505050565b600080600080600060808688031215611a0657600080fd5b853567ffffffffffffffff811115611a1d57600080fd5b8601601f81018813611a2e57600080fd5b803567ffffffffffffffff811115611a4557600080fd5b886020828401011115611a5757600080fd5b602091820196509450611a6b9087016119b0565b9250611a79604087016119b0565b949793965091946060013592915050565b600060208284031215611a9c57600080fd5b5035919050565b602080825282518282018190526000918401906040840190835b81811015611ae45783516001600160a01b0316835260209384019390920191600101611abd565b509095945050505050565b60008060408385031215611b0257600080fd5b82359150611b12602084016119b0565b90509250929050565b60008060408385031215611b2e57600080fd5b611b37836119b0565b946020939093013593505050565b60008060408385031215611b5857600080fd5b82359150602083013560038110611b6e57600080fd5b809150509250929050565b60005b83811015611b94578181015183820152602001611b7c565b50506000910152565b74021b0b73737ba1030b2321036b7b932903a3430b71605d1b815260008251611bcd816015850160208701611b79565b71103130b1b5bab81030b2323932b9b9b2b99760711b6015939091019283015250602701919050565b6020815260008251806020840152611c15816040850160208701611b79565b601f01601f19169190910160400192915050565b60208082526026908201527f4465706f73697420616d6f756e74206d757374206265206772656174657220746040820152653430b710181760d11b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b808201808211156110fa576110fa611c6f565b8183823760009101908152919050565b600082611cc557634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156110fa576110fa611c6f565b80820281158282048414176110fa576110fa611c6f565b60208082526029908201527f5769746864726177616c20616d6f756e74206d7573742062652067726561746560408201526839103a3430b710181760b91b606082015260800190565b6020808252602a908201527f43616c6c6572206973206e6f7420612072656769737465726564206261636b75604082015269381030b2323932b9b99760b11b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b6020810160038310611deb57634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fdfe68510e4a026e1e6eb57d0691a8904192605ae5f5c8c1e0c878bcfd8299f56132a2646970667358221220dc873dec30bf1f1638b9e647931d346f9d8abdafc5645608c162f15ab074fdfc64736f6c634300081c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x14F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x99A5D747 GT PUSH2 0xB6 JUMPI DUP1 PUSH4 0xD3856E55 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xD3856E55 EQ PUSH2 0x4E7 JUMPI DUP1 PUSH4 0xE703DD54 EQ PUSH2 0x507 JUMPI DUP1 PUSH4 0xF071DB5A EQ PUSH2 0x527 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x53D JUMPI DUP1 PUSH4 0xF579F882 EQ PUSH2 0x55D JUMPI DUP1 PUSH4 0xF8B2CB4F EQ PUSH2 0x5DE JUMPI PUSH2 0x1A1 JUMP JUMPDEST DUP1 PUSH4 0x99A5D747 EQ PUSH2 0x449 JUMPI DUP1 PUSH4 0x9E2C63DA EQ PUSH2 0x469 JUMPI DUP1 PUSH4 0xA001ECDD EQ PUSH2 0x49F JUMPI DUP1 PUSH4 0xA105E149 EQ PUSH2 0x4B4 JUMPI DUP1 PUSH4 0xAE6BA4CC EQ PUSH2 0x49F JUMPI DUP1 PUSH4 0xCFCE8913 EQ PUSH2 0x4C7 JUMPI PUSH2 0x1A1 JUMP JUMPDEST DUP1 PUSH4 0x5AACCF69 GT PUSH2 0x108 JUMPI DUP1 PUSH4 0x5AACCF69 EQ PUSH2 0x2C0 JUMPI DUP1 PUSH4 0x5E318E07 EQ PUSH2 0x2E0 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x300 JUMPI DUP1 PUSH4 0x73931BBF EQ PUSH2 0x315 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3EA JUMPI DUP1 PUSH4 0x92417DC7 EQ PUSH2 0x41C JUMPI PUSH2 0x1A1 JUMP JUMPDEST DUP1 PUSH4 0x8DB7F85 EQ PUSH2 0x1E9 JUMPI DUP1 PUSH4 0x2177457D EQ PUSH2 0x20B JUMPI DUP1 PUSH4 0x26224C64 EQ PUSH2 0x213 JUMPI DUP1 PUSH4 0x2F78808C EQ PUSH2 0x253 JUMPI DUP1 PUSH4 0x410390EC EQ PUSH2 0x273 JUMPI DUP1 PUSH4 0x4AC5C559 EQ PUSH2 0x293 JUMPI PUSH2 0x1A1 JUMP JUMPDEST CALLDATASIZE PUSH2 0x1A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x446972656374206465706F73697473206E6F7420616C6C6F7765642E00000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E20646F6573206E6F742065786973742E0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x198 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x204 CALLDATASIZE PUSH1 0x4 PUSH2 0x19CC JUMP JUMPDEST PUSH2 0x614 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x209 PUSH2 0x808 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x240 PUSH2 0x22E CALLDATASIZE PUSH1 0x4 PUSH2 0x19CC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x26E CALLDATASIZE PUSH1 0x4 PUSH2 0x19EE JUMP JUMPDEST PUSH2 0x885 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x28E CALLDATASIZE PUSH1 0x4 PUSH2 0x1A8A JUMP JUMPDEST PUSH2 0xD0D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B3 PUSH2 0x2AE CALLDATASIZE PUSH1 0x4 PUSH2 0x19CC JUMP JUMPDEST PUSH2 0xE18 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24A SWAP2 SWAP1 PUSH2 0x1AA3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x2DB CALLDATASIZE PUSH1 0x4 PUSH2 0x1AEF JUMP JUMPDEST PUSH2 0xE8E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x2FB CALLDATASIZE PUSH1 0x4 PUSH2 0x1A8A JUMP JUMPDEST PUSH2 0xFF6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x10CD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x321 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3A7 PUSH2 0x330 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A8A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0x80 DUP2 ADD DUP6 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 ADD SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x60 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24A SWAP2 SWAP1 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x60 SWAP2 DUP3 ADD MLOAD ISZERO ISZERO SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x24A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x428 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x240 PUSH2 0x437 CALLDATASIZE PUSH1 0x4 PUSH2 0x19CC JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x455 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x240 PUSH2 0x464 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A8A JUMP JUMPDEST PUSH2 0x10E1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x475 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x240 PUSH2 0x484 CALLDATASIZE PUSH1 0x4 PUSH2 0x19CC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x240 PUSH1 0x3 DUP2 JUMP JUMPDEST PUSH2 0x209 PUSH2 0x4C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x19CC JUMP JUMPDEST PUSH2 0x1100 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x4E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x19CC JUMP JUMPDEST PUSH2 0x11D1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x404 PUSH2 0x502 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B1B JUMP JUMPDEST PUSH2 0x1397 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x513 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x522 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B45 JUMP JUMPDEST PUSH2 0x13CF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x533 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x240 PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x549 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x558 CALLDATASIZE PUSH1 0x4 PUSH2 0x19CC JUMP JUMPDEST PUSH2 0x172B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x569 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5B1 PUSH2 0x578 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A8A JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD SWAP3 SWAP1 SWAP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP4 SWAP1 SWAP2 AND SWAP2 SWAP1 PUSH1 0xFF AND DUP5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND DUP2 MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0x24A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x240 PUSH2 0x5F9 CALLDATASIZE PUSH1 0x4 PUSH2 0x19CC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x3 SWAP1 DUP2 GT SWAP1 PUSH2 0x633 SWAP1 PUSH2 0x1769 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x643 SWAP2 SWAP1 PUSH2 0x1B9D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH2 0x670 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x198 SWAP2 SWAP1 PUSH2 0x1BF6 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x6D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4261636B757020616464726573732063616E6E6F74206265207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x323932B9B997 PUSH1 0xD1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x198 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0x739 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207365742073656C66206173206261636B757020616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x3997 PUSH1 0xF1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x198 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x752 SWAP1 DUP3 PUSH2 0x17FC JUMP JUMPDEST ISZERO PUSH2 0x79F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4261636B7570206164647265737320616C72656164792061646465642E000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x198 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP1 DUP5 MSTORE SWAP2 DUP4 KECCAK256 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 SWAP2 PUSH32 0x183963C107E526B4DC8AE0C8B5B960DA3BDDD00AE79C713BA806A69AB06AB971 SWAP2 LOG3 POP JUMP JUMPDEST PUSH1 0x0 CALLVALUE GT PUSH2 0x828 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x198 SWAP1 PUSH2 0x1C29 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD CALLVALUE SWAP3 SWAP1 PUSH2 0x847 SWAP1 DUP5 SWAP1 PUSH2 0x1C85 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD CALLVALUE DUP2 MSTORE CALLER SWAP1 DUP2 SWAP1 PUSH32 0x29B53808E5EE258B1ACDD8061A270B641AADED1F730EF560687F44A98827BDC SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMP JUMPDEST PUSH2 0x88D PUSH2 0x185B JUMP JUMPDEST PUSH1 0x0 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8A2 SWAP3 SWAP2 SWAP1 PUSH2 0x1C98 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 SWAP1 SWAP4 MSTORE SWAP2 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x91A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x47616D6520494420616C7265616479206578697374732E000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x198 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x93A JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO ISZERO JUMPDEST PUSH2 0x986 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420706C6179657220616464726573732E000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x198 JUMP JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x9E2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x5F7374616B65416D6F756E74206D757374206265206772656174657220746861 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x37101817 PUSH1 0xE1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x198 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0xA4A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C61796572312068617320696E73756666696369656E742066756E64732E00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x198 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0xAB2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C61796572322068617320696E73756666696369656E742066756E64732E00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x198 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH2 0xABF DUP5 PUSH2 0x10E1 JUMP JUMPDEST PUSH2 0xAC9 SWAP2 SWAP1 PUSH2 0x1CA8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xAD7 DUP3 DUP6 PUSH2 0x1CCA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP3 SWAP4 POP DUP4 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0xB04 SWAP1 DUP5 SWAP1 PUSH2 0x1CCA JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xB31 SWAP1 DUP5 SWAP1 PUSH2 0x1CCA JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xB5E SWAP1 DUP5 SWAP1 PUSH2 0x1C85 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xB8B SWAP1 DUP5 SWAP1 PUSH2 0x1C85 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xB9C SWAP1 POP DUP3 PUSH1 0x2 PUSH2 0x1CDD JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xBAD SWAP2 SWAP1 PUSH2 0x1C85 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND DUP1 DUP4 MSTORE DUP9 DUP3 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE DUP5 DUP7 ADD DUP8 DUP2 MSTORE PUSH1 0x1 PUSH1 0x60 DUP8 ADD DUP2 DUP2 MSTORE PUSH1 0x0 DUP13 DUP2 MSTORE PUSH1 0x3 SWAP5 DUP6 SWAP1 MSTORE DUP10 SWAP1 KECCAK256 SWAP8 MLOAD DUP9 SLOAD SWAP1 DUP9 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR DUP10 SSTORE SWAP5 MLOAD SWAP2 DUP9 ADD DUP1 SLOAD SWAP3 SWAP1 SWAP8 AND SWAP2 SWAP1 SWAP5 AND OR SWAP1 SWAP5 SSTORE SWAP3 MLOAD PUSH1 0x2 DUP6 ADD SSTORE MLOAD SWAP3 SWAP1 SWAP2 ADD DUP1 SLOAD SWAP3 ISZERO ISZERO PUSH1 0xFF NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD PUSH32 0x41375446217EACAB943F69F43E90965CBED73A9648B36F7C1276C8E76BB67BAD SWAP1 PUSH2 0xC6A SWAP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x41375446217EACAB943F69F43E90965CBED73A9648B36F7C1276C8E76BB67BAD DUP3 PUSH1 0x40 MLOAD PUSH2 0xCAD SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH32 0xCA5BE7D622FE97529270450062762F9BAC7E27828EF7B8658AF85234F44146CD DUP8 PUSH1 0x40 MLOAD PUSH2 0xCFB SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0xD2D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x198 SWAP1 PUSH2 0x1CF4 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 GT ISZERO PUSH2 0xD8C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E742066756E647320746F2077697468647261772E00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x198 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xDAB SWAP1 DUP5 SWAP1 PUSH2 0x1CCA JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD CALLER SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xDDD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE CALLER SWAP1 DUP2 SWAP1 PUSH32 0x2ECB67032EF4329934BE5B0B0C0B7277932396DB57A18598ADDE8FCBA3D92034 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD DUP4 MLOAD DUP2 DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE PUSH1 0x60 SWAP4 SWAP3 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0xE82 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xE64 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 PUSH2 0xEB2 SWAP1 CALLER PUSH2 0x17FC JUMP JUMPDEST PUSH2 0xECE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x198 SWAP1 PUSH2 0x1D3D JUMP JUMPDEST PUSH1 0x0 DUP4 GT PUSH2 0xEEE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x198 SWAP1 PUSH2 0x1CF4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP4 GT ISZERO PUSH2 0xF56 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E742066756E647320746F2077697468647261772E00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x198 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP6 SWAP3 SWAP1 PUSH2 0xF7E SWAP1 DUP5 SWAP1 PUSH2 0x1CCA JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD CALLER SWAP1 DUP5 ISZERO PUSH2 0x8FC MUL SWAP1 DUP6 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xFB0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP4 DUP2 MSTORE CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH32 0x2ECB67032EF4329934BE5B0B0C0B7277932396DB57A18598ADDE8FCBA3D92034 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xFFE PUSH2 0x185B JUMP JUMPDEST DUP1 PUSH1 0x5 SLOAD LT ISZERO PUSH2 0x1050 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E74206665657320636F6C6C65637465642E00000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x198 JUMP JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1062 SWAP2 SWAP1 PUSH2 0x1CCA JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD CALLER SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1094 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE CALLER SWAP1 PUSH32 0xC0819C13BE868895EB93E40EACEB96DE976442FA1D404E5C55F14BB65A8C489A SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x10D5 PUSH2 0x185B JUMP JUMPDEST PUSH2 0x10DF PUSH1 0x0 PUSH2 0x1888 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x64 PUSH2 0x10F0 PUSH1 0x3 DUP5 PUSH2 0x1CDD JUMP JUMPDEST PUSH2 0x10FA SWAP2 SWAP1 PUSH2 0x1CA8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 PUSH2 0x1124 SWAP1 CALLER PUSH2 0x17FC JUMP JUMPDEST PUSH2 0x1140 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x198 SWAP1 PUSH2 0x1D3D JUMP JUMPDEST PUSH1 0x0 CALLVALUE GT PUSH2 0x1160 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x198 SWAP1 PUSH2 0x1C29 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD CALLVALUE SWAP3 SWAP1 PUSH2 0x1188 SWAP1 DUP5 SWAP1 PUSH2 0x1C85 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD CALLVALUE DUP2 MSTORE CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH32 0x29B53808E5EE258B1ACDD8061A270B641AADED1F730EF560687F44A98827BDC SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x11EA SWAP1 DUP3 PUSH2 0x17FC JUMP JUMPDEST PUSH2 0x124E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420617574686F72697A656420746F2072656D6F76652074686973207265 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x31B7BB32B93C9030B2323932B9B997 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x198 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 LT ISZERO PUSH2 0x1392 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1284 JUMPI PUSH2 0x1284 PUSH2 0x1D87 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x138A JUMPI DUP2 SLOAD DUP3 SWAP1 PUSH2 0x12AE SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x1CCA JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x12BE JUMPI PUSH2 0x12BE PUSH2 0x1D87 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x12EE JUMPI PUSH2 0x12EE PUSH2 0x1D87 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP DUP2 DUP1 SLOAD DUP1 PUSH2 0x132C JUMPI PUSH2 0x132C PUSH2 0x1D9D JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 DUP3 ADD PUSH1 0x0 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE SWAP1 SWAP2 ADD SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD CALLER SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH32 0xFE51B55EA38E48CC7FB184D0D60446A88610B80DA472D30AA215A65227615744 SWAP2 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x125F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x13B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 POP DUP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x13D7 PUSH2 0x185B JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0xFF AND PUSH2 0x1451 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x47616D6520656974686572206E6F742063726561746564206F7220697320616C PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x3932B0B23C903334B734B9B432B217 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x198 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x2 DUP1 DUP3 ADD SLOAD DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 MSTORE SWAP4 MSTORE SWAP1 DUP4 KECCAK256 DUP1 SLOAD SWAP2 SWAP4 SWAP1 SWAP2 PUSH2 0x148B SWAP1 DUP5 SWAP1 PUSH2 0x1CCA JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x2 DUP1 DUP3 ADD SLOAD PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP3 KECCAK256 DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x14C4 SWAP1 DUP5 SWAP1 PUSH2 0x1CCA JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH1 0x1 SWAP1 POP DUP3 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x14DE JUMPI PUSH2 0x14DE PUSH2 0x1DB3 JUMP JUMPDEST SUB PUSH2 0x1564 JUMPI PUSH1 0x2 DUP1 DUP3 ADD SLOAD PUSH2 0x14F2 SWAP2 PUSH2 0x1CDD JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x151B SWAP1 DUP5 SWAP1 PUSH2 0x1C85 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP DUP1 SLOAD PUSH1 0x2 DUP1 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1E08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH2 0x154E SWAP2 SWAP1 PUSH2 0x1CDD JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0x16E0 JUMP JUMPDEST PUSH1 0x2 DUP3 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1578 JUMPI PUSH2 0x1578 PUSH2 0x1DB3 JUMP JUMPDEST SUB PUSH2 0x15F0 JUMPI PUSH1 0x2 DUP1 DUP3 ADD SLOAD PUSH2 0x158C SWAP2 PUSH2 0x1CDD JUMP JUMPDEST PUSH1 0x1 DUP3 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x15BA SWAP1 DUP5 SWAP1 PUSH2 0x1C85 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x2 DUP1 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1E08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH2 0x154E SWAP2 SWAP1 PUSH2 0x1CDD JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1604 JUMPI PUSH2 0x1604 PUSH2 0x1DB3 JUMP JUMPDEST SUB PUSH2 0x16E0 JUMPI PUSH1 0x2 DUP2 ADD SLOAD DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x1637 SWAP1 DUP5 SWAP1 PUSH2 0x1C85 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x1 DUP1 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x166F SWAP1 DUP5 SWAP1 PUSH2 0x1C85 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP DUP1 SLOAD PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1E08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1E08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST PUSH1 0x3 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD DUP4 SWAP1 PUSH32 0x84084530AD38987AAA9B1454BF4CBC496558210EFBFE8EC98C3A6879F4E9A38A SWAP1 PUSH2 0x171E SWAP1 DUP6 SWAP1 PUSH2 0x1DC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH2 0x1733 PUSH2 0x185B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x175D JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x198 JUMP JUMPDEST PUSH2 0x1766 DUP2 PUSH2 0x1888 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1776 DUP4 PUSH2 0x18D8 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1796 JUMPI PUSH2 0x1796 PUSH2 0x1DF1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x17C0 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x17CA JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP4 SLOAD DUP2 LT ISZERO PUSH2 0x1851 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1825 JUMPI PUSH2 0x1825 PUSH2 0x1D87 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x1849 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x10FA JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1800 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x10DF JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x198 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x1917 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x1943 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1961 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1979 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x198D JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x199F JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x10FA JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x19C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19E7 DUP3 PUSH2 0x19B0 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1A06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1A1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 ADD PUSH1 0x1F DUP2 ADD DUP9 SGT PUSH2 0x1A2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1A45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP5 ADD ADD GT ISZERO PUSH2 0x1A57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP2 DUP3 ADD SWAP7 POP SWAP5 POP PUSH2 0x1A6B SWAP1 DUP8 ADD PUSH2 0x19B0 JUMP JUMPDEST SWAP3 POP PUSH2 0x1A79 PUSH1 0x40 DUP8 ADD PUSH2 0x19B0 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP2 SWAP5 PUSH1 0x60 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP5 ADD SWAP1 PUSH1 0x40 DUP5 ADD SWAP1 DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1AE4 JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1ABD JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1B12 PUSH1 0x20 DUP5 ADD PUSH2 0x19B0 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B37 DUP4 PUSH2 0x19B0 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x3 DUP2 LT PUSH2 0x1B6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1B94 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1B7C JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH21 0x21B0B73737BA1030B2321036B7B932903A3430B71 PUSH1 0x5D SHL DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x1BCD DUP2 PUSH1 0x15 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1B79 JUMP JUMPDEST PUSH18 0x103130B1B5BAB81030B2323932B9B9B2B997 PUSH1 0x71 SHL PUSH1 0x15 SWAP4 SWAP1 SWAP2 ADD SWAP3 DUP4 ADD MSTORE POP PUSH1 0x27 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1C15 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1B79 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x4465706F73697420616D6F756E74206D75737420626520677265617465722074 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x3430B7101817 PUSH1 0xD1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x10FA JUMPI PUSH2 0x10FA PUSH2 0x1C6F JUMP JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1CC5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x10FA JUMPI PUSH2 0x10FA PUSH2 0x1C6F JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x10FA JUMPI PUSH2 0x10FA PUSH2 0x1C6F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x29 SWAP1 DUP3 ADD MSTORE PUSH32 0x5769746864726177616C20616D6F756E74206D75737420626520677265617465 PUSH1 0x40 DUP3 ADD MSTORE PUSH9 0x39103A3430B7101817 PUSH1 0xB9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x43616C6C6572206973206E6F7420612072656769737465726564206261636B75 PUSH1 0x40 DUP3 ADD MSTORE PUSH10 0x381030B2323932B9B997 PUSH1 0xB1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x3 DUP4 LT PUSH2 0x1DEB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID PUSH9 0x510E4A026E1E6EB57D MOD SWAP2 0xA8 SWAP1 COINBASE SWAP3 PUSH1 0x5A 0xE5 CREATE2 0xC8 0xC1 0xE0 0xC8 PUSH25 0xBCFD8299F56132A2646970667358221220DC873DEC30BF1F16 CODESIZE 0xB9 0xE6 SELFBALANCE SWAP4 SAR CALLVALUE PUSH16 0x9D8ABDAFC5645608C162F15AB074FDFC PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"171:9169:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8304:38;;-1:-1:-1;;;8304:38:7;;216:2:8;8304:38:7;;;198:21:8;255:2;235:18;;;228:30;294;274:18;;;267:58;342:18;;8304:38:7;;;;;;;;171:9169;8393:34;;-1:-1:-1;;;8393:34:7;;573:2:8;8393:34:7;;;555:21:8;612:2;592:18;;;585:30;651:26;631:18;;;624:54;695:18;;8393:34:7;371:348:8;6189:895:7;;;;;;;;;;-1:-1:-1;6189:895:7;;;;;:::i;:::-;;:::i;:::-;;1688:235;;;:::i;204:47::-;;;;;;;;;;-1:-1:-1;204:47:7;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1239:25:8;;;1227:2;1212:18;204:47:7;;;;;;;;3157:1714;;;;;;;;;;-1:-1:-1;3157:1714:7;;;;;:::i;:::-;;:::i;2241:411::-;;;;;;;;;;-1:-1:-1;2241:411:7;;;;;:::i;:::-;;:::i;7696:158::-;;;;;;;;;;-1:-1:-1;7696:158:7;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2658:493::-;;;;;;;;;;-1:-1:-1;2658:493:7;;;;;:::i;:::-;;:::i;7860:271::-;;;;;;;;;;-1:-1:-1;7860:271:7;;;;;:::i;:::-;;:::i;2293:101:0:-;;;;;;;;;;;;;:::i;8718:108:7:-;;;;;;;;;;-1:-1:-1;8718:108:7;;;;;:::i;:::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8805:14:7;;;;:5;:14;;;;;;;;;8798:21;;;;;;;;;-1:-1:-1;;;;;8798:21:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8718:108;;;;;;;3758:13:8;;-1:-1:-1;;;;;3754:39:8;;;3736:58;;3854:4;3842:17;;;3836:24;3832:50;;;3810:20;;;3803:80;3939:4;3927:17;;;3921:24;3899:20;;;3892:54;4016:4;4004:17;;;3998:24;3991:32;3984:40;3962:20;;;3955:70;;;;3723:3;3708:19;;3545:486;1638:85:0;;;;;;;;;;-1:-1:-1;1684:7:0;1710:6;-1:-1:-1;;;;;1710:6:0;1638:85;;;-1:-1:-1;;;;;4200:32:8;;;4182:51;;4170:2;4155:18;1638:85:0;4036:203:8;257:47:7;;;;;;;;;;-1:-1:-1;257:47:7;;;;;:::i;:::-;;;;;;;;;;;;;;8137:124;;;;;;;;;;-1:-1:-1;8137:124:7;;;;;:::i;:::-;;:::i;8570:142::-;;;;;;;;;;-1:-1:-1;8570:142:7;;;;;:::i;:::-;-1:-1:-1;;;;;8679:26:7;8653:7;8679:26;;;:12;:26;;;;;;;8570:142;411:41;;;;;;;;;;;;451:1;411:41;;1929:306;;;;;;:::i;:::-;;:::i;7090:600::-;;;;;;;;;;-1:-1:-1;7090:600:7;;;;;:::i;:::-;;:::i;353:52::-;;;;;;;;;;-1:-1:-1;353:52:7;;;;;:::i;:::-;;:::i;4877:1306::-;;;;;;;;;;-1:-1:-1;4877:1306:7;;;;;:::i;:::-;;:::i;510:28::-;;;;;;;;;;;;;;;;2543:215:0;;;;;;;;;;-1:-1:-1;2543:215:0;;;;;:::i;:::-;;:::i;310:37:7:-;;;;;;;;;;-1:-1:-1;310:37:7;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;310:37:7;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5188:32:8;;;5170:51;;5257:32;;;;5252:2;5237:18;;5230:60;5306:18;;;5299:34;5376:14;5369:22;5364:2;5349:18;;5342:50;5157:3;5142:19;310:37:7;4945:453:8;8440:124:7;;;;;;;;;;-1:-1:-1;8440:124:7;;;;;:::i;:::-;-1:-1:-1;;;;;8531:26:7;8505:7;8531:26;;;:12;:26;;;;;;;8440:124;6189:895;6295:10;6279:27;;;;:15;:27;;;;;:34;503:1;6279:55;;-1:-1:-1;6279:55:7;6455:36;;:16;:36::i;:::-;6372:179;;;;;;;;:::i;:::-;;;;;;;;;;;;;6258:317;;;;;-1:-1:-1;;;6258:317:7;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;6606:28:7;;6585:113;;;;-1:-1:-1;;;6585:113:7;;6891:2:8;6585:113:7;;;6873:21:8;6930:2;6910:18;;;6903:30;6969:34;6949:18;;;6942:62;-1:-1:-1;;;7020:18:8;;;7013:36;7066:19;;6585:113:7;6689:402:8;6585:113:7;6747:10;-1:-1:-1;;;;;6729:28:7;;;6708:109;;;;-1:-1:-1;;;6708:109:7;;7298:2:8;6708:109:7;;;7280:21:8;7337:2;7317:18;;;7310:30;7376:34;7356:18;;;7349:62;-1:-1:-1;;;7427:18:8;;;7420:32;7469:19;;6708:109:7;7096:398:8;6708:109:7;6874:10;6858:27;;;;:15;:27;;;;;6849:53;;6887:14;6849:8;:53::i;:::-;6848:54;6827:130;;;;-1:-1:-1;;;6827:130:7;;7701:2:8;6827:130:7;;;7683:21:8;7740:2;7720:18;;;7713:30;7779:31;7759:18;;;7752:59;7828:18;;6827:130:7;7499:353:8;6827:130:7;6984:10;6968:27;;;;:15;:27;;;;;;;;:48;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;6968:48:7;-1:-1:-1;;;;;6968:48:7;;;;;;;;7031:46;;6968:48;;7031:46;;;6189:895;:::o;1688:235::-;1760:1;1748:9;:13;1740:64;;;;-1:-1:-1;;;1740:64:7;;;;;;;:::i;:::-;1827:10;1814:24;;;;:12;:24;;;;;:37;;1842:9;;1814:24;:37;;1842:9;;1814:37;:::i;:::-;;;;-1:-1:-1;;1866:50:7;;1906:9;1239:25:8;;1894:10:7;;;;1866:50;;1227:2:8;1212:18;1866:50:7;;;;;;;1688:235::o;3157:1714::-;1531:13:0;:11;:13::i;:::-;3326:18:7::1;3374:7;;3357:25;;;;;;;;;:::i;:::-;;::::0;;-1:-1:-1;;3357:25:7;;::::1;::::0;;;;;;3347:36;;3357:25:::1;3347:36:::0;;::::1;::::0;3481:17:::1;::::0;;;:5:::1;:17:::0;;;;;:29:::1;;::::0;3347:36;;-1:-1:-1;3481:34:7;3473:70:::1;;;::::0;-1:-1:-1;;;3473:70:7;;9006:2:8;3473:70:7::1;::::0;::::1;8988:21:8::0;9045:2;9025:18;;;9018:30;9084:25;9064:18;;;9057:53;9127:18;;3473:70:7::1;8804:347:8::0;3473:70:7::1;-1:-1:-1::0;;;;;3574:22:7;::::1;::::0;;::::1;::::0;:48:::1;;-1:-1:-1::0;;;;;;3600:22:7;::::1;::::0;::::1;3574:48;3553:118;;;::::0;-1:-1:-1;;;3553:118:7;;9358:2:8;3553:118:7::1;::::0;::::1;9340:21:8::0;9397:2;9377:18;;;9370:30;9436:25;9416:18;;;9409:53;9479:18;;3553:118:7::1;9156:347:8::0;3553:118:7::1;3704:1;3689:12;:16;3681:65;;;::::0;-1:-1:-1;;;3681:65:7;;9710:2:8;3681:65:7::1;::::0;::::1;9692:21:8::0;9749:2;9729:18;;;9722:30;9788:34;9768:18;;;9761:62;-1:-1:-1;;;9839:18:8;;;9832:34;9883:19;;3681:65:7::1;9508:400:8::0;3681:65:7::1;-1:-1:-1::0;;;;;3777:22:7;::::1;;::::0;;;:12:::1;:22;::::0;;;;;:38;-1:-1:-1;3777:38:7::1;3756:116;;;::::0;-1:-1:-1;;;3756:116:7;;10115:2:8;3756:116:7::1;::::0;::::1;10097:21:8::0;10154:2;10134:18;;;10127:30;10193:33;10173:18;;;10166:61;10244:18;;3756:116:7::1;9913:355:8::0;3756:116:7::1;-1:-1:-1::0;;;;;3903:22:7;::::1;;::::0;;;:12:::1;:22;::::0;;;;;:38;-1:-1:-1;3903:38:7::1;3882:116;;;::::0;-1:-1:-1;;;3882:116:7;;10475:2:8;3882:116:7::1;::::0;::::1;10457:21:8::0;10514:2;10494:18;;;10487:30;10553:33;10533:18;;;10526:61;10604:18;;3882:116:7::1;10273:355:8::0;3882:116:7::1;4048:25;4105:1;4076:26;4089:12;4076;:26::i;:::-;:30;;;;:::i;:::-;4048:58:::0;-1:-1:-1;4116:30:7::1;4149:32;4048:58:::0;4149:12;:32:::1;:::i;:::-;-1:-1:-1::0;;;;;4214:22:7;::::1;;::::0;;;:12:::1;:22;::::0;;;;:48;;4116:65;;-1:-1:-1;4116:65:7;;4214:22;;;:48:::1;::::0;4116:65;;4214:48:::1;:::i;:::-;::::0;;;-1:-1:-1;;;;;;;4272:22:7;::::1;;::::0;;;:12:::1;:22;::::0;;;;:48;;4298:22;;4272;:48:::1;::::0;4298:22;;4272:48:::1;:::i;:::-;::::0;;;-1:-1:-1;;;;;;;4330:22:7;::::1;;::::0;;;:12:::1;:22;::::0;;;;:48;;4356:22;;4330;:48:::1;::::0;4356:22;;4330:48:::1;:::i;:::-;::::0;;;-1:-1:-1;;;;;;;4388:22:7;::::1;;::::0;;;:12:::1;:22;::::0;;;;:48;;4414:22;;4388;:48:::1;::::0;4414:22;;4388:48:::1;:::i;:::-;::::0;;;-1:-1:-1;4463:21:7::1;::::0;-1:-1:-1;4463:17:7;4483:1:::1;4463:21;:::i;:::-;4446:13;;:38;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;4515:154:7::1;::::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;;;;;4515:154:7;;::::1;::::0;;;;;::::1;;::::0;;::::1;::::0;;;;;;;;;4654:4:::1;4515:154:::0;;;;;;-1:-1:-1;4495:17:7;;;:5:::1;:17:::0;;;;;;;:174;;;;;;::::1;-1:-1:-1::0;;;;;;4495:174:7;;::::1;;::::0;;;;;;::::1;::::0;;;;;::::1;::::0;;;::::1;;::::0;;;;;::::1;::::0;::::1;::::0;;;;;::::1;::::0;;;::::1;;-1:-1:-1::0;;4495:174:7;;::::1;::::0;;;::::1;::::0;;;4685:46;;::::1;::::0;::::1;::::0;4609:22;1239:25:8;;1227:2;1212:18;;1093:177;4685:46:7::1;;;;;;;;4759:8;-1:-1:-1::0;;;;;4746:46:7::1;;4769:22;4746:46;;;;1239:25:8::0;;1227:2;1212:18;;1093:177;4746:46:7::1;;;;;;;;4841:8;-1:-1:-1::0;;;;;4807:57:7::1;4831:8;-1:-1:-1::0;;;;;4807:57:7::1;4819:10;4807:57;4851:12;4807:57;;;;1239:25:8::0;;1227:2;1212:18;;1093:177;4807:57:7::1;;;;;;;;3316:1555;;;3157:1714:::0;;;;;:::o;2241:411::-;2319:1;2309:7;:11;2301:65;;;;-1:-1:-1;;;2301:65:7;;;;;;;:::i;:::-;2410:10;2397:24;;;;:12;:24;;;;;;:35;-1:-1:-1;2397:35:7;2376:113;;;;-1:-1:-1;;;2376:113:7;;11905:2:8;2376:113:7;;;11887:21:8;11944:2;11924:18;;;11917:30;11983:33;11963:18;;;11956:61;12034:18;;2376:113:7;11703:355:8;2376:113:7;2513:10;2500:24;;;;:12;:24;;;;;:35;;2528:7;;2500:24;:35;;2528:7;;2500:35;:::i;:::-;;;;-1:-1:-1;;2545:37:7;;2553:10;;2545:37;;;;;2574:7;;2545:37;;;;2574:7;2553:10;2545:37;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2597:48:7;;1239:25:8;;;2625:10:7;;;;2597:48;;1227:2:8;1212:18;2597:48:7;;;;;;;2241:411;:::o;7696:158::-;-1:-1:-1;;;;;7818:29:7;;;;;;:15;:29;;;;;;;;;7811:36;;;;;;;;;;;;;;;;;7783:16;;7811:36;;;7818:29;7811:36;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7811:36:7;;;;;;;;;;;;;;;;;;;;;;;7696:158;;;:::o;2658:493::-;-1:-1:-1;;;;;9209:29:7;;;;;;:15;:29;;;;;2770:12;;9200:51;;9240:10;9200:8;:51::i;:::-;9179:140;;;;-1:-1:-1;;;9179:140:7;;;;;;;:::i;:::-;2812:1:::1;2802:7;:11;2794:65;;;;-1:-1:-1::0;;;2794:65:7::1;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;2890:26:7;::::1;;::::0;;;:12:::1;:26;::::0;;;;;:37;-1:-1:-1;2890:37:7::1;2869:115;;;::::0;-1:-1:-1;;;2869:115:7;;11905:2:8;2869:115:7::1;::::0;::::1;11887:21:8::0;11944:2;11924:18;;;11917:30;11983:33;11963:18;;;11956:61;12034:18;;2869:115:7::1;11703:355:8::0;2869:115:7::1;-1:-1:-1::0;;;;;2995:26:7;::::1;;::::0;;;:12:::1;:26;::::0;;;;:37;;3025:7;;2995:26;:37:::1;::::0;3025:7;;2995:37:::1;:::i;:::-;::::0;;;-1:-1:-1;;3042:37:7::1;::::0;3050:10:::1;::::0;3042:37;::::1;;;::::0;3071:7;;3042:37:::1;::::0;;;3071:7;3050:10;3042:37;::::1;;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;3094:50:7::1;::::0;1239:25:8;;;3124:10:7::1;::::0;-1:-1:-1;;;;;3094:50:7;::::1;::::0;::::1;::::0;1227:2:8;1212:18;3094:50:7::1;;;;;;;2658:493:::0;;;:::o;7860:271::-;1531:13:0;:11;:13::i;:::-;7953:7:7::1;7936:13;;:24;;7928:65;;;::::0;-1:-1:-1;;;7928:65:7;;12676:2:8;7928:65:7::1;::::0;::::1;12658:21:8::0;12715:2;12695:18;;;12688:30;12754;12734:18;;;12727:58;12802:18;;7928:65:7::1;12474:352:8::0;7928:65:7::1;8021:7;8004:13;;:24;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;8038:37:7::1;::::0;8046:10:::1;::::0;8038:37;::::1;;;::::0;8067:7;;8038:37:::1;::::0;;;8067:7;8046:10;8038:37;::::1;;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;8090:34:7::1;::::0;1239:25:8;;;8104:10:7::1;::::0;8090:34:::1;::::0;1227:2:8;1212:18;8090:34:7::1;;;;;;;7860:271:::0;:::o;2293:101:0:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;8137:124:7:-;8197:7;8251:3;8224:23;451:1;8224:7;:23;:::i;:::-;8223:31;;;;:::i;:::-;8216:38;8137:124;-1:-1:-1;;8137:124:7:o;1929:306::-;-1:-1:-1;;;;;9209:29:7;;;;;;:15;:29;;;;;2023:12;;9200:51;;9240:10;9200:8;:51::i;:::-;9179:140;;;;-1:-1:-1;;;9179:140:7;;;;;;;:::i;:::-;2067:1:::1;2055:9;:13;2047:64;;;;-1:-1:-1::0;;;2047:64:7::1;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;2122:26:7;::::1;;::::0;;;:12:::1;:26;::::0;;;;:39;;2152:9:::1;::::0;2122:26;:39:::1;::::0;2152:9;;2122:39:::1;:::i;:::-;::::0;;;-1:-1:-1;;2176:52:7::1;::::0;2218:9:::1;1239:25:8::0;;2206:10:7::1;::::0;-1:-1:-1;;;;;2176:52:7;::::1;::::0;::::1;::::0;1227:2:8;1212:18;2176:52:7::1;;;;;;;1929:306:::0;;:::o;7090:600::-;7208:10;7192:27;;;;:15;:27;;;;;7183:53;;7221:14;7183:8;:53::i;:::-;7162:147;;;;-1:-1:-1;;;7162:147:7;;13033:2:8;7162:147:7;;;13015:21:8;13072:2;13052:18;;;13045:30;13111:34;13091:18;;;13084:62;-1:-1:-1;;;13162:18:8;;;13155:45;13217:19;;7162:147:7;12831:411:8;7162:147:7;7364:10;7320:25;7348:27;;;:15;:27;;;;;;7385:299;7406:14;;7402:18;;7385:299;;;7459:14;-1:-1:-1;;;;;7445:28:7;:7;7453:1;7445:10;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;7445:10:7;:28;7441:233;;7514:14;;7506:7;;7514:18;;7531:1;;7514:18;:::i;:::-;7506:27;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7506:27:7;7493:7;7501:1;7493:10;;;;;;;;:::i;:::-;;;;;;;;;:40;;;;;-1:-1:-1;;;;;7493:40:7;;;;;-1:-1:-1;;;;;7493:40:7;;;;;;7551:7;:13;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;7551:13:7;;;;;-1:-1:-1;;;;;;7551:13:7;;;;;;;;;7587:48;;7624:10;;-1:-1:-1;;;;;7587:48:7;;;;;7551:13;7587:48;7653:7;;7090:600;:::o;7441:233::-;7422:3;;7385:299;;;;7152:538;7090:600;:::o;353:52::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;353:52:7;;-1:-1:-1;353:52:7;;-1:-1:-1;353:52:7:o;4877:1306::-;1531:13:0;:11;:13::i;:::-;5007:14:7::1;::::0;;;:5:::1;:14;::::0;;;;;;;:22:::1;::::0;::::1;;4986:116;;;::::0;-1:-1:-1;;;4986:116:7;;13713:2:8;4986:116:7::1;::::0;::::1;13695:21:8::0;13752:2;13732:18;;;13725:30;13791:34;13771:18;;;13764:62;-1:-1:-1;;;13842:18:8;;;13835:45;13897:19;;4986:116:7::1;13511:411:8::0;4986:116:7::1;5112:17;5132:14:::0;;;:5:::1;:14;::::0;;;;;;;5187:16:::1;::::0;;::::1;::::0;5170:12;;-1:-1:-1;;;;;5170:12:7::1;5157:26:::0;;;;;;;:46;;5132:14;;5157:26;;:46:::1;::::0;5187:16;;5157:46:::1;:::i;:::-;::::0;;;-1:-1:-1;;5243:16:7::1;::::0;;::::1;::::0;5226:12:::1;::::0;::::1;::::0;-1:-1:-1;;;;;5226:12:7::1;5213:26;::::0;;;::::1;::::0;;;;;;;:46;;5243:16;;5213:26;;:46:::1;::::0;5243:16;;5213:46:::1;:::i;:::-;::::0;;;-1:-1:-1;5285:21:7::1;::::0;-1:-1:-1;5274:7:7::1;:32;;;;;;;;:::i;:::-;::::0;5270:790:::1;;5395:16;::::0;;::::1;::::0;:20:::1;::::0;::::1;:::i;:::-;5378:12:::0;;-1:-1:-1;;;;;5378:12:7::1;5365:26;::::0;;;:12:::1;:26;::::0;;;;:50;;:26;;;:50:::1;::::0;;;::::1;:::i;:::-;::::0;;;-1:-1:-1;;5449:12:7;;5463:16:::1;::::0;;::::1;::::0;-1:-1:-1;;;;;5449:12:7;;::::1;::::0;-1:-1:-1;;;;;;;;;;;5434:50:7;5463:20:::1;::::0;:16;:20:::1;:::i;:::-;5434:50;::::0;1239:25:8;;;1227:2;1212:18;5434:50:7::1;;;;;;;5270:790;;;5516:21;5505:7;:32;;;;;;;;:::i;:::-;::::0;5501:559:::1;;5626:16;::::0;;::::1;::::0;:20:::1;::::0;::::1;:::i;:::-;5596:12;5609::::0;;::::1;::::0;-1:-1:-1;;;;;5609:12:7::1;5596:26;::::0;;;::::1;::::0;;;;;;;:50;;:26;;;:50:::1;::::0;;;::::1;:::i;:::-;::::0;;;-1:-1:-1;;5680:12:7::1;::::0;::::1;::::0;5694:16:::1;::::0;;::::1;::::0;-1:-1:-1;;;;;5680:12:7;;::::1;::::0;-1:-1:-1;;;;;;;;;;;5665:50:7;5694:20:::1;::::0;:16;:20:::1;:::i;5501:559::-;5747:15;5736:7;:26;;;;;;;;:::i;:::-;::::0;5732:328:::1;;5843:16;::::0;::::1;::::0;5826:12;;-1:-1:-1;;;;;5826:12:7::1;5813:26;::::0;;;:12:::1;:26;::::0;;;;:46;;:26;;;:46:::1;::::0;5843:16;;5813:46:::1;:::i;:::-;::::0;;;-1:-1:-1;;5903:16:7::1;::::0;::::1;::::0;5873:12:::1;5886::::0;;::::1;::::0;-1:-1:-1;;;;;5886:12:7::1;5873:26;::::0;;;::::1;::::0;;;;;;;:46;;:26;;;:46:::1;::::0;5903:16;;5873:46:::1;:::i;:::-;::::0;;;-1:-1:-1;;5953:12:7;;5967:16:::1;::::0;::::1;::::0;5938:46:::1;::::0;1239:25:8;;;-1:-1:-1;;;;;5953:12:7;;::::1;::::0;-1:-1:-1;;;;;;;;;;;5938:46:7;1227:2:8;1212:18;5938:46:7::1;;;;;;;6018:12;::::0;::::1;::::0;6032:16:::1;::::0;::::1;::::0;6003:46:::1;::::0;1239:25:8;;;-1:-1:-1;;;;;6018:12:7;;::::1;::::0;-1:-1:-1;;;;;;;;;;;6003:46:7;1227:2:8;1212:18;6003:46:7::1;;;;;;;5732:328;6070:12;::::0;::::1;:20:::0;;-1:-1:-1;;6070:20:7::1;::::0;;6146:30:::1;::::0;6159:7;;6146:30:::1;::::0;::::1;::::0;6168:7;;6146:30:::1;:::i;:::-;;;;;;;;4976:1207;4877:1306:::0;;:::o;2543:215:0:-;1531:13;:11;:13::i;:::-;-1:-1:-1;;;;;2627:22:0;::::1;2623:91;;2672:31;::::0;-1:-1:-1;;;2672:31:0;;2700:1:::1;2672:31;::::0;::::1;4182:51:8::0;4155:18;;2672:31:0::1;4036:203:8::0;2623:91:0::1;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;987:632:3:-;1043:13;1092:14;1109:17;1120:5;1109:10;:17::i;:::-;1129:1;1109:21;1092:38;;1144:20;1178:6;1167:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1167:18:3;-1:-1:-1;1144:41:3;-1:-1:-1;1274:28:3;;;1290:2;1274:28;1329:247;-1:-1:-1;;1360:5:3;-1:-1:-1;;;1459:2:3;1448:14;;1443:32;1360:5;1430:46;1520:2;1511:11;;;-1:-1:-1;1540:21:3;1329:247;1540:21;-1:-1:-1;1596:6:3;987:632;-1:-1:-1;;;987:632:3:o;8832:282:7:-;8937:4;;8953:133;8974:12;;8970:16;;8953:133;;;9023:7;-1:-1:-1;;;;;9011:19:7;:5;9017:1;9011:8;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;9011:8:7;:19;9007:69;;9057:4;9050:11;;;;;9007:69;8988:3;;8953:133;;;-1:-1:-1;9102:5:7;;8832:282;-1:-1:-1;;;8832:282:7:o;1796:162:0:-;1684:7;1710:6;-1:-1:-1;;;;;1710:6:0;735:10:1;1855:23:0;1851:101;;1901:40;;-1:-1:-1;;;1901:40:0;;735:10:1;1901:40:0;;;4182:51:8;4155:18;;1901:40:0;4036:203:8;2912:187:0;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;;;;;3020:17:0;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;25316:916:4:-;25369:7;;-1:-1:-1;;;25444:17:4;;25440:103;;-1:-1:-1;;;25481:17:4;;;-1:-1:-1;25526:2:4;25516:12;25440:103;25569:8;25560:5;:17;25556:103;;25606:8;25597:17;;;-1:-1:-1;25642:2:4;25632:12;25556:103;25685:8;25676:5;:17;25672:103;;25722:8;25713:17;;;-1:-1:-1;25758:2:4;25748:12;25672:103;25801:7;25792:5;:16;25788:100;;25837:7;25828:16;;;-1:-1:-1;25872:1:4;25862:11;25788:100;25914:7;25905:5;:16;25901:100;;25950:7;25941:16;;;-1:-1:-1;25985:1:4;25975:11;25901:100;26027:7;26018:5;:16;26014:100;;26063:7;26054:16;;;-1:-1:-1;26098:1:4;26088:11;26014:100;26140:7;26131:5;:16;26127:66;;26177:1;26167:11;26219:6;25316:916;-1:-1:-1;;25316:916:4:o;724:173:8:-;792:20;;-1:-1:-1;;;;;841:31:8;;831:42;;821:70;;887:1;884;877:12;821:70;724:173;;;:::o;902:186::-;961:6;1014:2;1002:9;993:7;989:23;985:32;982:52;;;1030:1;1027;1020:12;982:52;1053:29;1072:9;1053:29;:::i;:::-;1043:39;902:186;-1:-1:-1;;;902:186:8:o;1275:856::-;1373:6;1381;1389;1397;1405;1458:3;1446:9;1437:7;1433:23;1429:33;1426:53;;;1475:1;1472;1465:12;1426:53;1515:9;1502:23;1548:18;1540:6;1537:30;1534:50;;;1580:1;1577;1570:12;1534:50;1603:22;;1656:4;1648:13;;1644:27;-1:-1:-1;1634:55:8;;1685:1;1682;1675:12;1634:55;1725:2;1712:16;1751:18;1743:6;1740:30;1737:50;;;1783:1;1780;1773:12;1737:50;1830:7;1823:4;1814:6;1810:2;1806:15;1802:26;1799:39;1796:59;;;1851:1;1848;1841:12;1796:59;1882:4;1874:13;;;;-1:-1:-1;1906:6:8;-1:-1:-1;1931:40:8;;1950:20;;1931:40;:::i;:::-;1921:50;;1990:38;2024:2;2013:9;2009:18;1990:38;:::i;:::-;1275:856;;;;-1:-1:-1;1275:856:8;;2097:2;2082:18;2069:32;;1275:856;-1:-1:-1;;1275:856:8:o;2136:226::-;2195:6;2248:2;2236:9;2227:7;2223:23;2219:32;2216:52;;;2264:1;2261;2254:12;2216:52;-1:-1:-1;2309:23:8;;2136:226;-1:-1:-1;2136:226:8:o;2367:637::-;2557:2;2569:21;;;2639:13;;2542:18;;;2661:22;;;2509:4;;2740:15;;;2714:2;2699:18;;;2509:4;2783:195;2797:6;2794:1;2791:13;2783:195;;;2862:13;;-1:-1:-1;;;;;2858:39:8;2846:52;;2927:2;2953:15;;;;2918:12;;;;2894:1;2812:9;2783:195;;;-1:-1:-1;2995:3:8;;2367:637;-1:-1:-1;;;;;2367:637:8:o;3009:300::-;3077:6;3085;3138:2;3126:9;3117:7;3113:23;3109:32;3106:52;;;3154:1;3151;3144:12;3106:52;3199:23;;;-1:-1:-1;3265:38:8;3299:2;3284:18;;3265:38;:::i;:::-;3255:48;;3009:300;;;;;:::o;4244:::-;4312:6;4320;4373:2;4361:9;4352:7;4348:23;4344:32;4341:52;;;4389:1;4386;4379:12;4341:52;4412:29;4431:9;4412:29;:::i;:::-;4402:39;4510:2;4495:18;;;;4482:32;;-1:-1:-1;;;4244:300:8:o;4549:391::-;4632:6;4640;4693:2;4681:9;4672:7;4668:23;4664:32;4661:52;;;4709:1;4706;4699:12;4661:52;4754:23;;;-1:-1:-1;4853:2:8;4838:18;;4825:32;4888:1;4876:14;;4866:42;;4904:1;4901;4894:12;4866:42;4927:7;4917:17;;;4549:391;;;;;:::o;5403:250::-;5488:1;5498:113;5512:6;5509:1;5506:13;5498:113;;;5588:11;;;5582:18;5569:11;;;5562:39;5534:2;5527:10;5498:113;;;-1:-1:-1;;5645:1:8;5627:16;;5620:27;5403:250::o;5658:625::-;-1:-1:-1;;;6016:3:8;6009:36;5991:3;6074:6;6068:13;6090:75;6158:6;6153:2;6148:3;6144:12;6137:4;6129:6;6125:17;6090:75;:::i;:::-;-1:-1:-1;;;6224:2:8;6184:16;;;;6216:11;;;6209:41;-1:-1:-1;6274:2:8;6266:11;;5658:625;-1:-1:-1;5658:625:8:o;6288:396::-;6437:2;6426:9;6419:21;6400:4;6469:6;6463:13;6512:6;6507:2;6496:9;6492:18;6485:34;6528:79;6600:6;6595:2;6584:9;6580:18;6575:2;6567:6;6563:15;6528:79;:::i;:::-;6668:2;6647:15;-1:-1:-1;;6643:29:8;6628:45;;;;6675:2;6624:54;;6288:396;-1:-1:-1;;6288:396:8:o;7857:402::-;8059:2;8041:21;;;8098:2;8078:18;;;8071:30;8137:34;8132:2;8117:18;;8110:62;-1:-1:-1;;;8203:2:8;8188:18;;8181:36;8249:3;8234:19;;7857:402::o;8264:127::-;8325:10;8320:3;8316:20;8313:1;8306:31;8356:4;8353:1;8346:15;8380:4;8377:1;8370:15;8396:125;8461:9;;;8482:10;;;8479:36;;;8495:18;;:::i;8526:273::-;8711:6;8703;8698:3;8685:33;8667:3;8737:16;;8762:13;;;8737:16;8526:273;-1:-1:-1;8526:273:8:o;10765:217::-;10805:1;10831;10821:132;;10875:10;10870:3;10866:20;10863:1;10856:31;10910:4;10907:1;10900:15;10938:4;10935:1;10928:15;10821:132;-1:-1:-1;10967:9:8;;10765:217::o;10987:128::-;11054:9;;;11075:11;;;11072:37;;;11089:18;;:::i;11120:168::-;11193:9;;;11224;;11241:15;;;11235:22;;11221:37;11211:71;;11262:18;;:::i;11293:405::-;11495:2;11477:21;;;11534:2;11514:18;;;11507:30;11573:34;11568:2;11553:18;;11546:62;-1:-1:-1;;;11639:2:8;11624:18;;11617:39;11688:3;11673:19;;11293:405::o;12063:406::-;12265:2;12247:21;;;12304:2;12284:18;;;12277:30;12343:34;12338:2;12323:18;;12316:62;-1:-1:-1;;;12409:2:8;12394:18;;12387:40;12459:3;12444:19;;12063:406::o;13247:127::-;13308:10;13303:3;13299:20;13296:1;13289:31;13339:4;13336:1;13329:15;13363:4;13360:1;13353:15;13379:127;13440:10;13435:3;13431:20;13428:1;13421:31;13471:4;13468:1;13461:15;13495:4;13492:1;13485:15;13927:127;13988:10;13983:3;13979:20;13976:1;13969:31;14019:4;14016:1;14009:15;14043:4;14040:1;14033:15;14059:343;14206:2;14191:18;;14239:1;14228:13;;14218:144;;14284:10;14279:3;14275:20;14272:1;14265:31;14319:4;14316:1;14309:15;14347:4;14344:1;14337:15;14218:144;14371:25;;;14059:343;:::o;14407:127::-;14468:10;14463:3;14459:20;14456:1;14449:31;14499:4;14496:1;14489:15;14523:4;14520:1;14513:15"},"gasEstimates":{"creation":{"codeDepositCost":"1554600","executionCost":"27487","totalCost":"1582087"},"external":{"":"358","addBackupAddress(address)":"infinite","backupAddresses(address,uint256)":"4806","calculateFee(uint256)":"infinite","depositStakes()":"26375","depositStakes(address)":"infinite","feePercentage()":"251","feesCollected()":"2350","games(bytes32)":"9025","getBackupAddresses(address)":"infinite","getBalance(address)":"2658","getGame(bytes32)":"9255","getLockedStake(address)":"2571","lockedStakes(address)":"2641","maxBackupAddresses()":"295","owner()":"2431","removeBackupAddress(address)":"infinite","renounceOwnership()":"infinite","resolveGame(bytes32,uint8)":"infinite","startGame(string,address,address,uint256)":"infinite","transferOwnership(address)":"28421","userBalances(address)":"2576","withdrawFees(uint256)":"infinite","withdrawStakes(uint256)":"infinite","withdrawStakes(uint256,address)":"infinite"},"internal":{"contains(address[] storage pointer,address)":"infinite"}},"methodIdentifiers":{"addBackupAddress(address)":"08db7f85","backupAddresses(address,uint256)":"d3856e55","calculateFee(uint256)":"99a5d747","depositStakes()":"2177457d","depositStakes(address)":"a105e149","feePercentage()":"a001ecdd","feesCollected()":"f071db5a","games(bytes32)":"f579f882","getBackupAddresses(address)":"4ac5c559","getBalance(address)":"f8b2cb4f","getGame(bytes32)":"73931bbf","getLockedStake(address)":"9e2c63da","lockedStakes(address)":"92417dc7","maxBackupAddresses()":"ae6ba4cc","owner()":"8da5cb5b","removeBackupAddress(address)":"cfce8913","renounceOwnership()":"715018a6","resolveGame(bytes32,uint8)":"e703dd54","startGame(string,address,address,uint256)":"2f78808c","transferOwnership(address)":"f2fde38b","userBalances(address)":"26224c64","withdrawFees(uint256)":"5e318e07","withdrawStakes(uint256)":"410390ec","withdrawStakes(uint256,address)":"5aaccf69"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"backupAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"BackupAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"backupAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"BackupAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"gameId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum ORTBet.GameResult\",\"name\":\"result\",\"type\":\"uint8\"}],\"name\":\"GameResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"gameId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"GameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakesDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakesLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakesUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakesWithdrawn\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_backupAddress\",\"type\":\"address\"}],\"name\":\"addBackupAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"backupAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositStakes\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mainAddress\",\"type\":\"address\"}],\"name\":\"depositStakes\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ongoing\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mainAddress\",\"type\":\"address\"}],\"name\":\"getBackupAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_gameId\",\"type\":\"bytes32\"}],\"name\":\"getGame\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ongoing\",\"type\":\"bool\"}],\"internalType\":\"struct ORTBet.Game\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getLockedStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBackupAddresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_backupAddress\",\"type\":\"address\"}],\"name\":\"removeBackupAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_gameId\",\"type\":\"bytes32\"},{\"internalType\":\"enum ORTBet.GameResult\",\"name\":\"_result\",\"type\":\"uint8\"}],\"name\":\"resolveGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_gameId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"}],\"name\":\"startGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_mainAddress\",\"type\":\"address\"}],\"name\":\"withdrawStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ORTBet.sol\":\"ORTBet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    using SafeCast for *;\\n\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\n     */\\n    error StringsInvalidChar();\\n\\n    /**\\n     * @dev The string being parsed is not a properly formatted address.\\n     */\\n    error StringsInvalidAddressFormat();\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input) internal pure returns (uint256) {\\n        return parseUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseUint} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 9) return (false, 0);\\n            result *= 10;\\n            result += chr;\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input) internal pure returns (int256) {\\n        return parseInt(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\n     * the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\n\\n    /**\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character or if the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, int256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseInt} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseIntUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, int256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // Check presence of a negative sign.\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\n\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\n\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\n            return (true, type(int256).min);\\n        } else return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\n        return parseHexUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\n     * invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseHexUint} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseHexUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // skip 0x prefix if present\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 offset = hasPrefix.toUint() * 2;\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin + offset; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 15) return (false, 0);\\n            result *= 16;\\n            unchecked {\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\n                // This guaratees that adding a value < 16 will not cause an overflow, hence the unchecked.\\n                result += chr;\\n            }\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input) internal pure returns (address) {\\n        return parseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\n        if (!success) revert StringsInvalidAddressFormat();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\n     * formatted address. See {parseAddress} requirements.\\n     */\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\n        return tryParseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\n     * formatted address. See {parseAddress} requirements.\\n     */\\n    function tryParseAddress(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, address value) {\\n        if (end > bytes(input).length || begin > end) return (false, address(0));\\n\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\n\\n        // check that input is the correct length\\n        if (end - begin == expectedLength) {\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\n            return (s, address(uint160(v)));\\n        } else {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\n        uint8 value = uint8(chr);\\n\\n        // Try to parse `chr`:\\n        // - Case 1: [0-9]\\n        // - Case 2: [a-f]\\n        // - Case 3: [A-F]\\n        // - otherwise not supported\\n        unchecked {\\n            if (value > 47 && value < 58) value -= 48;\\n            else if (value > 96 && value < 103) value -= 87;\\n            else if (value > 64 && value < 71) value -= 55;\\n            else return type(uint8).max;\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\n     *\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n     * assembly block as such would prevent some optimizations.\\n     */\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n        assembly (\\\"memory-safe\\\") {\\n            value := mload(add(buffer, add(0x20, offset)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x44f87e91783e88415bde66f1a63f6c7f0076f2d511548820407d5c95643ac56c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2\\u00b2\\u2075\\u2076 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"},\"contracts/ORTBet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract ORTBet is Ownable {\\n    mapping(address => uint256) public userBalances;\\n    mapping(address => uint256) public lockedStakes;\\n    mapping(bytes32 => Game) public games;\\n    mapping(address => address[]) public backupAddresses;\\n    uint256 public constant feePercentage = 3;\\n    uint256 public constant maxBackupAddresses = 3;\\n    uint256 public feesCollected;\\n\\n    event StakesDeposited(\\n        address indexed player,\\n        address indexed depositAddress,\\n        uint256 amount\\n    );\\n    event StakesWithdrawn(\\n        address indexed player,\\n        address indexed withdrawalAddress,\\n        uint256 amount\\n    );\\n    event StakesLocked(address indexed player, uint256 amount);\\n    event StakesUnlocked(address indexed player, uint256 amount);\\n    event GameStarted(\\n        bytes32 indexed gameId,\\n        address indexed player1,\\n        address indexed player2,\\n        uint256 stakeAmount\\n    );\\n    event GameResolved(bytes32 indexed gameId, GameResult result);\\n    event BackupAddressAdded(\\n        address indexed backupAddress,\\n        address indexed owner\\n    );\\n    event BackupAddressRemoved(\\n        address indexed backupAddress,\\n        address indexed owner\\n    );\\n    event FeesWithdrawn(address indexed owner, uint256 amount);\\n\\n    enum GameResult {\\n        Draw,\\n        Player1Won,\\n        Player2Won\\n    }\\n\\n    struct Game {\\n        address player1;\\n        address player2;\\n        uint256 stakeAmount;\\n        bool ongoing;\\n    }\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n    function depositStakes() external payable {\\n        require(msg.value > 0, \\\"Deposit amount must be greater than 0.\\\");\\n        userBalances[msg.sender] += msg.value;\\n        emit StakesDeposited(msg.sender, msg.sender, msg.value);\\n    }\\n\\n    function depositStakes(\\n        address _mainAddress\\n    ) external payable onlyBackupAddress(_mainAddress) {\\n        require(msg.value > 0, \\\"Deposit amount must be greater than 0.\\\");\\n\\n        userBalances[_mainAddress] += msg.value;\\n        emit StakesDeposited(_mainAddress, msg.sender, msg.value);\\n    }\\n\\n    function withdrawStakes(uint256 _amount) external {\\n        require(_amount > 0, \\\"Withdrawal amount must be greater than 0.\\\");\\n        require(\\n            userBalances[msg.sender] >= _amount,\\n            \\\"Insufficient funds to withdraw.\\\"\\n        );\\n\\n        userBalances[msg.sender] -= _amount;\\n        payable(msg.sender).transfer(_amount);\\n        emit StakesWithdrawn(msg.sender, msg.sender, _amount);\\n    }\\n\\n    function withdrawStakes(\\n        uint256 _amount,\\n        address _mainAddress\\n    ) external onlyBackupAddress(_mainAddress) {\\n        require(_amount > 0, \\\"Withdrawal amount must be greater than 0.\\\");\\n        require(\\n            userBalances[_mainAddress] >= _amount,\\n            \\\"Insufficient funds to withdraw.\\\"\\n        );\\n\\n        userBalances[_mainAddress] -= _amount;\\n        payable(msg.sender).transfer(_amount);\\n        emit StakesWithdrawn(_mainAddress, msg.sender, _amount);\\n    }\\n\\n    function startGame(\\n        string calldata _gameId,\\n        address _player1,\\n        address _player2,\\n        uint256 _stakeAmount\\n    ) external onlyOwner {\\n        bytes32 gameIdHash = keccak256(abi.encodePacked(_gameId));\\n        // Checking stakeAmount just to see if the struct was initiated before.\\n        require(games[gameIdHash].stakeAmount == 0, \\\"Game ID already exists.\\\");\\n        require(\\n            _player1 != address(0) && _player2 != address(0),\\n            \\\"Invalid player address.\\\"\\n        );\\n        require(_stakeAmount > 0, \\\"_stakeAmount must be greater than 0.\\\");\\n        require(\\n            userBalances[_player1] >= _stakeAmount,\\n            \\\"Player1 has insufficient funds.\\\"\\n        );\\n        require(\\n            userBalances[_player2] >= _stakeAmount,\\n            \\\"Player2 has insufficient funds.\\\"\\n        );\\n\\n        // Calculate game starting fee\\n        uint256 feeFromEachPlayer = calculateFee(_stakeAmount) / 2;\\n        uint256 stakeAfterFeeDeduction = _stakeAmount - feeFromEachPlayer;\\n        // Lock stakes\\n        userBalances[_player1] -= stakeAfterFeeDeduction;\\n        userBalances[_player2] -= stakeAfterFeeDeduction;\\n        lockedStakes[_player1] += stakeAfterFeeDeduction;\\n        lockedStakes[_player2] += stakeAfterFeeDeduction;\\n        feesCollected += feeFromEachPlayer * 2;\\n\\n        games[gameIdHash] = Game({\\n            player1: _player1,\\n            player2: _player2,\\n            stakeAmount: stakeAfterFeeDeduction,\\n            ongoing: true\\n        });\\n\\n        emit StakesLocked(_player1, stakeAfterFeeDeduction);\\n        emit StakesLocked(_player2, stakeAfterFeeDeduction);\\n        emit GameStarted(gameIdHash, _player1, _player2, _stakeAmount);\\n    }\\n\\n    function resolveGame(\\n        bytes32 _gameId,\\n        GameResult _result\\n    ) external onlyOwner {\\n        require(\\n            games[_gameId].ongoing,\\n            \\\"Game either not created or is already finished.\\\"\\n        );\\n        Game storage game = games[_gameId];\\n\\n        lockedStakes[game.player1] -= game.stakeAmount;\\n        lockedStakes[game.player2] -= game.stakeAmount;\\n\\n        if (_result == GameResult.Player1Won) {\\n            // Transfer stakes to player 1\\n            userBalances[game.player1] += game.stakeAmount * 2;\\n            emit StakesUnlocked(game.player1, game.stakeAmount * 2);\\n        } else if (_result == GameResult.Player2Won) {\\n            // Transfer stakes to player 2\\n            userBalances[game.player2] += game.stakeAmount * 2;\\n            emit StakesUnlocked(game.player2, game.stakeAmount * 2);\\n        } else if (_result == GameResult.Draw) {\\n            // Refund both players\\n            userBalances[game.player1] += game.stakeAmount;\\n            userBalances[game.player2] += game.stakeAmount;\\n            emit StakesUnlocked(game.player1, game.stakeAmount);\\n            emit StakesUnlocked(game.player2, game.stakeAmount);\\n        }\\n\\n        game.ongoing = false;\\n\\n        // Emit the game resolved event\\n        emit GameResolved(_gameId, _result);\\n    }\\n\\n    function addBackupAddress(address _backupAddress) external {\\n        require(\\n            backupAddresses[msg.sender].length < maxBackupAddresses,\\n            string(\\n                abi.encodePacked(\\n                    \\\"Cannot add more than \\\",\\n                    Strings.toString(maxBackupAddresses),\\n                    \\\" backup addresses.\\\"\\n                )\\n            )\\n        );\\n        require(\\n            _backupAddress != address(0),\\n            \\\"Backup address cannot be zero address.\\\"\\n        );\\n        require(\\n            _backupAddress != msg.sender,\\n            \\\"Cannot set self as backup address.\\\"\\n        );\\n        require(\\n            !contains(backupAddresses[msg.sender], _backupAddress),\\n            \\\"Backup address already added.\\\"\\n        );\\n\\n        backupAddresses[msg.sender].push(_backupAddress);\\n        emit BackupAddressAdded(_backupAddress, msg.sender);\\n    }\\n\\n    function removeBackupAddress(address _backupAddress) external {\\n        require(\\n            contains(backupAddresses[msg.sender], _backupAddress),\\n            \\\"Not authorized to remove this recovery address.\\\"\\n        );\\n\\n        address[] storage backups = backupAddresses[msg.sender];\\n        for (uint i = 0; i < backups.length; i++) {\\n            if (backups[i] == _backupAddress) {\\n                backups[i] = backups[backups.length - 1];\\n                backups.pop();\\n                emit BackupAddressRemoved(_backupAddress, msg.sender);\\n                return;\\n            }\\n        }\\n    }\\n\\n    function getBackupAddresses(\\n        address _mainAddress\\n    ) external view returns (address[] memory) {\\n        return backupAddresses[_mainAddress];\\n    }\\n\\n    function withdrawFees(uint256 _amount) external onlyOwner {\\n        require(feesCollected >= _amount, \\\"Insufficient fees collected.\\\");\\n\\n        feesCollected -= _amount;\\n        payable(msg.sender).transfer(_amount);\\n        emit FeesWithdrawn(msg.sender, _amount);\\n    }\\n\\n    function calculateFee(uint256 _amount) public pure returns (uint256) {\\n        return (_amount * feePercentage) / 100;\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"Direct deposits not allowed.\\\");\\n    }\\n\\n    fallback() external payable {\\n        revert(\\\"Function does not exist.\\\");\\n    }\\n\\n    function getBalance(address _userAddress) external view returns (uint256) {\\n        return userBalances[_userAddress];\\n    }\\n\\n    function getLockedStake(\\n        address _userAddress\\n    ) external view returns (uint256) {\\n        return lockedStakes[_userAddress];\\n    }\\n\\n    function getGame(bytes32 _gameId) external view returns (Game memory) {\\n        return games[_gameId];\\n    }\\n\\n    function contains(\\n        address[] storage _list,\\n        address _target\\n    ) internal view returns (bool) {\\n        for (uint i = 0; i < _list.length; i++) {\\n            if (_list[i] == _target) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    modifier onlyBackupAddress(address _mainAddress) {\\n        require(\\n            contains(backupAddresses[_mainAddress], msg.sender),\\n            \\\"Caller is not a registered backup address.\\\"\\n        );\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x4bcd310735ead004d4d3d53b38843d6b45132bf16184d08c99246d3b3b58dd09\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":8,"contract":"contracts/ORTBet.sol:ORTBet","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":4954,"contract":"contracts/ORTBet.sol:ORTBet","label":"userBalances","offset":0,"slot":"1","type":"t_mapping(t_address,t_uint256)"},{"astId":4958,"contract":"contracts/ORTBet.sol:ORTBet","label":"lockedStakes","offset":0,"slot":"2","type":"t_mapping(t_address,t_uint256)"},{"astId":4963,"contract":"contracts/ORTBet.sol:ORTBet","label":"games","offset":0,"slot":"3","type":"t_mapping(t_bytes32,t_struct(Game)5052_storage)"},{"astId":4968,"contract":"contracts/ORTBet.sol:ORTBet","label":"backupAddresses","offset":0,"slot":"4","type":"t_mapping(t_address,t_array(t_address)dyn_storage)"},{"astId":4976,"contract":"contracts/ORTBet.sol:ORTBet","label":"feesCollected","offset":0,"slot":"5","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"base":"t_address","encoding":"dynamic_array","label":"address[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_array(t_address)dyn_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => address[])","numberOfBytes":"32","value":"t_array(t_address)dyn_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_struct(Game)5052_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct ORTBet.Game)","numberOfBytes":"32","value":"t_struct(Game)5052_storage"},"t_struct(Game)5052_storage":{"encoding":"inplace","label":"struct ORTBet.Game","members":[{"astId":5045,"contract":"contracts/ORTBet.sol:ORTBet","label":"player1","offset":0,"slot":"0","type":"t_address"},{"astId":5047,"contract":"contracts/ORTBet.sol:ORTBet","label":"player2","offset":0,"slot":"1","type":"t_address"},{"astId":5049,"contract":"contracts/ORTBet.sol:ORTBet","label":"stakeAmount","offset":0,"slot":"2","type":"t_uint256"},{"astId":5051,"contract":"contracts/ORTBet.sol:ORTBet","label":"ongoing","offset":0,"slot":"3","type":"t_bool"}],"numberOfBytes":"128"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}