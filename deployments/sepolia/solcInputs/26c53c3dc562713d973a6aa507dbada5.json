{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/ORTBet.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract ORTBet is Ownable {\n    mapping(address => uint256) public userBalances;\n    mapping(address => uint256) public lockedStakes;\n    mapping(bytes32 => Game) public games;\n\n    event StakesDeposited(address indexed player, uint256 amount);\n    event StakesWithdrawn(address indexed player, uint256 amount);\n    event StakesLocked(address indexed player, uint256 amount);\n    event StakesUnlocked(address indexed player, uint256 amount);\n    event GameStarted(\n        bytes32 indexed gameId,\n        address indexed player1,\n        address indexed player2,\n        uint256 stakeAmount\n    );\n    event GameResolved(bytes32 indexed gameId, GameResult result);\n\n    enum GameResult {\n        Draw,\n        Player1Won,\n        Player2Won\n    }\n\n    struct Game {\n        address player1;\n        address player2;\n        uint256 stakeAmount;\n        bool active;\n    }\n\n    constructor() Ownable(msg.sender) {}\n\n    function depositStakes() external payable {\n        require(msg.value > 0, \"Deposit amount must be greater than 0.\");\n        userBalances[msg.sender] += msg.value;\n        emit StakesDeposited(msg.sender, msg.value);\n    }\n\n    function withdrawStakes(uint256 amount) external {\n        require(amount > 0, \"Withdrawal amount must be greater than 0.\");\n        require(\n            userBalances[msg.sender] >= amount,\n            \"Insufficient funds to withdraw.\"\n        );\n\n        userBalances[msg.sender] -= amount;\n        payable(msg.sender).transfer(amount);\n        emit StakesWithdrawn(msg.sender, amount);\n    }\n\n    function startGame(\n        string calldata _gameId,\n        address _player1,\n        address _player2,\n        uint256 _stakeAmount\n    ) external onlyOwner {\n        bytes32 gameIdHash = keccak256(abi.encodePacked(_gameId));\n        // Checking stakeAmount just to see if the struct was initiated before.\n        require(games[gameIdHash].stakeAmount == 0, \"Game ID already exists.\");\n        require(\n            _player1 != address(0) && _player2 != address(0),\n            \"Invalid player address.\"\n        );\n        require(_stakeAmount > 0, \"_stakeAmount must be greater than 0.\");\n        require(\n            userBalances[_player1] >= _stakeAmount,\n            \"Player1 has insufficient funds.\"\n        );\n        require(\n            userBalances[_player2] >= _stakeAmount,\n            \"Player2 has insufficient funds.\"\n        );\n\n        // Lock stakes\n        userBalances[_player1] -= _stakeAmount;\n        userBalances[_player2] -= _stakeAmount;\n        lockedStakes[_player1] += _stakeAmount;\n        lockedStakes[_player2] += _stakeAmount;\n\n        games[gameIdHash] = Game({\n            player1: _player1,\n            player2: _player2,\n            stakeAmount: _stakeAmount,\n            active: true\n        });\n\n        emit StakesLocked(_player1, _stakeAmount);\n        emit StakesLocked(_player2, _stakeAmount);\n        emit GameStarted(gameIdHash, _player1, _player2, _stakeAmount);\n    }\n\n    function resolveGame(\n        bytes32 _gameId,\n        GameResult _result\n    ) external onlyOwner {\n        require(\n            games[_gameId].active,\n            \"Game either not created or is already finished.\"\n        );\n        Game storage game = games[_gameId];\n\n        lockedStakes[game.player1] -= game.stakeAmount;\n        lockedStakes[game.player2] -= game.stakeAmount;\n\n        if (_result == GameResult.Player1Won) {\n            // Transfer stakes to player 1\n            userBalances[game.player1] += game.stakeAmount * 2;\n            emit StakesUnlocked(game.player1, game.stakeAmount * 2);\n        } else if (_result == GameResult.Player2Won) {\n            // Transfer stakes to player 2\n            userBalances[game.player2] += game.stakeAmount * 2;\n            emit StakesUnlocked(game.player2, game.stakeAmount * 2);\n        } else if (_result == GameResult.Draw) {\n            // Refund both players\n            userBalances[game.player1] += game.stakeAmount;\n            userBalances[game.player2] += game.stakeAmount;\n            emit StakesUnlocked(game.player1, game.stakeAmount);\n            emit StakesUnlocked(game.player2, game.stakeAmount);\n        }\n\n        game.active = false;\n\n        // Emit the game resolved event\n        emit GameResolved(_gameId, _result);\n    }\n\n    receive() external payable {\n        revert(\"Direct deposits not allowed.\");\n    }\n\n    function getBalance(address _userAddress) external view returns (uint256) {\n        return userBalances[_userAddress];\n    }\n\n    function getLockedStake(\n        address _userAddress\n    ) external view returns (uint256) {\n        return lockedStakes[_userAddress];\n    }\n\n    function getGame(bytes32 _gameId) external view returns (Game memory) {\n        return games[_gameId];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}